{"pred": "\t\t\t\tif ( m_Participants[i].Gump != null )\n\t\t\t\t{\n\t\t\t\t\tm_Participants[i].Gump.Close();\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t}\n", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_v, e_u, **data.copy())\n\t\t\t\n\t\t\tif w < w_u:\n\t\t\t\tsolutions.append(A)\n\t\t\t\troots.remove(A)\n\t\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r')\n        a.seek(0)\n        a.seek(0, 1)\n        a.seek(-1, 1)\n        a.seek(1, 1)\n        a.seek", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "   if e.text == language:\n        return True\n        else:\n            return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t}\n\t\t\t}", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "       for a in self.answers:\n            ret += \"Answer: %s\\n\" % a\n        return ret\nclass _CategoryData(_QAData):\n    def ask_string(self):\n        return \"Category: %s\" % self.category\n    def hint_string", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob.", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                cert.print(s);\n            }\n        }\n    }\n}\n/*\n * ServerHelloDone ... SERVER --> CLIENT\n *\n * The server sends a message to the client indicating that it has\n * finished", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public synchronized static JESpace getSpace (String name) {\n        return (JESpace) spaceRegistrar.", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tbtnEnergizeAll.setRect(0, btnEnergize1.bottom() + 1, width, BTN_HEIGHT);\n\t\t\t\t\tbtnEnergizeAll.icon(new ItemSprite(ItemSpriteSheet", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       if environ['REQUEST_METHOD'] == 'POST':\n            return self.do_post(environ, start_response)\n        else:\n            start_response('405 Method not allowed', [('Content-Type', 'text/plain')])\n            return [\"Method not allowed", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       mark = \"setRepeated('%s')\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_id):\n        mark = \"unsetRepeated('%s');\"", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "           return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            return result\n\n\n\n\n\n\n\n\n", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsTrue (Object.ReferenceEquals (a, b), \"Union-DifferentIdentities\");\n\t\t}\n\t\t[Test]\n\t\tpublic void Union_DifferentPermissions ()\n\t\t{\n\t\t\tZoneIdentityPermission a = new ZoneIdentityPermission (", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       for trust_manager in self.trust_managers:\n            trust_manager.getAcceptedIssuers()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n    /**\n     * Prepares the domain admin page.\n     *\n     * @param request the request being serviced\n     * @param manager the mail", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "       self.__datastream_transport = await self.__datastream_address.connect()\n        self.__datastream_protocol = DataStreamProtocol(\n            self.__datastream_transport,\n            self.__datastream_address,\n            self.__datastream_settings,\n", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = Convert.ToInt32(store.GetValue (iter, columnJumpID));\n\t\t\t\t\tstore.SetValue (iter, columnJumpID, jumpID);\n\t\t\t\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues =\n            getArgValues(application, request, defaultMessages, locale, args);\n        return argValues;\n    }\n    /**\n     * Gets the message arguments based on the current <code>ValidatorAction</code>\n     * and <code>Field</code", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tpersons = loadFromFile();\n\t\t\t}\n\t\t}), FIRM_DATA(new ConfigFile<UUID, FirmData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic FirmData create(UUID id, ConfigurationSection conf)", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tgeneralNode.setPage(new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new IntegerFieldEditor(SHORT_REWIND,\n\t\t\t\t\t\t\"Short rewind", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               m_Owner.Caster.SendAsciiMessage(\"Target is not in line of sight\");\n            }\n        }\n\t}\n}\n\nCoded by: \nDarklord\n\nThis information was contributed by:\nDarklord\n\nThis information was contributed by:", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self._autoflush()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) {\n\t\t\tfinal String name = field.getShortName();\n\t\t\tif (name==null) { \n\t\t\t\tname = field.getClassName().toString();\n\t\t\t}\n\t\t\tfinal List<IField", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   r'/foo/*'`` in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if self.request.path.endswith(\"/\"):\n            if self.", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t\t\n\t\tprotected internal override void Render (HtmlTextWriter writer, bool startRendering)\n\t\t{\n\t\t\tif (startRendering) {\n\t\t\t\tbase.Render (writer, startRendering);", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   args = parser.parse_args()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetSkill(0) == SkillName.SkillGroup2)\n                        return GetNameForAttribute(SkillName.SkillGroup", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "   for platform in platforms:\n        # Get the build details for this platform\n        build_details = firefox_details.firefox_builds[platform]\n        # Get the build details for this locale\n        locale_details = firefox_details.firefox_builds[locale]\n        #", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.loadByLabel(label, projectID, issueTypeID);\n\t\t} else {\n\t\t\tstateBeansList = StatusBL.loadByLabel(label);", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (var argument in argumentSyntaxs) {\n                var argumentName = argument.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self.get_item_from_modulestore(self.split_test_usage_key, verify_is_draft=True)\n        # Change to second group configuration.\n        split_test = self._update_partition_id(1)\n        # Ver", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           if (fontSpecific) {\n                tmp.Add(GetToUnicode(parms));\n            }\n            else {\n                tmp.Add(GetCIDFontType2(parms));\n            }\n            writer.WriteFont(piref, tmp);\n        }\n", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcgn.depth = 0;\n\t\t\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<Bitmap>(callable);\n        task.addListener(new FutureTaskListener<Bitmap>() {\n          @Override public void onSuccess(Bitmap result) {\n            Util.runOnMain(new Runnable() {\n              @Override public void run() {\n", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n                }", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   @property\n    def is_displayed(self):\n        return (\n            self.in_cloud_instance and\n            match_page(summary='Select Policy Profiles') and\n            sel.is_displayed(resource_locator.format(self.context['object'].name))", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp,\n\t\t\tLabanSequenceVector sequences", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               base.Render(writer);\n            }\n        }\n        protected override void RenderContents(HtmlTextWriter writer)\n        {\n            if (!DesignMode)\n            {\n                base.RenderContents(writer);\n            }\n        }\n        protected override void RenderAttributes(HtmlText", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return \"Effect{\" +\n            \"probability=\" + probability +\n            \", scopes=\" + scopes +\n            '}';\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_search(t, {'itype': 'fqdn', 'groups': 'everyone'})\n    i = json.loads(i)\n    i = [i['_source'] for i in i['hits']['hits']]\n", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       person = Person.objects[0].select_related()\n        organization = Organization.objects.first()\n        self.assertEqual(person._get_changed_fields(),\n                         ['owns.0'])\n        self.assertEqual(person._delta(),\n                         ({'own", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   self._plot_waveform_line(ind=ind if ind else 0, ref_ind=ref_ind)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (path.IsNotNullOrWhiteSpace())\n                {\n                    toScan.Add(path);\n                }\n            }\n            foreach (var path in toScan)\n            {\n                var rootFolder = ((FileSystemWatcher)sender).Path;\n                var path =", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn computed == null ? null : write(key, computed);\n\t}\n\t@Override\n\tpublic E computeIfPresent(K key,\n\t\t\t\t\t\t\t  BiFunction<? super K, ? super E, ? extends E> remappingFunction,\n\t\t\t", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       pdt.objectValues(query,objcommentslist,replydict,viewtype)\n        \n        if viewtype.lower() == 'listview':\n            objcommentslist = objcommentslist[:display_count]\n            replydict = replydict[:display_count]\n        \n       ", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t}\n\t\tpublic int X\n\t\t{\n\t\t\tget { return m_X; }\n\t\t}\n\t\tpublic int Y\n\t\t{\n\t\t\tget { return m_Y; }\n\t\t}\n\t\tpublic sbyte Z\n\t\t", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   channelUri = scene.GetVoiceChannelURI(avatar.AbsolutePosition);\n                }\n                //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): av", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tPayPeriods.Delete(PayPeriodCur);\n\t\t\t\tDialogResult=DialogResult.OK;\n\t\t\t}\n\t\t}\n\t\tprivate void", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "   return _generate_cubes(header, column_headings, coords, data_arrays,\n                           cell_methods)\n\n\ndef _build_cell_methods(column_headings, column_name, dimension):\n    \"\"\"\n    Build a generator of :class:`", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   if not authz.is_authorized('group_create', context, data_dict):\n        return {'success': False, 'msg': _('User %s not authorized to create groups') % user}\n    else:\n        return {'success': True}\n\n\n\n\n\n", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tint parentPartitionId = splittedSet.getActualParentPartitionId(Index);\n\t\t\t\t// assigning parent\n\t\t\t\texample.setValue(parentPartitionId, parent);\n\t\t\t\t// assigning outcome\n\t\t\t\texample.set", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new[] { new SearchResults() };\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"segments\">The array", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = string.charAt(offset++);\n            if (codePoint < 0x10000) {\n               return _asciiSet[codePoint] ? offset : -1;\n            }\n            codePoint = string.charAt(offset++);\n            if", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "     ValidationResults results = ValidationResults.SAMPLE_NOT_FOUND;\n      if (existingRequired) {\n        results = matchExistingStudyFormName(accessionNumber, studyFormName, false);\n      }\n      return results;\n    }\n    /**", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (State != ServerState.ShuttingDown)\n\t", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(((ims.core.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionListVoBean)beans[x]).buildV", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "   xbmc.executebuiltin(\"Notification(\"+localtxt1+\",\"+localtxt2+\", 5000, %s)\" % (image))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot'", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPointsForNewProductionBuildings(bot);\n\t\t}\n\t\tvoid IBotRespondToAttack.RespondToAttack(IBot bot, Actor self, AttackInfo e", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       return plan.getPlanNodes();\n    }\n    public List<AbstractPlanNode> compile(String sql, int paramCount, String joinOrder, Object partitionParameter, boolean singlePartition, boolean inferSP, boolean lockInSP, DeterminismMode detMode)\n    {\n        return", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(121, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.com", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = parity;\n\t\t\tdcb.DataBits = data_bits;\n\t\t\tdcb.StopBits = bits;\n\t\t\tdcb.Xon", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       page = self.get_page(self.user.get_profile().get_url(),\n                              login_as=self.user)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    if args.keep_tempdir:\n        _keep_tempdir = True\n    else:\n        _keep_tempdir = False\n    #print \"args.keep_tempdir is\", args.keep_tempdir\n    #print \"", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tif newListIndex is None:\n\t\t\t\t\tnewListIndex = newList.index(entry)\n\t\t\t\telse:\n\t\t\t\t\tnewListIndex = newListIndex + 1\n\t\t\t\tif newListIndex is not None:\n", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               return new Rectangle(fontX, fontY, fontX, fontY);\n            }\n        }\n        \n        /** Gets the maximum area that the barcode and the text, if\n        * any, will occupy. The lower left corner is always (0, 0).\n", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return ArrayUtils.toPrimitive(results);\n  }\n  \n  /**\n   * Loads a comma-separated list of strings from Properties.  The list cannot include any whitespace.\n   */\n  public static String[] getStringArray(Properties props, String key, String defaultValue", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-90.0, +90.0, 10.0)\n\n    def test_tri_polar_method_linear(self):\n        # Test linear interpolation against a result snapshot.\n        test_cube = self.c", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetText(currPacket.packet.ToString());\n        }\n        private void toolStripButtonPaste_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\nNext line of code:\n            string", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "   elif color == 'yellow':\n        print '\\033[1;33;40m'\nNext line of code:\n    else:\n        print '\\033[1;37;40m'\nNext line of code:\n    print '\\033[", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "       }\n    }\n}\n\n\nA: I'm not sure what you're trying to do here. \nIf you want to remove a key from the set, you can just do:\n_refSet.Remove(key);\n\nIf you want to remove all keys from the set", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(245, 297);\n            this.Controls.Add(this.treeView1);\n            this.Icon = ((System.", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "       return createBaseFunction(\n            original.__name__,\n            original.DLL,\n            resultType = original.restype,\n            argTypes = original.argtypes,\n            doc = original.__doc__,\n            argNames = original.argNames,\n            extension = original.", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           header.write(NID.kEmptyStreams);\n            header.write(emptyStreams.toByteArray());\n        }\n    }\n    private void writeFileEmptyStreams(final DataOutput header) throws IOException {\n        header.write(NID.kEmptyStreams);", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   if (alphaLevel > 0)\n                    {\n                        alphaLevel--;\n                        g2.setColor(new Color(255, 255, 255, alphaLevel));\n                        g2.fill(ticker[i]);\n                ", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_removable_and_should_", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "               if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellation", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       f.writelines(['F) 1\t\t\t# PSF convolution kernel', \\\n                      ' (FITS file)\\n'])\n        f.writelines(['G) 1\t\t\t# PSF kernel size', \\\n                      ' (FITS file)\\n'])", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   break;\n                case 0x02:\n                    /* C */\n                    i = b;\n                    break;\n            }\n            lo[0] = i;\n        }\n    };\n    /**\n     * *************************************************************************\n     */\n", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self.locator\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\tchance = Float.parseFloat(splitNumber[1]);\n\t\t}\n\t\treturn (int) (chance*100);\n\t}\n\t\n\tprivate void fulfillSafari(Player", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "   if response['status'] != 200:\n        module.fail_json(\"Failed to delete meter\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 33);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size =", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       for plugname, plug in self.loaded_plugins:\n            if plug.collect():\n                plugruncount += 1\n                self.ui_log.info(\" %-20s %s\" % (plugname, plug.get_description()))\n                self.ui", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "   getRoomFullName.convert = Conversion.roomFullName\n    def getRoomBookingList(self):\n        \"\"\" Session Room Booking List \"\"\"\n    getRoomBookingList.convert = Conversion.roomBookingList\n    def getStartDate(self):\n       ", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           parent.mirthClient.importMessage(channelId, message);\n                        }\n                        return true;\n                    }\n                };\n                result = messageWriter.importMessages(fileTextField.getText(), messageBrowser, messageWriter);\n            } else {\n                result = messageBrowser", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tlayer = ((Scriptable) value).getInt(LAYER, (Scriptable) options);\n\t\t       \t\t} else if (value instanceof Map) {\n\t\t       \t\t\tlayer = ((Map) options).getInt(LAYER);\n\t\t       ", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null) {\n            userProfilePicID = currentSession.getUserProfilePicId();\n            userProfilePic = currentSession.getUserProfilePic();\n            userInfoSession = currentSession;\n            connectedStateLabel.setText(currentSession.getUserName", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (int i=0; i<emotions.length; i++)\n\t\t\tsum += emotions[i].strength;\n\t\tfor (int i=0; i<emotions.length; i++)\n\t\t\temotions[i].strength", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n                }\n            }],\n            self.build.to_dict())\n        # add properties\n        self.build.add_property('property1', 2)\n        self.build.add_property('property", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   Lat = phi1\n    Long = LongOrigin + phi1\n    return Lat, Long\n\n#==============================================================================\n#\n#  UTMZoneNumberToUTMZone\n#\n#  This routine converts a UTM zone number to a UTM zone letter\n", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       form = ReportUserForm(request.POST, instance=user)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Reported successfully!\")\n            return HttpResponseRedirect(reverse('profile'))\n    else:\n        form = ReportUser", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @property\n    def page_title(self):\n        \"\"\"The HTML page title.\"\"\"\n        return 'Add series'\n    def initialize(self):\n        \"\"\"See `LaunchpadFormView`.\"\"\"\n        super(ProductAddSeriesView, self).initialize()\n        self.form", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t}\n#endif\n\t\tpublic void App", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    /**\n     * Write to String\n     *\n     * @return the datatype converted to a string\n     */\n    public String toString(String separator)\n    {\n        if (", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "   return re.compile(re.escape(regex))\n    def compile_length_regex(length_tags):\n        if not length_tags:\n            return None\n        else:\n            new_length_tags_list = []\n            length_tags = length_tags[0]\n", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               throw new NotImplementedException ();\n            }\n            public override object[] GetCustomAttributes (bool inherit)\n            {\n                return new object[0];\n            }\n            public override Type[] GetInterfaces ()\n            {\n                return new Type[0];\n            }\n           ", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "   }\nclass OBD_PID1D(OBD_Packet):\n    name = \"PID_1D_FuelSystemStatus\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=100 / 128.,\n", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tif ready_pipe:\n\t\t\tself.bus.add_signal_receiver(self.on_name_owner_changed,\n\t\t\t                              'NameOwnerChanged',\n\t\t\t                              'org.freedesktop.Secret.Collection', sender_keyword='sender", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "\t\t\t\tAddNecroSpell( 15, 17, 79.6, typeof( VengefulSpiritScroll ), Reg.BatWing, Reg.GraveDust, Reg.SulfurousAsh );\n\t\t\t\tAddN", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "       _app_ctx_stack.pop()\n        if self.session is not None:\n            self.session.close()\n        if self.flashes is not None:\n            self.flashes.pop()\n        if self.request is not None:\n            self.request.pop", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, needs_columns)\n    if topic_name:\n        response = response.filter(PubSubConsumer.topic_id==topic_name)\n    return response\n# ################################################################################################################\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getConsumedRelatedResourcesByRelease(ResourceEntity resource, ReleaseEntity release) {\n        List", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "   axis_proj = _axis_in_detector(ray_trafo.geometry)\n    # Compute angles\n    phi = np.arctan(axis_proj[0] * ray_trafo.range.meshgrid[1] +\n                     axis_proj[1", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "       return regx\n    def _buildRE(self, regx):\n        \"\"\" Return the Proxyfied RE string \"\"\"\n        if self.isEnabled():\n            regx = re.sub('//1', self.option, regx).replace('&', '&amp;')\n", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn type.ToString (fmt) + \" \" + unit.ToString (fmt);\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar obj2 = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(obj2.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(obj2.Properties[0].Value.Type,", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int w = 0; w < width; w++) {\n                    edges.add(new T2(getSIPrefix()+\"square-cylinder-\"+w+\"-\"+h, getSIPrefix()+\"square-cylinder-\"+w+\"-\"+h, \"square", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   ds.add_px_err(isoel=isoel,\n                  col1=\"deform\",\n                  col2=\"deform\",\n                  px_um=px_um,\n                  inplace=False)\n    assert np.allclose(data[0][", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       final IAccessPath<ISPO> expected = new AccessPath(db, \"http://localhost:8080/bigdata/test/test.rdf\");\n        final IAccessPath<ISPO> actual = new AccessPath(db, \"http://localhost:8080/", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                    u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u'SpotPrice': '0.105200',\n                     u'AvailabilityZone': 'us-east-1b'}\n                ", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should download and install Yarta.\n\t * \n\t * When the function returns true Yarta will be installed.\n\t * \n\t * @return true/false", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteBuffers(1, new int[] { 0 }, 0);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteTextures(1, new int[] { 0 }, 0);\n\t\t\tOpen", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       or :py:obj:`None` if singular.\n        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._data_container.data_cov_mat_inverse\n    @property\n    def x_data_error(self):\n        \"\"\"1D array", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * Returns a string representation of this object.\n     *\n     * @return a string representation of this object.\n", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "               }\n              } catch (Exception e) { // If the account is deleted, use the eucalyptus admin account\n                LOG.warn(\"Account ID \" + walrusObject.getOwnerId() + \" does not not exist. Changing the ownership of object \"\n                    + walrus", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public event EventHandler Initialized\n        {\n            add { _initialized += value; }\n            remove { _initialized -= value; }\n        }\n        public", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       final ImportVmTemplateParameters parameters = new ImportVmTemplateParameters(Guid.newGuid(), Guid.newGuid(), Guid.newGuid(), Guid.newGuid(), Guid.newGuid(), t);\n        when(command.getBackend().runInternal", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.TopAttach = ((uint)(1));\n\t\t\tw10.BottomAttach = ((uint)(2));\n\t\t\tw10.LeftAttach = ((uint)(3));\n\t\t\tw10.RightAttach = ((uint)(", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\\n            self.category\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic ConstructorBuilder DefineConstructor(MethodAttributes attribs, CallingConventions callConv, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)\n\t\t{", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return new Builder(prototype);\n    }\n    protected override Builder ThisBuilder {\n      get { return this; }\n    }\n    public override pb::MessageDescriptor DescriptorForType {\n      get { return global::bnet.protocol.channel_invitation.ChannelInvitation", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "               vertices[x] = getVertices()[getVertIndex(i, x)];\n            }\n        }\n    }\n    /**\n     * Stores in the <code>vertices</code> array the vertex values of quad\n     * <code>i</code>. If <code", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (showDateData.length() > 0) {\n            result.add(COLUMNS_DATE_CREATED);\n        }\n        String showDateModified = property(\"categoryDateModified\", \"search\", \"\");\n        if (showDateModified.length() > ", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds (animationDuration);\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnPaintBackground(PaintEventArgs e)\n    {\n      e.Graphics.FillRectangle(SystemBrushes.Control, ClientRectangle);\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!string.IsNullOrEmpty(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            foreach (string user in Users)\n            {\n                SendEmails", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions;\n", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           ValidationControlsData = new TValidationControlsData(ValidationColumn, VerificationResultCollection);\n            ValidationControlsData.ValidateDataManual(AVerificationResult);\n        }\n        private void ValidateDataAutomatic(PcConferenceRow ARow)\n        {\n            P", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, (int)stream.Length);\n                args.Add (filename, buffer);\n            }\n        }\n        /*\n         * Loads a binary file and appends as blob/byte[] into args.\n         */\n        static void LoadBinaryFile", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "       return len(self._reqs[PayloadRequirementType.group]) == 0\n    def __len__(self):\n        \"\"\"Return the number of requirements.\n        return: number of requirements\n        rtype: int\n        \"\"\"\n        return len(self._reqs[Pay", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\treturn _copyOption == CopyOption.CopyCustom;\n\t\t}\n\t\tpublic bool UseInstanceNumberEnabled\n\t\t{\n\t\t\tget { return UseInstanceNumber; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (!value)\n\t\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tdataDir = value;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t\t", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation.getBugType() == BugType.BREAKPOINT) {\n                break;\n            }\n        }\n    }\n    /**\n     * For debugging: check a BugInstance to make sure it is valid.\n     *\n     * @param bug", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\tpublic class CheeseWedge : Food\n\t{\n\t\t[Constructable]\n\t\tpublic CheeseWedge() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic CheeseWedge( int amount ) : base", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast();\n                        }\n                    }\n                }\n            }\n        }\n        private void JungleClear()\n        {\n            if (Menu.GetBool(\"J", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t *", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        if fb == '':\n            return {}\n        header = fb[4]\n        legend = fb[8].split()\n        date = re.findall(r\"\\d\\d\\.\\d\\d\\", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(\n            field_def, field_model_def)\n        clean_field_model_definitions()\n    def test_field_name_model_based_with_override(self):\n        \"\"\"JSONAlchemy - field name model based with override\"\"\"\n", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new[] {new object[] {\"10\", \"TheString\", \"?10?\"}});\n                env.UndeployAll();\n            }\n        }\n        internal class InfraWidening2 : RegressionExecution\n        {\n            private readonly bool namedWindow;\n           ", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "       clibrebound.reb_particle_imul(byref(self), c_double(other))\n        return self\n    \n    def __neg__(self):\n        c = self.copy()\n        return c.__ineg__(self)\n    \n    def __ineg__(", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "   return self.render(cr, uid, id_or_xml_id, values=values, engine='ir.qweb', context=context)\n\n\nA: I'm not sure why you're using the view_id in the view_obj call.  You should be able", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = new HTML(text);\n        } else {\n            value = oldValue;\n        }\n        if (value != null) {\n            c.setClientProperty(BasicHTML.propertyKey, value);\n        }\n    }\n    /**\n     * Returns the HTML renderer", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, contents=content)\n    assert s.name_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    for item in items:\n        assert item.timeout is None\n", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new SqlLoader(namedReference);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmapping.SqlLoader.NamedReference = namedReference;\n\t\t\t}\n\t\t}\n\t\tpublic void Loader(string", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Faction.State.Tithe );\n\t\t\twriter.WriteEncodedInt( (int) m_Faction.State.Silver );\n\t\t\twriter.WriteEncodedInt( (int) m_F", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       assert graphQueue.size() <= maxGraphs;\n    }\n    private void pushInvocationAndGraphs(MethodInvocation methodInvocation) {\n        maxGraphs += methodInvocation.callee().numberOfMethods();\n        assert graphQueue.size() <= maxGraphs;\n        for (int", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "               pytest_command = 'pytest -v --cov {} --cov-append {} --cov-append-path {} --cov-append-file {} --cov-append-file-name {} --cov-append-file-path {} --cov-append-file-name {} --cov-append-", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    states.get(0).readCache.put(key, value);\n                }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraSessionEvent */\n    public void handleCamera", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new InternalGump(from as PlayerMobile, this));\n\t\t\t}\n\t\t}\n\t\t\n\t\tprivate class InternalGump : Gump\n\t\t{\n\t\t\tpublic Item EodonianWallMap { get", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   from invenio.legacy.bibrec import get_fieldvalues\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "       self.module.set(user, data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath)\n    def save_as_mofile(self, fpath):\n        \"\"\"\n        Save the binary representation of the file to *fpath", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to get TransformationProblematics\", res['Message'] )\n      return res\n    transDicts = res['Value']\n    if not transDicts:\n      gLogger.info( \"No transformations found in Wait", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\treturn baseURI.resolve(uri.toString()).toASCIIString();\n\t\t} catch (URISyntaxException e) {\n\t\t\tthrow new CommentException(l10n(\"invalidFormURI\"), e);\n\t\t}\n\t}\n\t\n\t/**\n\t", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       yield self.check_single_build_legacy(buildResult, verifiedScore)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.type = 'text'\n    self.category.text = 'Less: &lt;'\n    self.assert_(self.category.type == 'text')\n   ", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "AnnotatedTypeMirror type) {\n        if (type.hasAnnotationRelaxed(I)) {\n            String immutableString =\n                AnnotationUtils.getElementValue(getImmutabilityAnnotation(type));\n            if (r1.containsKey(immutableString)) {\n", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           _engine.Memory.Map.CurrentMapper.SaveState(this);\n            #endregion\n            #region PPU\n            _ppu.SaveState(this);\n            #endregion\n            #region APU\n            _engine.Apu.SaveState(this);\n            #", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           JMenuItem jMenuItem = new JMenuItem(sTDocUrl);\n            jMenuItem.addActionListener(oActionListener);\n            _jMnuRoot.add(jMenuItem);\n        }\n        private void addTabPane(JTabbedPane _jTabbedPane){\n            J", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Red Bears]\nNext", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn Frame.H;\n\t\t}\n\t\tpublic int SizeWidthToFit ()\n\t\t{\n\t\t\treturn SizeWidthToFitWithMin (0);\n\t\t}\n\t\tpublic int SizeWidthToFitWithMin (int min)\n\t\t", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "       return self.tweet_id\n    def get_absolute_url(self):\n        \"\"\"\n        Return the permalink to this announcement.\n        \"\"\"\n        return reverse('announcements:twitter_cross_publication_detail', kwargs={'slug': self.slug", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "#html_context = sphinx_material.get_html_context()\n\n# -- Options for HTML output ----------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#html_theme =", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "   cursor.execute('''SELECT sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration\n                 FROM flight_group WHERE groupID=?''', (i,))\n    rows = cursor.fetchall()\n    for row in rows", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "   db_set_last_snapshot(new_snapshots)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"I'm not sure what you mean by that.<br/>I'm not a thief, you know.\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_farm\":\n\t\t\t\tMsg(\"You want to buy a farm?<br/>", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead = ()\n        self.codetail = ('name',)\n", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "   def _finish_task(self, status, result):\n        \"\"\" record the results of a task for a single host \"\"\"\n        task_uuid = result._task._uuid\n        if uuid in self._task_data:\n            return\n        play = self._play_name\n       ", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               Intent intent = new Intent(Intent.ACTION_VIEW, uri);\n                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                context.startActivity(intent);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary.keys()) > 0):\n        print(\"primary.xml contains additional packages:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name, pkg.", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "       inputs.extend(self.get_finalized_command('build_ext').get_outputs())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < disassembledValues.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = disassembledValues[j];\n\t\t\t\tif (InitializeLazyProperty(fieldName, entity, session,", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '-J', job_name,\n        '-o', log_name,\n        '-N', job_name,\n        '-n', job_name,\n        '-t', job_name,\n        '-c', job_name,\n        '-v', job_name,\n        '-", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           ViewBag.ToolButtons = \"VP\"; // View Pick \n            ViewBag.PickState = true;\n            return View(\"DelegateList\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                       var circle = (Circle) obj;\n                        return string.Format(\"({0},{1},{2})\", circle.X, circle.Y, circle.Radius);\n                    }\n                    if (obj is Vector2)\n                    {\n                        var vector = (Vector", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "   self.doTimmer()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t\tif (path.Count > 0)\n\t\t\t\t{\n\t\t\t\t\tvar closestHarvestableCell = ClosestHarvestablePos(self);\n\t\t\t\t\tharv.LastHarvestedCell = orderLocation;\n\t\t\t\t", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                      self.logger.error(\"dhcpd -t failed\")\n                       return False\n                else:\n                    service_restart = \"service %s restart\" % self.dhcp_service_name(self.api)\n                    rc = utils.subprocess_call", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           while (true)\n            {\n                if (state.Frequency < 256)\n                {\n                    states[stateIndex] = state;\n                    stateIndex++;\n                    goto NoLoop;\n                }\n                state = _allocator.AllocateUn", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The String VR.\n        /// </summary>\n        public static readonly DicomVr SVr = new DicomVr(\"SV\", false, false, true, 16", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(session_l[tFull[1]]);\n\t\t}\n\t\t\n\t\tif(sessionValuesArray.Count > 0)\n\t\t{\n\t\t\tint [] sessionIDs = new int[sessionValuesArray.Count];\n\t", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "       o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 4)\n        self.assertEquals(b'abcdefghijghij', self.read(o))\n    def test_smaller_than_file_at_end", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 32-", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   ax.plot(cr['combined'][app][VC]['durations'],\n             cr['combined'][app][VC]['stats']['intervals'][0]['interval'],\n             label='95%% CI')\n    ax.plot(cr['combined'][app][VC", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   def test_UID(self):\n        \"\"\"\n        Check UID/GID switches when current effective UID is root.\n        \"\"\"\n        self._testUIDGIDSwitch(0, 0, 0, 0, [], [])\n        self._testUIDGIDSwitch", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\telse if(model.", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[1])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        mirror.writeElement(kind, index, value);\n    }\n    @HOSTED_ONLY\n    public void writeHeaderValue(ObjectMirror mirror, int offset, Value value) {", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           return FileUtils.CombinePaths(SolutionTask.Project.FullName, relativePath);\n        }\n        /// <summary>\n        /// Resolves an assembly reference using a path relative to the project \n        /// directory.\n        /// </summary>\n        /// <returns>\n", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return string % args\n\ndef str_format_color(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using {% and %}\n    instead of { and }\n    \n    This version adds coloring to the output\n    \"\"\"\n", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       Dlasdq.dlasdq(\"U\", i17, i17, 0.0D, 1.0D, paramArrayOfDouble12, i22 - 1 + paramInt22, 1, paramArrayOfDouble12, i22", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                   CollisionObjects = new[]\n                    { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Lucian\n            #region Malphite\n            Spells.Add(\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       with self.assertRaises(OSError) as cm:\n            subprocess.Popen(['/bin/sh', '-c', 'echo hello'])\n        self.assertEquals(errno.ENOENT, cm.exception.errno)\n    @testlib.with_context", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (propertiesName == null)\n\t\t\t\tthrow new InvalidOperationException(\"propertiesName must be set before StartCoreServices() is called\");\n\t\t\tif (configDirectory == null)\n\t\t\t\tthrow new InvalidOperationException(\"configDirectory must be set before StartCoreServices", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\tinternal void AddConstraint (ConstraintCollection collection)\n\t\t{\n\t\t\tif (collection == null)\n\t\t\t\tthrow new ArgumentNullException (\"collection\");\n\t\t\tif (collection.Contains (this))\n\t\t\t\tthrow new ArgumentException (\"Constraint already in collection\");", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.verticalLayout_2.addWidget(self.settings_misc_groupBox)\n        self.verticalLayout_2.addWidget(self.settings_project_groupBox)\n        self.verticalLayout_2.addWidget(self.settings_kernels_groupBox)\n", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               TextView textView = new TextView( getActivity() );\n                textView.setText( R.string.no_stations_found );\n                layout.addView( textView );\n                return false;\n            }\n            Cursor c = result[ 1 ];\n            if ( c ==", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\ts.CreateQuery(\"select Id, Name from Country\").List().Count;\n\t\t\t}\n\t\t\tQueryStatistics sqlStats = stats.GetQueryStatistics(\"select Id, Name from Country\");\n\t\t\tAssert.IsNotNull(sqlStats, \"sql stats", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ uiByteValue;\n                uiCRCITTSum ^= uiByteValue;\n                uiCRCITTSum ^= uiByteValue;\n                uiCRCITTSum ^= uiByteValue", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn entityData.get(SHOOTING_SPEED);\n\t}\n\tpublic void setShootingSpeed(int speed) {\n\t\tentityData.set(SHOOTING_SPEED, speed);\n\t}\n\tpublic int getShootingSpeed", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                new CeylonJavaBackendHyperlinkDetector(), \n                new CeylonInformationControlCreator(), \n                new CeylonInformationProvider(), \n                new CeylonInformationControlCreator(), \n                new", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.l.addWidget(self.drawingModeWidget, 0, 0)\n        self.l.addWidget(qt.QSpacerItem(0, 0), 1, 0)\n        self.l.addWidget(qt.QSpacerItem", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    chosenObj = selectConverter.convert(value);\n                  }\n                  else\n                  {\n                     Converter<Object, Object> converter = converterFactory.getConverter(targetType, Object.class);\n                     chosenObj = converter.convert(value);\n                  }", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tif (i!=j)\n\t\t\t\t\tsb.append(\"\"+i+\"->\"+j+\" \\t\"+min[i][j] +\"\\t\"+max[i][j] +\"\\t\"+avg[i][j]+\"\\n\"); \n\t\tsb", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                           foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                                int line", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskException {\nNext line of code:\n\t\t\tget { throw new Not", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final Database mockDatabase = EasyMock.createMock(Database.class);\n        final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        //expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(3);\n        //expect(mock", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn new Vector2 (v.X, v.Y) * viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Vector2 viewport)\n\t\t{\n\t\t\treturn new Vector2 (v.X", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "   def __eq__(self, other):\n        if type(self) != type(other):\n            return False\n        if self.packets != other.packets:\n            return False\n        if self.bytes != other.bytes:\n            return False\n        return True\n\n\n\n", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\tConsole.WriteLine(\"dpslamServer/Send(\" + PortNumber.ToString() + \")/\" + se.Message);\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t///", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           switch(type) {\n                case Activity:\n                    mActivityBucketList.addAll(list);\n                    break;\n                case Step:\n                    mStepBucketList.addAll(list);\n                    break;\n            }\n        }\n    }", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " print '};'\n  print ''\n  # generate the multi-use version of the callback\n  print textwrap.dedent(\"\"\"\\\n  /**\n   * @brief A %d argument callback which can be called multiple times.\n   */\"\"\" % number_of_args)", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   return simplejson.dumps(range_item_dict(items), cls=JSONEncoder))\n    \"\"\"\n    return simplejson.dumps(range_item_dict(items), cls=JSONEncoder))\ndef range_csv(filename, items):\n    \"\"\"\n   ", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(\"score\"), Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       return super(UserDetailView, self).post(request, *args, **kwargs)\n\n\nclass UserCreateView(CreateView):\n    model = Contact\n    form_class = UserCreateForm\n    template_name = \"shoop/admin/users/create.jinja\"\n", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// A list of the modules that constitute the assembly.\n    /// </summary>\n    public IEnumerable<IModule> MemberModules {\n      get { return Enumerable<", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           var v2 = new DenseVector(input.Count);\n            var v3 = new DenseVector(input.Count);\n            var v4 = new DenseVector(input.Count);\n            var v5 = new DenseVector(input.Count);\n            var v6 =", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[0];\n\t\t}\n\t\t\n\t\tApfloat[] medians = new Apfloat[2];\n\t\t\n\t\tApfloat[] sortedMedians = new Apfloat[2];\n\t\tApfloat[] sortedMedians2 = new Apfloat", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "   update_counts(edge, -1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "   for mapping in mapping_json['mappings']:\n        if mapping['type'] == 'nested':\n            for mapping_item in mapping['properties']:\n                if mapping_item['name'] in csv_mapping:\n                    result[mapping_item['name']] = csv_mapping", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.AllowBots)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar bot = slot.GetOrNull<BotInfo>();\n\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "   frame_header.frame_type = FrameType.DATA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           var b = cluster.BoundingBox;\n            if (b.Left < b.Right)\n                throw new Exception(\"Left bound of the graph is smaller than right bound\");\n            if (b.Top < b.Bottom)\n                throw new Exception(\"Top bound of the graph is smaller than", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeDegrees = m_maxSlopeRadians * 180.0 / M_PI;\n}\ndouble btKinematicCharacterController::getMaxSlope()\n{\n\treturn m_maxSlopeDegrees;\n", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       if (initializers.isEmpty()) {\n            checker.report(Result.failure(\"unique.leaked\"), node);\n        }\n        return super.visitNewArray(node, p);\n    }\n    @Override\n    public Void visitNewClass(NewClassTree node,", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound != null)\n\t\t\t{\n\t\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\t\tif (nbttagcompound1 != null", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = new ClassItem(typeAttribute.Value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Loads the", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.Width = 200;\n\t\t\t\tmyTrackBar.Height = 250;\n\t\t\t\tmyTrackBar.Orientation = Orientation.Vertical;\n", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tdoReturn(Collections.singleton(annotationType)).when(searchNarrower).narrowByAnnotationType(Matchers.<Callable<?>> any());\n\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration, Collections", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\treturn true;\n\t}\n\t\n\t/**\n\t * Returns the access path of the current abstraction\n\t * @return The access path\n\t */\n\tpublic AccessPath getAccessPath() {\n\t\treturn accessPath;\n\t}\n\t\n\t/**\n\t * Returns", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideR;\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this right constituent stretch far enough to reach the left constituent?\n              continue;\n            }\n            float pS =", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "           'rsync',\n            '-e',\n            \"/bin/sh -c 'echo \"\n            '\"$@\"; echo \"'\"',\n            'src',\n            'dst'\n            ],\n            shell=False, env=None,\n            stdout=PIPE, stderr=PI", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.Runt", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a parameter with a color value.\n\t *\n\t * @param   name    Name of the parameter.\n", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( (proxyThat == null) || (this.getClass() != proxyThat.getClass()) ) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal Contact contact = (Contact) proxyThat;\n\t\tif ( this.getContactDate() == null ) {", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "   if n == 0:\n      status = 'w'\n      else:\n        status = 'a'\n      with open(name, status) as f_ID:\n        f_ID.write(str(body_types[i]) + '\\n')\n      for j in range", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "   if cdata is None:\n        return\n    # If the optimization is tried over a node that is not a part of graph before\n    if not hasattr(node, 'fgraph'):\n        return\n    # This optimization needs ShapeOpt and fgraph.shape_feature\n    if not", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   self.fields['groups'].label = \"Select groups\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "                   fn(*arg, **kw)\n                    return None\n        else:\n            fn(*arg, **kw)\n            return None\n\n\nclass AttributeEvents(object):\n    \"\"\"A class to handle attribute events.\n    This class is used to handle attribute events.  It is\n", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "       self.runtime.add_block_as_child_node(self, xml_object)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       for key, change in data_model_changes.items():\n            self.update_filtered_data(to_global(key))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\treturn true;\n\t\t}\n\t}\n\t[XmlType(\"ldtoken\")]\n\tpublic sealed class Ldtoken : Instruction\n\t{\n\t\t[XmlAttribute(\"type\")]\n\t\tpublic string type;\n\t\tinternal override void Generate(CodeGenContext", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(48, 16);\n\t\t\tthis.objYLabel.TabIndex = 14;\n\t\t\tthis.objYLabel.Text = \"Y:\";\n\t\t\t// \n", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"etrepum\")\n        self.assertEqual(set(c.files), set([\"twisted/web/woven/form.py\",\n                                   \"twisted", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new MultiValuedMap<>(vocabulary.getIdentifier());\n            this.data.put(ID_KEY, termData);\n        }\n        for (Map.Entry<String, String> entry : csvData.", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\tif(isPassiveFlower()) {\n\t\tif(player.isSneaking()) {\n\t\t\tif(isPassiveFlower()) {\n\t\t\t\tif(player.isSneaking()) {\n\t\t\t\t\tif(player.isSneaking", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           for (Node n : component.getNeighbors()) {\n                intrinsicCohesion += this.getIntrinsicCohesion(n, c);\n            }\n        }\n        this.memorizedcohesion.put(c, intrinsicCohes", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "   if are_equal:\n        logger.info(\"OK\")\n        return True\n    else:\n        logger.info(\"ERROR: Document %s: Expected comment %s and got %s\" % (str(docid), str(v2), str(v1)))\n        return False", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tif(tvComputerCluster.Nodes.Count>0)\n\t\t\t{\n\t\t\t\ttvComputerCluster.Nodes[0].Nodes.Clear();\n\t\t\t}\n\t\t\tif(tvComputerCluster.Nodes.Count>1)\n", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   exDateList.addAll(exceptionDates);\n    return new ExDate(exDateList);\n  }\n  /**\n   * Generates the dates at which it exist some exceptions in the periodicity of the specified event.\n   * @param event the detail on the event for which it", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.Bind( sourceComponent, sourceProperty, sourceEvent, targetComponent, targetProperty, targetEvent );\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hide", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class,\n                    containerName, this);\n            List<String> toAdd = new ArrayList<String>();\n            for (String port : jsonData.split(\",\")) {\n               ", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tpublic final class ImagePath implements java.io.Serializable\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\n\t\t", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "   new_la = la_obj\n\n\nA: I think the problem is that you are trying to replace the predicate URI with the new URI, but you are not updating the LinkAnnotation object. \nYou need to update the LinkAnnotation object, and then save it.\n\n\nA: I think", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .borderoptions= \")\n                .Append(StringUtil.ToHexString(BorderOptions)).Append(\"\\n\");\n            buffer.Append(\"          .borderleft  = \")\n                .Append(StringUtil.ToHexString(BorderLeft)).Append(\"\\n\");\n", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// This range contains the bulk of the CJK set.\n\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = ((int) (cjkToJis [value])) |\n\t\t\t\t\t\t", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "   src1 = env.A[b]\n    off1 = env.cst(off1.int(-1),10)\n    src2 = env.cst(off2.int(-1),10)\n    obj.operands = [src1, src2, dst", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.openStream();\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\t\n\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\tpropertiesMap", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE || this == SPECTATOR;\n        }\n        /**\n         * Returns true if this is the SPECTATOR game type\n         */\n        public boolean isSpectator()\n        {\n            return this == SPECTATOR;", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (WellKnownSidType.LocalSystemSid, null);\n\t\t\tSecurityIdentifier groupSid = new SecurityIdentifier (WellKnownSidType.BuiltinAdministratorsSid, null);\n\t\t\tDiscret", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "   def __process(self, results):\n        req_data = []\n        req_data.append(urlencode({\n            \"duration\": str(int(round(result.length))),\n            \"fingerprint\": result.chromaprint,\n        }))\n        urld", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       if (PhotonNetwork.serverSettingsAssetFile != null)\n        {\n            PhotonNetwork.serverSettingsAssetFile = AssetDatabase.GetAssetPath(PhotonNetwork.serverSettingsAssetFile);\n        }\n        if (PhotonNetwork.serverSettingsAssetFile != null", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       fullNewMessageBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Intent intent = new Intent(getActivity(), DraftEditor.class);\n                intent.putExtra(\"task\", \"new_answer\");\n                intent.put", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           return psit_G\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       Response response = utkastController.createUtkast(intygsTyp, buildRequest(\"luse\"));\n        assertEquals(OK.getStatusCode(), response.getStatus());\n    }\n    @Test\n    public void testCreateUtkastEfternamnFailsFor", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach (ILNode child in block.Body) {\n\t\t\t\t\tif (child is ILBlock) {\n\t\t\t\t\t\t// Flatten the child\n\t\t\t\t\t\tFlattenBasicBlocks(child);\n\t\t\t\t\t} else", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    IsRagdoll = ragdoll;\n\t    if (IsRagdoll) {\n\t\t//don't do it again if we're already a ragdoll\n", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def fix_region_dim(self, regions):\n        extruded = (self.layer_type == LayerType.stratum)\n        for reg_list in  [self.polygon_region_ids, self.segment_region_ids, self.node_region_ids", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff] = (byte)num;\n        out[outOff + 1] = (byte)(num >> 8);\n        out[outOff + 2] = (byte)(num >> 16);\n        out[outOff + 3] = (byte)(", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new SimpleRegexValueGetter( objectVariables ) );\n        }\n        public FilteredPatternFinder( Iterable<PatternMatch> source,\n            final Map<String, PatternNode> objectVariables,\n            final FilterValueGetter valueGetter )\n       ", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   return slice_json\ndef transform_values_holder_xml_json_to_json(value, format = 'date'):\n    if value:\n        if format == 'date':\n            return value[0]\n        elif format == 'integer':\n            return int(value[0])", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           frameToClose = (InternalFrame)buttons.get(btn);\n            try {\n              frameToClose.closeFrame();\n              frameToClose = null;\n            }\n            catch (PropertyVetoException ex) {\n            }\n          }\n        }\n      });\n   ", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "   elif sys.argv[1] == '--get':\n        print getIDList()\nNext line of code:\n    elif sys.argv[1] == '--create':\n        print createFunction('randLC', \"\"\"\nargs: None\nreturns:\n    filename, redshift, data", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x+x, dpi), Util.px2mm(offset.y+y, dpi));\n    for (int y = Math.max(cy-toolDiameter/2, 0); y < Math.min(cy", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table3.TABLE_NAME, new String[] {Db.Table3._ID}, new String[] {String.valueOf(newId)}, null);\n                    //Update budget items\n                    db.update(Db.Table4.TABLE_NAME, new String[]", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               m_ptr = IntPtr.Zero;\n            }\n        }\n        #endregion\n    }\n    internal sealed class WINTRUST_FILE_INFO : IEquatable<WINTRUST_FILE_INFO>\n    {\n        public WINTRUST_FILE_INFO", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tvar unit = self.World.Map.Rules.Actors[itemName];\n\t\t\tif (unit == null || !unit.HasTraitInfo<BuildableInfo>())\n\t\t\t\treturn;\n\t\t\tvar buildable = unit.TraitInfo<", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "       self.infoLabel.setText(infoText)\n        \n    def showDir(self):\n        self.showCurrentDirInfo()\n        self.showDirTreeview(self.activeTreeview)\n        \n    def showDirTreeview(self, treeview):\n        self.show", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re.sub(re_m4, lambda m: self.subst(m.group(1)), code)\n        self.outputs[0].write(code)\n\n\n@feature('*')\ndef process_source(self):\n    \"\"\"\n    Process each element in", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer:\")\n        return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx + reactorExtent - 2 ] + chemical[ 0 ][ idx + reactorExtent - 1 ] );\n\t\t\t\t\t\t\t\t\tdelta[ 1 ][ idx ]", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               columnTypes.add(typeManager.nextTimestampAdapter().of(dateFormatFactory.get(pattern), timestampLocale));\n                break;\n            default:\n                throw JsonException.$(localePosition, \"Invalid type\");\n        }\n    }\n    private void createImportedType(int", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\treturn true;\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Configura os parametros do metodo de Alterar\n\t\t/// </summary>\n\t\t/// <param name=\"qs\">Objeto da Store Procedure</param>\n\t", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object DeepCopy(object value, ISessionImplementor session)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object DeepCopy(object value, I", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "   self.ntp_auth_conf = self.get_ntp_auth_exist_config()\n    self.ntp_auth_conf = self.get_ntp_auth_enable()\n    self.ntp_auth_conf = self.get_ntp_auth_", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "       self.store.update_item(component.location, editing_user)\n        with check_mongo_calls(max_find, max_send):\n            self.assertGreater(datetime.datetime.now(UTC), after_create)\n            self.assertEqual(self.", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        digest.update((byte) 0);\n        digest.update((byte) 0);\n        updateWith(ch);\n    }\n    public void startElement(String namespaceURI, String local", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict)\ndef mklogical(data):\n    return aetypes.Logical(data)\ndef mkalias(data):\n    return aetypes.Alias(data)\ndef mktype(data):\n    return aetypes.Type(", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           return ResolveType(api, controllerName, actionName, parameterNames, SampleDirection.Request, out formatters);\n        }\n        /// <summary>\n        /// Resolves the type of the action parameter or return value when <see cref=\"HttpRequestMessage\"/> or <see cref=\"Http", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "               value = entry.get_active_text()\n            self.on_edit_cell(record, column.name, value, callback=callback)\n            return\n        elif event.keyval == gtk.keysyms.Delete:\n            if isinstance(entry, gtk.Entry", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "       f.next()\n        except StopIteration:\n            pass\n        else:\n            raise ValueError(\"File %s contains blank lines\" % path)\n    if f:\n        f.close()\n    if not os.path.exists(path):\n        module.fail_json", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.IUnknown)] object pUnkState\n            );\n        [PreserveSig]\n        int QueueEventParamVar(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LPStruct", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       return userDirectoryService.addPrincipalToPrincipal( directedAclKeys );\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = DELETE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void deletePr", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element.findall('.'):\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_extra_text(self, element):\n        \"\"\"Verify the extra text of an element.\n        This verifies the text of an", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   return clone\n\n\ndef _get_elements_by_tagName_helper(doc, tagName, namespaceURI, localName):\n    \"\"\"\n    Return a list of elements with the given tag name.\n    \"\"\"\n    if namespaceURI:\n        return doc.getElementsByTagNameNS(namespace", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(expectedType, endOffset))\n\t\t\t\tkeyLocator.setKeyLocator(decoder.readBlobTlv(expectedType, endOffset));\n\t\t\telse\n\t\t\t\tthrow new Error(\"Expected \" +", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < myWeap", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        action.setColorSelection( m_colorSelection.getValue( m_colorSelection\n            .getSelectedIndex() ) );\n        action.setColorPreview( m_colorPreview.getUrl() );\n        action.setColorPreview( m", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "   raise RuntimeError(\"Error downloading file: %s\" % r.data.decode(\"utf-8\"))\n    return r.data.decode(\"utf-8\")\ndef download_file_json(socket_path, url, progress=True):\n    \"\"\"Download a file, saving it to the", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\tif (response.MergeOrderResponse.Success)\n\t\t\t\t{\n\t\t\t\t\tmergedOrder = response.Mer", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   return [coeff * met.weight for met, coeff in reaction.metabolites.items()]\ndef _reaction_coefficients(reaction: \"Reaction\") -> List[float]:\n    \"\"\"Return the metabolite coefficients.\n    Parameters\n    ----------", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "   return (\n        super(UnitManager, self).get_queryset().select_related(\n            'store', 'submitted_by', 'commented_by', 'reviewed_by',\n        )\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SingleTrainingAttendance',\n            fields=[\n                ('id", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "   self.ipdests[dstip] = True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   m_RecentItems.add(item);\n    updateMenu();\n  }\n  /**\n   * Removes the item from the internal list.\n   *\n   * @param item\tthe item to remove from the list\n   */\n  public synchronized void removeRecentItem", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.Follower.IsInRange(target) && src.Follower.IsInRange(src))\n                return false;\n            return true;\n        }\n        public static bool CanDetect(Mobile src, Mobile target)\n        {\n            if (src.", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       if (halfTradePeriodDate == null && takeOfferDate != null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;\n   ", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\ta = a == null ? LeadingAny(p.down) : a;\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void Complete(Node p) {\n\t\tif (p.typ == Node.any) {\n\t\t\tp.", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)((address & 0x000000ff)  >>  0);\n\t\t\tmWiimoteState.ReadReport(buff);\n\t\t\treturn buff;\n\t\t}\n\t\t/// <summary>\n", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis(order, caseInsensitive);\n\t\t}\n\t\tpublic int compare(MskJointVo o1, MskJointVo o2)\n\t\t{\n\t\t\tif (caseInsensitive)\n\t\t\t{\n\t\t\t", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tEmail.Send( message );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           _freeList[0].SetNext(0);\n            _freeList[0].SetPrev(0);\n            _freeList[0].SetNu(0);\n            _freeList[0].Address = 0;\n            _freeList[0].Stamp = ", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       view = navigate_to(self, 'Create')\n        view.toolbar.configuration.item_select('Create a new Compute Rate', handle_alert=True)\n        view.fill_with(rate, on_change=view.save_button, no_change=view.", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tIntPtr srcData = shadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, srcData, length );\n\t\t\t\tshadowBuffer.", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\t\tself.list.append(getConfigListEntry(_(\"NIM\"), self.satfinder_scan_nims))\n\t\telif len(nimmanager.nim_slots) > 1:\n\t\t\tself.satfinder_scan_nims.value", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                tcpAcceptFilters.add(new tcp_address_mask_t(filterStr));\n            }\n            return;\n        default:\n            throw new IllegalArgumentException(\"unknown option \" + optname);\n        }\n    }\n\n    public void setOptions(", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               if (filter == 0)\n                    return fout.ToArray();\n                else\n                    return curr;\n            }\n            return fout.ToArray();\n        }\n        \n        protected internal PdfObject ReadPRObject() {\n            PdfObject obj = ReadPRO", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface(':1.23'))\n        s.set_interface", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "   output += \"image basis \\n\"\n    for vect in amap.get_image().get_basis():\n        output += str(e2.element_from_vector(vect, level, \n                                                 position, \n                                                 self.options)) + \"\\", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "               \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"optional_string\\\".\",\n                \"optional_string: 123\");\n            AssertParseError(\n                \"1:1: Message type \\\"protobuf", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void clear() {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tqueueOperation( new Clear() );\n\t\t}\n\t\telse {\n\t\t\tmap.clear();\n\t", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member returning an item\n\t\t/// </summary>\n\t\t/// <param", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "   return action_message\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow row = form.grdResults().getRows().newRow();\n\t\trow.setColTestName(orderInvestigationLiteVo.getInvestigation().getInvestigationIndex().getName());\n\t\trow.setColTestResult(orderInvestig", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt.x = pt.x + sw.ClientRectangle.Width;\n                pt.y = pt.y + sw.ClientRectangle.Height;\n                return pt;\n            }\n        }\n        /// <summary>\n        /// The state of this item.\n        /// </", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       return(maker.new_tab(self, cwd, profile))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( \"_\"+Guid.NewGuid().ToString( \"N\" ), managedType, marshalAttribute, arraySize ) );\n                }\n                else {\n                    string typeFragment = nametypeFragments[0];\n                    string", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t\t}\n\t\t}\n\t\tpublic bool IsByRef {\n\t\t\tget {\nNext line of code:\n\t\t\t\treturn base_type !=", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"sender\"></param>\n        /// <param name=\"args\"></param>\n        /// <returns", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.context = context\n\n    def __getattr__(self, name):\n        return getattr(self.context, name)\n\n    def __setattr__(self, name, value):\n        setattr(self.context, name, value)\n\n    def __delattr__(", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.vbox5.Add (this.hbox3);\n\t\t\tglobal::Gtk.Box.BoxChild w28 = ((global::Gtk.Box.BoxChild)(this.vbox5 [this.hbox3]));\n\t\t\tw28.Position", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "               notebooks[\"board\"].page_num(key2gmwidg[child].boardvbox) = new_num\n                notebooks[\"board\"].set_tab_reorderable(True)\n                notebooks[\"board\"].set_tab_reorderable(False)\n", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Move-Tab-to-left-reverse\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo{\" +\n\t\t\t\t\"persistenceUnitName='\" + this.persistenceUnitName + '\\'' +\n\t\t\t\t'}';\n\t}\n}\n\n\nA: I'm not sure if this is the best way to do it, but here", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n  }\n  \n  protected void setFileReadOnly(boolean readOnly)\n  {\n    this.readOnly = readOnly;\n  }\n  \n  protected boolean isFileWriteOnly()\n  {\n    return false;\n  }\n  \n  protected", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.CausesValidation = true;\n\t\t\tthis.butAttach.Cursor = System.Windows.Forms.Cursors.Hand;\n\t\t\tthis.butAttach.DisabledIcon = null;\n\t\t\tthis.butAttach", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       return sb.toString();\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\t// Test with a key that is larger than block-size.\n\t\tpublic void R", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(m_d) {\n\t        case option_1:\n\t        case option_2:\n\t            sum += 4;\n\t            break;\n\t        case option_3:\n\t            sum += 4;\n\t            break;\n\t        default:\n", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      else\n        return java.GetValue(\"JavaHome\").ToString();\n    }\n    private static String GetJavaHome(String key, String defaultValue)\n    {\n      RegistryKey regKey\n        = Registry.LocalMachine.OpenSubKey(key);\n", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "   return [l, ]\n    def find_job(self, name, job=None):\n        # attempt to find job by 'Ansible:' header comment\n        comment = None\n        for l in self.lines:\n            if comment is not None:\n                if comment == name:\n", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "   modifier.vertex_group = modifier_json['vertex_group']\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           for(int i = 0; i < totalBuckets; ++i)\n            {\n                double bucketRank = mScoreRankBuckets.get(i);\n                if(rankCounts[i] == 0)\n                {\n                    double fraction = min", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertTrue(neighbors.contains(1));\n        assertTrue(neighbors.", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   self.parser(self.choice, cap=self.cap)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(63, 138);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);\n", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.Foreign", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               throw SDOException.referencedPropertyNotFound(targetNamespace, sdoTypeName);\n            }\n        }\n        return alreadyProcessed;\n    }\n    private void processIncludes(java.util.List includes) {\n        if ((includes == null) || (includes.size()", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate2', 'manager_id': False})\n    def holidays_validate_notificate(self, cr", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets and sets the delegate that checks whether the user wants to delete selected rows\n        /// </summary>\n        public CheckUserConfirmsDeletionDelegate CheckUserConfirmsDeletionDelegate", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return mixerLine.szName;\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = (ims.core.admin.domain.objects.CareContext) valueObject.getCareContext().getDomainObject();\n\t\t}\n\t\telse \n\t\t{\n\t\t\tvalue10 = null;\n\t\t}\n\t\tif", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "   def notify_darwin(title, text):\n    try:\n        import dbus\n        bus = dbus.SessionBus()\n        notify_obj = bus.get_object(\"org.freedesktop.Notifications\", \"/org/freedesktop/Notifications\")\n        method =", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tdouble pnEst = predictPositives ? p : estP;\n\t\t\tif (function.equals(WRACC)) {\n\t\t\t\tscore = cov * (pnRel / (p + n) - p", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashes(gitStash.Stashes);\n            }\n        }\n        private void Stashed_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            if (Stashed.SelectedIndex == 0)\n            {\n                Stashed.ComboBox", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm2_index).out_address != 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       return this.match((AuthScope)o);\n        return false;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode() {\n        return this.match(this).hashCode();\n   ", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}\n\nA", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\ts += \" \";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static String erstelleStringAusMehrerenSeriennummern(\n\t\t\tList<SeriennrChargennrM", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGenericType)value;\n\t\t\t\t\tbreak;\n\t\t\t", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "   if args.output_file is not None:\n        log.msg('Writing encrypted archive to: {}'.format(args.output_file))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.putb([134, ['CRC7: 0x%01x' % crc]])\n        # TODO: Decode all bits.\n        ### if len(self.read_buf) < 16:\n        if len(self.read_buf)", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "       return true;\n    }\n    return true;\n  }\n  private boolean r_R1() {\n    int among_var;\n    int v_1;\n    // (, line 73\n    // [, line 74\n    slice_from(\"i\");", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               if (cls != null)\n                {\n                    o = cls.newInstance();\n                    if (o instanceof SpyPlugin)\n                    {\n                        ((SpyPlugin)o).messageReceived(lcm, channel, dins);\n                    }\n                }\n", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   def _get_key_usage(self):\n        try:\n            current_key_usage = self.cert.extensions.get_extension_for_class(x509.KeyUsage)\n            current_key_usage = current_key_usage.value\n            key_usage", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tif (i != s.end()) {\n\t\t\t\t\tstill_there = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (still_there) {\n\t\t\t\t(*i)();\n\t\t\t}\n\t", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   # The following **must** hold according to entry condition about \n    # front and back sequence.)\n    assert X.end   <= 0x110000\n    assert X.end   > X.begin\n    result.append(Interval(X.begin, X.end", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\t}\n\t\t}\n\t}\n\tvoid Get() {\n\t\tif (la.kind == 1) {\n\t\t\tGet();\n\t\t\tif (la.kind == 1) {\n\t\t\t\tGet();\n\t\t\t}\n\t\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc_list.append(edi_doc)\n        return edi_doc_list\n    def edi_import(self, cr, uid, edi_document, context=None):\n        \"\"\"Overridden to import sale order line fields with the expected names\n          ", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS + \"sse.local.\");\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               nameMap.put(name,\n                               permissions = new ArrayList<PermissionEntry>());\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    private void assertEquals(AccessStatus expected,\n                                  AccessStatus actual)\n   ", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "       # This is a test, not a production code.\n        # It is not necessary to have a device.\n        # It is not necessary to have a device.\n        # It is not necessary to have a device.\n        # It is not necessary to have a device.\n        # It is", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   d = Device(deviceToken)\n    d.login()\n    d.explore(1, 1, 1)\n    d.fairyLose(1, 1)\n    d.fairyWin(1, 1)\n    d.fairy", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "   if (rv['alphaCoefficients'][0] != 0):\n        rv['alphaReference']['frequency'] = rv['alphaCoefficients'][0]\n        rv['alphaReference']['fluxDensity'] = rv['alphaCoefficients", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           m_ItemID = (int)m_Keys.Count;\n        }\n    }\n}\n\nA: I'm not sure if this is the best way to do it, but it works.\npublic class KeyRing : Item, IResource, IQuality\n{\n   ", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> iterator = devices.iterator(); iterator.hasNext();) {\n            String uinumber = iterator.next();\n            String name = devices.get(uinumber);\n            String recordPathEntry = Registry.getStringValue(registryBranchSingle[0],", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   return jobs.get(lastSeenVersion).run();\n\n    }\n  }\n\n  public static void setLastSeenVersion(Context context, int lastSeenVersion) {\n    TextSecurePreferences.setAppMigrationVersion(context, lastSeenVersion);\n    Version", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length > 1) {\n        Entry entry = new Entry(split[1].split(\"\\\\|\"), split[0], ignoreCase);\n        entries.add(entry);\n      }\n    }\n    return entries;\n  }\n}\n\n\n\n\n\n", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           if os.path.isfile(os.path.join(source_dir, sub_path, n)) and os.access(os.path.join(source_dir, sub_path, n), os.X_OK):\n                return n\n        return None\n\n\ndef Find", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   >>> from mapnik import Python, Layer\n    >>> datasource = Python('PythonDataSource')\n    >>> lyr = Layer('Python Layer')\n    >>> lyr.datasource = datasource\n    \"\"\"\n    keywords['type'] = 'python'\n    return CreateDatasource(key", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "   @property\n    def destination(self):\n        if self.want.ip is None and self.want.port is None:\n            return None\n        return self._values['destination']\nclass Difference(Difference):\n    def __init__(self, want, have=None", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   add_button = Button(**{\"ng-click\": \"vm.addKeyValue()\"})\n    variables_table = Table(\n        \".//div[@id='inputs_div']//table\",\n        column_widgets={\"Actions\": ActionsCell()},\n        row_id", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"ActionFactory: Unable to find action class: \" + className);\n        }\n        return result;\n    }\n    public void initialize() throws Exception {\n        // initialize the db manager\n        setDbManager();\n        // initialize the action factory\n        setActionFactory();\n", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n        self._test_", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "   return embedManifestDllAction(target, source, env)\ndef embedManifestExeCheck(target, source, env):\n    \"\"\"Function run by embedManifestExeCheckAction to check for existence of manifest\n    and other conditions, and embed the manifest by calling embedManifestEx", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           execute(errorStatus);\n        } catch (CoreException e) {\n            errorStatus[0] = recordError(errorStatus, e);\n        }\n        if (errorStatus[0] != null) {\n            MessageDialog.openError(shell, getProblemsTitle(), errorStatus", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\treturn super.init(smi, sdi);\n\t}\n\t\n\tpublic void dispose(StepMetaInterface smi, StepDataInterface sdi)\n\t{\n\t\tmeta=(AggregateRowsMeta)smi;\n\t\tdata=(AggregateRowsData)sd", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   assert f('..12:00', last) == (d(2014,1,31, 19,47), d(2014,1,31, 19,47))\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           if (samaxtime.Contains(\"s\") || samaxtime.Contains(\"m\") || samaxtime.Contains(\"h\"))\n                samaxime = samaxtime.Remove(samaxtime.Length - 1);\n            double dmaxxime = Utility", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "   session = self._get_session()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       assertThat(rc, is(true));\n        assertThat(pub.call(), is(true));\n        assertThat(sub.call(), is(true));\n    }\n}\n\n\nA: I'm not sure what you're trying to do here. \n\nYou'", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator()\n                    .getOnSendRequestAfterParameters()\n                    .contains(destination)) {\n                this.owner.getDecorator().onSendRequestAfter(r);\n            }\n            this.owner.getDecorator().on", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\treturn (value + 0x7F) / 0x80;\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "   self.fm.thisdir.vcs.add(one_file.path)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\tpublic void CreateInstance_StringString_String ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\", \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       repo = self._setup(da, Action.ACCEPTED, None)\n        self.assertEqual(repo.changesets.count(), 2)\n        avs = AppVersion.objects.all()\n        flagdata = flags4appversions(avs)\n        self.assert", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.send_message(PYMUMBLE_MSG_TYPES_MODUSERSTATE, userstate)\n            cmd.response = True\n            self.commands.answer(cmd)\n        elif cmd.cmd == PYMUMBLE_CMD_CHANN", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new PlayerGroupLeaderChangedEvent(group, player));\n        }\n    }\n    public static void changeLeader(PlayerGroup group, Player player) {", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "       self.update(self.colsize, outfile, formatter, hidden_c, squash_c)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column.quantity_renderer.set_property(\"text\", \"22\")\n        column._update_cell_based_on_data(None, column.quantity_renderer, tree_model, tree_iter)\n        self.assertEqual(\"22\", column.quantity_renderer", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof TagImpl) {\n\t\t((TagImpl) parent).doStartTag();\n\t    }\n\t} while (parent != null);\n\treturn EVAL_BODY_CONTENT;\n    }\n    /**\n     * set the value fontsize Font size", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               Dialog.Load(this);\n            }\n            catch (Exception ex) {\n                Log.Error(ex);\n            }\n        }\n        public void ParseStatus(InventoryEntry invEntry, string status)\n        {\n            XmlNodeList nl = element.SelectSingleNode(\"", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor ( int i = 0; i < m_", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add((ims.careuk.vo.beans.ChangeOfServiceVoBean)beans[i]);\n\t\t}\n\t\treturn coll;\n\t}\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           Version.VERSIONS\n        };\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tp.SetByteArray(Argon2Kdf.ParamExpc, pbExpc);\n\t\t\tp.SetUInt64(Argon2Kdf.ParamIterations, 3);\n\t\t\tp.SetUInt32(Argon2K", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\tif(cost > 0) {\n\t\t\tif(remove) {\n\t\t\t\tif(stack.getItem() instanceof IManaItem) {\n\t\t\t\t\tIManaItem manaItemSlot = (IManaItem) stack.getItem();\n\t\t", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "from django.conf import settings\n\n# Local Variables:\n# mode: python\n# indent-tabs-mode: nil\n# End:\n# vim:sw=4:ts=4:expandtab\n# vi:sw=4:ts=4:expandtab\n\n\n\n\n", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\"but Lights has {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       return true;\n    }\n    @Override\n    public int hashCode() {\n        final int PRIME = 31;\n        int result = super.hashCode();\n        result = PRIME * result + ((this.state == null) ? 0 : this.state", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.mRequest = requestFromCLCC(p.readInt());\n            dc.mResult = responseFromCLCC(p.readInt());\n            response.add(dc);\n        }\n        return response;\n    }\n    @Override\n    protected Object\n    response", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isApplication()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType().", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n        {\n            newVertices[x + ySizeP * x] = newVertices[x + ySizeP * x] = new Vector3(x * xPixelsPerTile, y * y", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tresult = client.add(testInt1);\n\t\t\t\n\t\t\tif (result == testInt1)\n\t\t\t{\n\t\t\t\tLog.i(TAG, \"doConnectionTest() returned \" + result + \" as expected\");\n\t\t\t\treturn", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn null;\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\nNext line of code:\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpublic void setBlock", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(name);\n        }\n        else\n            try {\n                out.writeBoolean(true);\n                out.writeObject(found);\n            }\n            catch (IOException e) {\n                logging2(e.toString());", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                   25,\n                    0,\n                    0, 0,\n                    pixel_x, pixel_y,\n                    Machine.visible_area, TRANSPARENCY_NONE, 0);\n                pixel_x += 6;\n            }\n", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                   .To3D()\n                                    .Distance(spell.From.To2D()) <= spell.Range &&\n                                    spell.Width\n                                    )\n                                {\n                                    result.Add(minion);\n                                }\n                            }\n", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       if (graph.isDefCollider(x, y, graph)) {\n            return true;\n        }\n        return false;\n    }\n    public static boolean existsInducingPathInto(Node x, Node y, Graph dag) {\n        if (x.getNodeType", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   var child = pop[i];\n                    if (child is PlaceBase)\n                        plcs.Push(child);\n                    else if (child.Name == Name)\n                        return child;\n                }\n            }\n            return null;\n        }\n        /// <", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.getFileId() == null) {\n            if (other.getFileId() != null) {\n                return false;\n            }\n        } else if (!this.getFileId().equals(other.getFileId())) {\n            return false;\n        }\n", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (m_Item.Map == mobiles[i].Map && mobiles[i].CanBeHarmful(from, false))\n                        {\n                            from.DoHarmful(from, mobiles[i], m_Item.MinDamage, m_Item", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(user, msg);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void MessageTo(PlayerMobile user, PlayerMobile to, string text)\n\t\t{\n\t\t\tInternalMessage(to, text);\n\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sUserId) {\n    return mock.getAvailCompoIds(sUserId);\n  }\n", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           final File selected = new File((String) mListView.getItemAtPosition(key));\n                            if (!selected.isDirectory()) {\n                                uris.add(Uri.fromFile(selected));\n                            }\n                        }\n                    }\n                    Intent intent =", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "       this.j.writeLock().lock();\n        try {\n            this.i.clear();\n        } finally {\n            this.j.writeLock().unlock();\n        }\n    }\n    public void close(PacketListener packetlistener) {\n        this.a(pack", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               z_value = z_dict[z_key][kk]\n                z_err_value = z_dict[z_key][kk+1]\n                z_value = float(z_value)\n                z_err_value = float(z_err_value)\n               ", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return getPluralizedIdentityDescription(context, recipients, resourceOne, resourceTwo, resourceMany);\n    }\n    return getPluralizedIdentityDescription(context, recipients, resourceOne, resourceTwo, resourceMany);\n  }\n  private static @Nullable String getPluralized", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "       env[\"PATH\"] = path.join(env[\"PATH\"], *extra_path)\n        env[\"LD_LIBRARY_PATH\"] = path.join(env[\"LD_LIBRARY_PATH\"], *extra_lib)\n        env[\"RUSTC\"] = path.join(self", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in iteritems(type_paths):\n                for test in tests:\n                    yield test\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compiledScript != null) {\n            compiledScript.setScript(null);\n            compiledScript = null;\n        }\n    }\n    private void trustedCompileAndCache(PrintStream outStream) throws Throwable {\n        AccessController.doPrivileged(", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override setting a timeout for a wrapped client adapter\n        /// </summary>\n        /// <param name=\"timeout\">The timeout in milliseconds</param>\n        protected virtual void ClientSetTimeout(int timeout", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "   transformed_grad = np.asarray(transformed_grad)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (caseInsensitive == true)\n\t\t{\n\t\t\treturn this.id.compareTo(((OrderInvestigationForStatusChangeVo)obj).id);\n\t\t}\n\t\treturn this.id.compareTo(((OrderInvestigationForStatusChange", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.size(), 2);\n    }\n    @Test(dependsOnMethods = \"shouldFindStacksWithSpecifiedTags\")\n    public void shouldFindStacksWithSpecifiedTagsAndSortedByName() throws Exception {\n        stacks[0].getTags().", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter parameter = new Parameter(CRAWL_DEPTH_KEY, depth);\n        parameter.setParameterFamily(pf);\n        crawlParameters.add(parameter);\n        //EXCLUSION REGEXP\n        parameter = new Parameter(CRAWL_EXCL", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tif (candidate.Name == pattern.Name)\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t\tunmatchedAttrs = VList<LNode>.Empty;\n\t\t\treturn false;\n\t\t}", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   if (colisionList.Any())\n                    {\n                        extendedWillHit++;\n                        extendedFarmLocation = colisionList.First().To2D();\n                    }\n                }\n                if (extendedWillHit >= q.UseOnLaneClear)", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.addContextMenu(contextMenu);\n\t}\n\n\tpublic ims.pci.vo.GpContractVoCollection listGpContractVoCollection()\n\t{\n\t\treturn super.listGpContractVoCollection();\n\t}\n\tpublic void set", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   if pattern in frozen_output:\n        return True\n    else:\n        return False\n\n\ndef package_in_frozen_output(package_name):\n    \"\"\"Is this package in the output of 'freeze'?\"\"\"\n    # Look for either:\n    #", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'name': \"Item\"\n        })\n        f = Form(self.env['test_testing_utilities.e'])\n        f.m2o.add(r)\n        f.m2o.remove(index=0)\n        f.m2o.remove(", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert simplify(Sum(x, (x, a, b)) + Sum(x, (x, b, c))) == \\\n        Sum(x, (x, a, b)) + Sum(x, (x, b, c))\n    assert simplify(Sum(x, (x", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tUnityEngine.WWW self=(UnityEngine.WWW)checkSelf(l);\n\t\t\tSystem.String a1;\n\t\t\tcheckType(l,2,out a1);\n\t\t\tvar ret=self.UnEscapeURL(a", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this.InitializeAdd(action, null, -1);\n            }\n            else\n            {\n                this.InitializeAddOrRemove(action, null, -1);\n            }\n        }\n        private void InitializeMoveOrReplace(NotifyCollectionChangedAction action, IList new", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            writer.close();\n            streamWriter.close();\n            objectToXMLDocumentTest(result);\n        }\n    }\n    public void testObjectToXMLStreamWriter() throws Exception", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                case Param.Campus2:\n                    c.Campus2 = Token2Csv();\n                    break;\n                case Param.Campus3:\n                    c.Camp", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "\t\t\t\tif (ide.imageOffset != 0) {\n\t\t\t\t\tide.imageOffset = reader.ReadUInt32 ();\n\t\t\t\t\tide.imageOffset += iconDir.idOffset;\n\t\t\t\t}\n#endif\n\t\t\t\t", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               // add the JSR to the successor of the RET blocks found in the subroutine\n                addReference(JSR, l.position);\n            }\n            // add the subroutine to the successor of the RET blocks found in the subroutine\n            addToSubroutine(id,", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\t\tthis.lblPosition.setText(\"Position: \" + position.toString());\n\t\t\tthis.lblPosition.setBackground(position.getColor());\n\t\t\tthis.lblPosition.setForeground(position.getColor());\n\t\t}\n\t\t\n\t\tprivate", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       currChannelValue = self._getCurrentValue( driver, \"Channel\" )\n        print \"Check decrease frame...\"\n        print \"oldChannelValue=\", lastChannelValue, \"newChannelValue=\",currChannelValue\n        self.assertEqual( int(currChannelValue), int(lastChannelValue", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       self.transport._expect_packet(MSG_KEXGSS_COMPLETE,\n                                      MSG_KEXGSS_ERROR)\n        \"\"\"\n        :param `Message` m: The content of the SSH2_MSG_KEXGSS_COMPLETE message", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           tree.setSelectionRow(0);\n            tree.setSelectionRow(0);\n            tree.setSelectionRow(0);\n            tree.setSelectionRow(0);\n            tree.setSelectionRow(0);\n            tree.setSelectionRow(0);\n            tree.setSelection", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "   return result\n\"\"\"\n\n\nclass smart_salary_simulator_payslip(models.Model):\n    _inherit = 'hr.payslip'\n    _description = \"Simulated payslip\"\n    _name = \"smart_salary_simulator.", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "   dVdzdOm.append(dVdzdOm(zi, chiarr[i], BDarr[i], rho_crit_arr[i], cosmo_h, frac=200.0))\n\n    #dVdzdOm = np.array([", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = font.getSize();\n        d.height = font.getSize();\n        return d;\n    }\n    \n    /**\n     * Initialize the fig\n     */\n    private void initialize() {\n        setFillColor(FILL_COLOR); // in case", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       #print \"theta_res is \",theta_res\n        #print \"phi is \",phi\n        #print \"flag is \",flag\n        #print \"theta_res is \",theta_res\n        #print \"phi is \",phi\n        #print \"flag is \",flag\n        #print", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.IsVisible = !window.IsVisible;\n\t\t}\n\t\tprivate void OnConnectionChanged(bool isConnected)\n\t\t{\n\t\t\tShowOrHide(_securitiesWindow);\n\t\t\tShowOrHide(_ordersWindow);\n\t\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "   self.SetBinContent(i + 1, j + 1, value)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "       if (query.getWith() != null) {\n            contact.firstServerMsgId = query.getFirst();\n        }\n        if (query.getPagingOrder() == PagingOrder.NORMAL) {\n            queryMessageArchiveManagement(protocol, query);\n       ", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "       rgb2I = (0.333333, 0.333333, 0.333333, 0,\n                 0, 0, 0, 0,\n                 0, 0, 0, ", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tret.add(null);\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected void addLog24(Iso7816.Response rsp, ArrayList<byte[]> ret) {\n\t\tif (rsp.isOkey()) {\n\t", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   yield textHandler(UInt16(self, \"file_crc32\", \"CRC32 checksum over the compressed file\"), hexadecimal)\n    yield Enum(UInt8(self, \"compression_type\", \"Type of compression\"), COMPRESSION", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       for app in apps:\n            path = app[0]\n            if path.endswith('/'):\n                path = path[:-1]\n            if path.startswith('/'):\n                path = path[1:]\n            if path.endswith('/'):\n                path = path[:-", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tif sys.argv[ 1 ] == '-h' :\n\t\t\tprint \"Usage: %s -f <field> -s <setfield> -t <train>\" % sys.argv[ 0 ]\n\t\t\tsys.exit( 1 )\n\t\tif sys", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(chance) < res.BaseChance)\n                res = EnhanceResult.Success;\n        }\n    }\n}\n\nA: I'm not sure if this is the best way to do it, but it works.\npublic static void Check", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           return rdltypes.UserEnum(entry_name, entry_value, displayname, desc)\n        return None\n    #---------------------------------------------------------------------------\n    def parse_integer(self, s: str) -> int:\n        \"\"\"\n        Converts a string to an integer\n", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"Fatal Error:\\nUnable to locate coniguration file for FOG Service!\");\n                    this.Close();\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Fatal Error:\\nUnable to locate coniguration file for", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        ///", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(this.trianglePoint == -1)\n                {\n                    insideBeginEnd = true;\n                    this.trianglePoint = textureHash;\n                }\n                else if(this.trianglePoint == textureHash)\n                {\n                    insideBeginEnd = true;\n                   ", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   if header not in exposedHeaders:\n        response['Access-Control-Expose-Headers'] = exposedHeaders + '; ' + header\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    oldDrivers.Add(d);\n                }\n            }\n            return oldDrivers;\n        }\n        /// <summary>\n        /// Enqueue a driver to the idle pool\n        /// </summary>\n       ", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   var = [var]\n\n\ndef _validate_variable(var, new_var, name, input_list):\n    \"\"\"Validate variable.\n    Input_list is used to determine if variable is a list.\n    \"\"\"\n    if isinstance(var, (list, tuple)):", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "st.set(\"chosen\",QUEST.getChosen())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tif (num1 > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tempty = num1.ToString();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tempty = \"", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           Attributes = new AttributeCollection(this);\n        }\n        public void Dispose()\n        {\n            if (_sCurProgram == this)\n            {\n                _sCurProgram = null;\n            }\n        }\n        public void Use()\n        {\n            if (_s", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       for reaction in self.reactions:\n            reaction._model = self\n        # update awareness\n        for reaction in self.reactions:\n            reaction._model = self\n        self.metabolites.update(self.metabolites)\n        self.genes.update(", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(TumourGroupListVo vo : (TumourGroupListVo[])beans)\n\t\t\tcoll.add(vo);\n\t\treturn coll;\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tif(current.x>left){\n\t\t\t\t\tcurrent.x = left;\n\t\t\t\t}\n\t\t\t\tif(current.y>cy){\n\t\t\t\t\tcurrent.y = cy;\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       mListView.setLayoutAnimation(set);\n        mListView.setOnScrollListener(this);\n        mListView.setOnItemClickListener(this);\n        mListView.setOnItemLongClickListener(this);\n        mListView.setOnItemSelectedListener(this);\n        mListView.", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.PPartnerInterestKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.PPartnerInterestKey;\n                }\n            }\n            ARow.PPartnerInterestKey = HighestNumber +", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tint[] \t\tscoresHet \t= new int[length];\nNext line of code:\n\t\tint[] \t\tscoresNonSol \t= new int[length];\nNext line of code:\n\t\tint[] \t\tscoresNonHet ", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
{"pred": "\t\t\t\tif ( m_Participants[i].Gump != null )\n\t\t\t\t{\n\t\t\t\t\tm_Participants[i].Gump.Close();\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t}\n", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_v, e_u, **data.copy())\n\t\t\t\n\t\t\tif w < w_u:\n\t\t\t\tsolutions.append(A)\n\t\t\t\troots.remove(A)\n\t\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r')\n        a.seek(0)\n        a.seek(0, 1)\n        a.seek(-1, 1)\n        a.seek(1, 1)\n        a.seek", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "   if e.text == language:\n        return True\n        else:\n            return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t}\n\t\t\t}", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "       for a in self.answers:\n            ret += \"Answer: %s\\n\" % a\n        return ret\nclass _CategoryData(_QAData):\n    def ask_string(self):\n        return \"Category: %s\" % self.category\n    def hint_string", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob.", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                cert.print(s);\n            }\n        }\n    }\n}\n/*\n * ServerHelloDone ... SERVER --> CLIENT\n *\n * The server sends a message to the client indicating that it has\n * finished", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public synchronized static JESpace getSpace (String name) {\n        return (JESpace) spaceRegistrar.", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tbtnEnergizeAll.setRect(0, btnEnergize1.bottom() + 1, width, BTN_HEIGHT);\n\t\t\t\t\tbtnEnergizeAll.icon(new ItemSprite(ItemSpriteSheet", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       if environ['REQUEST_METHOD'] == 'POST':\n            return self.do_post(environ, start_response)\n        else:\n            start_response('405 Method not allowed', [('Content-Type', 'text/plain')])\n            return [\"Method not allowed", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       mark = \"setRepeated('%s')\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_id):\n        mark = \"unsetRepeated('%s');\"", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "           return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            return result\n\n\n\n\n\n\n\n\n", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsTrue (Object.ReferenceEquals (a, b), \"Union-DifferentIdentities\");\n\t\t}\n\t\t[Test]\n\t\tpublic void Union_DifferentPermissions ()\n\t\t{\n\t\t\tZoneIdentityPermission a = new ZoneIdentityPermission (", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       for trust_manager in self.trust_managers:\n            trust_manager.getAcceptedIssuers()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n    /**\n     * Prepares the domain admin page.\n     *\n     * @param request the request being serviced\n     * @param manager the mail", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "       self.__datastream_transport = await self.__datastream_address.connect()\n        self.__datastream_protocol = DataStreamProtocol(\n            self.__datastream_transport,\n            self.__datastream_address,\n            self.__datastream_settings,\n", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = Convert.ToInt32(store.GetValue (iter, columnJumpID));\n\t\t\t\t\tstore.SetValue (iter, columnJumpID, jumpID);\n\t\t\t\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues =\n            getArgValues(application, request, defaultMessages, locale, args);\n        return argValues;\n    }\n    /**\n     * Gets the message arguments based on the current <code>ValidatorAction</code>\n     * and <code>Field</code", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tpersons = loadFromFile();\n\t\t\t}\n\t\t}), FIRM_DATA(new ConfigFile<UUID, FirmData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic FirmData create(UUID id, ConfigurationSection conf)", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tgeneralNode.setPage(new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new IntegerFieldEditor(SHORT_REWIND,\n\t\t\t\t\t\t\"Short rewind", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               m_Owner.Caster.SendAsciiMessage(\"Target is not in line of sight\");\n            }\n        }\n\t}\n}\n\nCoded by: \nDarklord\n\nThis information was contributed by:\nDarklord\n\nThis information was contributed by:", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self._autoflush()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) {\n\t\t\tfinal String name = field.getShortName();\n\t\t\tif (name==null) { \n\t\t\t\tname = field.getClassName().toString();\n\t\t\t}\n\t\t\tfinal List<IField", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   r'/foo/*'`` in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if self.request.path.endswith(\"/\"):\n            if self.", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t\t\n\t\tprotected internal override void Render (HtmlTextWriter writer, bool startRendering)\n\t\t{\n\t\t\tif (startRendering) {\n\t\t\t\tbase.Render (writer, startRendering);", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   args = parser.parse_args()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetSkill(0) == SkillName.SkillGroup2)\n                        return GetNameForAttribute(SkillName.SkillGroup", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "   for platform in platforms:\n        # Get the build details for this platform\n        build_details = firefox_details.firefox_builds[platform]\n        # Get the build details for this locale\n        locale_details = firefox_details.firefox_builds[locale]\n        #", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.loadByLabel(label, projectID, issueTypeID);\n\t\t} else {\n\t\t\tstateBeansList = StatusBL.loadByLabel(label);", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (var argument in argumentSyntaxs) {\n                var argumentName = argument.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self.get_item_from_modulestore(self.split_test_usage_key, verify_is_draft=True)\n        # Change to second group configuration.\n        split_test = self._update_partition_id(1)\n        # Ver", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           if (fontSpecific) {\n                tmp.Add(GetToUnicode(parms));\n            }\n            else {\n                tmp.Add(GetCIDFontType2(parms));\n            }\n            writer.WriteFont(piref, tmp);\n        }\n", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcgn.depth = 0;\n\t\t\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<Bitmap>(callable);\n        task.addListener(new FutureTaskListener<Bitmap>() {\n          @Override public void onSuccess(Bitmap result) {\n            Util.runOnMain(new Runnable() {\n              @Override public void run() {\n", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n                }", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   @property\n    def is_displayed(self):\n        return (\n            self.in_cloud_instance and\n            match_page(summary='Select Policy Profiles') and\n            sel.is_displayed(resource_locator.format(self.context['object'].name))", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp,\n\t\t\tLabanSequenceVector sequences", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               base.Render(writer);\n            }\n        }\n        protected override void RenderContents(HtmlTextWriter writer)\n        {\n            if (!DesignMode)\n            {\n                base.RenderContents(writer);\n            }\n        }\n        protected override void RenderAttributes(HtmlText", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return \"Effect{\" +\n            \"probability=\" + probability +\n            \", scopes=\" + scopes +\n            '}';\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_search(t, {'itype': 'fqdn', 'groups': 'everyone'})\n    i = json.loads(i)\n    i = [i['_source'] for i in i['hits']['hits']]\n", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       person = Person.objects[0].select_related()\n        organization = Organization.objects.first()\n        self.assertEqual(person._get_changed_fields(),\n                         ['owns.0'])\n        self.assertEqual(person._delta(),\n                         ({'own", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   self._plot_waveform_line(ind=ind if ind else 0, ref_ind=ref_ind)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (path.IsNotNullOrWhiteSpace())\n                {\n                    toScan.Add(path);\n                }\n            }\n            foreach (var path in toScan)\n            {\n                var rootFolder = ((FileSystemWatcher)sender).Path;\n                var path =", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn computed == null ? null : write(key, computed);\n\t}\n\t@Override\n\tpublic E computeIfPresent(K key,\n\t\t\t\t\t\t\t  BiFunction<? super K, ? super E, ? extends E> remappingFunction,\n\t\t\t", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       pdt.objectValues(query,objcommentslist,replydict,viewtype)\n        \n        if viewtype.lower() == 'listview':\n            objcommentslist = objcommentslist[:display_count]\n            replydict = replydict[:display_count]\n        \n       ", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t}\n\t\tpublic int X\n\t\t{\n\t\t\tget { return m_X; }\n\t\t}\n\t\tpublic int Y\n\t\t{\n\t\t\tget { return m_Y; }\n\t\t}\n\t\tpublic sbyte Z\n\t\t", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   channelUri = scene.GetVoiceChannelURI(avatar.AbsolutePosition);\n                }\n                //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): av", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tPayPeriods.Delete(PayPeriodCur);\n\t\t\t\tDialogResult=DialogResult.OK;\n\t\t\t}\n\t\t}\n\t\tprivate void", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "   return _generate_cubes(header, column_headings, coords, data_arrays,\n                           cell_methods)\n\n\ndef _build_cell_methods(column_headings, column_name, dimension):\n    \"\"\"\n    Build a generator of :class:`", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   if not authz.is_authorized('group_create', context, data_dict):\n        return {'success': False, 'msg': _('User %s not authorized to create groups') % user}\n    else:\n        return {'success': True}\n\n\n\n\n\n", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tint parentPartitionId = splittedSet.getActualParentPartitionId(Index);\n\t\t\t\t// assigning parent\n\t\t\t\texample.setValue(parentPartitionId, parent);\n\t\t\t\t// assigning outcome\n\t\t\t\texample.set", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new[] { new SearchResults() };\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"segments\">The array", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = string.charAt(offset++);\n            if (codePoint < 0x10000) {\n               return _asciiSet[codePoint] ? offset : -1;\n            }\n            codePoint = string.charAt(offset++);\n            if", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "     ValidationResults results = ValidationResults.SAMPLE_NOT_FOUND;\n      if (existingRequired) {\n        results = matchExistingStudyFormName(accessionNumber, studyFormName, false);\n      }\n      return results;\n    }\n    /**", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (State != ServerState.ShuttingDown)\n\t", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(((ims.core.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionListVoBean)beans[x]).buildV", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "   xbmc.executebuiltin(\"Notification(\"+localtxt1+\",\"+localtxt2+\", 5000, %s)\" % (image))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot'", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPointsForNewProductionBuildings(bot);\n\t\t}\n\t\tvoid IBotRespondToAttack.RespondToAttack(IBot bot, Actor self, AttackInfo e", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       return plan.getPlanNodes();\n    }\n    public List<AbstractPlanNode> compile(String sql, int paramCount, String joinOrder, Object partitionParameter, boolean singlePartition, boolean inferSP, boolean lockInSP, DeterminismMode detMode)\n    {\n        return", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(121, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.com", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = parity;\n\t\t\tdcb.DataBits = data_bits;\n\t\t\tdcb.StopBits = bits;\n\t\t\tdcb.Xon", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       page = self.get_page(self.user.get_profile().get_url(),\n                              login_as=self.user)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    if args.keep_tempdir:\n        _keep_tempdir = True\n    else:\n        _keep_tempdir = False\n    #print \"args.keep_tempdir is\", args.keep_tempdir\n    #print \"", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tif newListIndex is None:\n\t\t\t\t\tnewListIndex = newList.index(entry)\n\t\t\t\telse:\n\t\t\t\t\tnewListIndex = newListIndex + 1\n\t\t\t\tif newListIndex is not None:\n", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               return new Rectangle(fontX, fontY, fontX, fontY);\n            }\n        }\n        \n        /** Gets the maximum area that the barcode and the text, if\n        * any, will occupy. The lower left corner is always (0, 0).\n", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return ArrayUtils.toPrimitive(results);\n  }\n  \n  /**\n   * Loads a comma-separated list of strings from Properties.  The list cannot include any whitespace.\n   */\n  public static String[] getStringArray(Properties props, String key, String defaultValue", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-90.0, +90.0, 10.0)\n\n    def test_tri_polar_method_linear(self):\n        # Test linear interpolation against a result snapshot.\n        test_cube = self.c", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetText(currPacket.packet.ToString());\n        }\n        private void toolStripButtonPaste_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\nNext line of code:\n            string", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "   elif color == 'yellow':\n        print '\\033[1;33;40m'\nNext line of code:\n    else:\n        print '\\033[1;37;40m'\nNext line of code:\n    print '\\033[", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "       }\n    }\n}\n\n\nA: I'm not sure what you're trying to do here. \nIf you want to remove a key from the set, you can just do:\n_refSet.Remove(key);\n\nIf you want to remove all keys from the set", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(245, 297);\n            this.Controls.Add(this.treeView1);\n            this.Icon = ((System.", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "       return createBaseFunction(\n            original.__name__,\n            original.DLL,\n            resultType = original.restype,\n            argTypes = original.argtypes,\n            doc = original.__doc__,\n            argNames = original.argNames,\n            extension = original.", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           header.write(NID.kEmptyStreams);\n            header.write(emptyStreams.toByteArray());\n        }\n    }\n    private void writeFileEmptyStreams(final DataOutput header) throws IOException {\n        header.write(NID.kEmptyStreams);", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   if (alphaLevel > 0)\n                    {\n                        alphaLevel--;\n                        g2.setColor(new Color(255, 255, 255, alphaLevel));\n                        g2.fill(ticker[i]);\n                ", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_removable_and_should_", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "               if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellation", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       f.writelines(['F) 1\t\t\t# PSF convolution kernel', \\\n                      ' (FITS file)\\n'])\n        f.writelines(['G) 1\t\t\t# PSF kernel size', \\\n                      ' (FITS file)\\n'])", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   break;\n                case 0x02:\n                    /* C */\n                    i = b;\n                    break;\n            }\n            lo[0] = i;\n        }\n    };\n    /**\n     * *************************************************************************\n     */\n", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self.locator\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\tchance = Float.parseFloat(splitNumber[1]);\n\t\t}\n\t\treturn (int) (chance*100);\n\t}\n\t\n\tprivate void fulfillSafari(Player", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "   if response['status'] != 200:\n        module.fail_json(\"Failed to delete meter\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 33);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size =", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       for plugname, plug in self.loaded_plugins:\n            if plug.collect():\n                plugruncount += 1\n                self.ui_log.info(\" %-20s %s\" % (plugname, plug.get_description()))\n                self.ui", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "   getRoomFullName.convert = Conversion.roomFullName\n    def getRoomBookingList(self):\n        \"\"\" Session Room Booking List \"\"\"\n    getRoomBookingList.convert = Conversion.roomBookingList\n    def getStartDate(self):\n       ", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           parent.mirthClient.importMessage(channelId, message);\n                        }\n                        return true;\n                    }\n                };\n                result = messageWriter.importMessages(fileTextField.getText(), messageBrowser, messageWriter);\n            } else {\n                result = messageBrowser", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tlayer = ((Scriptable) value).getInt(LAYER, (Scriptable) options);\n\t\t       \t\t} else if (value instanceof Map) {\n\t\t       \t\t\tlayer = ((Map) options).getInt(LAYER);\n\t\t       ", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null) {\n            userProfilePicID = currentSession.getUserProfilePicId();\n            userProfilePic = currentSession.getUserProfilePic();\n            userInfoSession = currentSession;\n            connectedStateLabel.setText(currentSession.getUserName", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (int i=0; i<emotions.length; i++)\n\t\t\tsum += emotions[i].strength;\n\t\tfor (int i=0; i<emotions.length; i++)\n\t\t\temotions[i].strength", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n                }\n            }],\n            self.build.to_dict())\n        # add properties\n        self.build.add_property('property1', 2)\n        self.build.add_property('property", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   Lat = phi1\n    Long = LongOrigin + phi1\n    return Lat, Long\n\n#==============================================================================\n#\n#  UTMZoneNumberToUTMZone\n#\n#  This routine converts a UTM zone number to a UTM zone letter\n", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       form = ReportUserForm(request.POST, instance=user)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Reported successfully!\")\n            return HttpResponseRedirect(reverse('profile'))\n    else:\n        form = ReportUser", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @property\n    def page_title(self):\n        \"\"\"The HTML page title.\"\"\"\n        return 'Add series'\n    def initialize(self):\n        \"\"\"See `LaunchpadFormView`.\"\"\"\n        super(ProductAddSeriesView, self).initialize()\n        self.form", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t}\n#endif\n\t\tpublic void App", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    /**\n     * Write to String\n     *\n     * @return the datatype converted to a string\n     */\n    public String toString(String separator)\n    {\n        if (", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "   return re.compile(re.escape(regex))\n    def compile_length_regex(length_tags):\n        if not length_tags:\n            return None\n        else:\n            new_length_tags_list = []\n            length_tags = length_tags[0]\n", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               throw new NotImplementedException ();\n            }\n            public override object[] GetCustomAttributes (bool inherit)\n            {\n                return new object[0];\n            }\n            public override Type[] GetInterfaces ()\n            {\n                return new Type[0];\n            }\n           ", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "   }\nclass OBD_PID1D(OBD_Packet):\n    name = \"PID_1D_FuelSystemStatus\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=100 / 128.,\n", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tif ready_pipe:\n\t\t\tself.bus.add_signal_receiver(self.on_name_owner_changed,\n\t\t\t                              'NameOwnerChanged',\n\t\t\t                              'org.freedesktop.Secret.Collection', sender_keyword='sender", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "\t\t\t\tAddNecroSpell( 15, 17, 79.6, typeof( VengefulSpiritScroll ), Reg.BatWing, Reg.GraveDust, Reg.SulfurousAsh );\n\t\t\t\tAddN", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "       _app_ctx_stack.pop()\n        if self.session is not None:\n            self.session.close()\n        if self.flashes is not None:\n            self.flashes.pop()\n        if self.request is not None:\n            self.request.pop", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, needs_columns)\n    if topic_name:\n        response = response.filter(PubSubConsumer.topic_id==topic_name)\n    return response\n# ################################################################################################################\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getConsumedRelatedResourcesByRelease(ResourceEntity resource, ReleaseEntity release) {\n        List", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "   axis_proj = _axis_in_detector(ray_trafo.geometry)\n    # Compute angles\n    phi = np.arctan(axis_proj[0] * ray_trafo.range.meshgrid[1] +\n                     axis_proj[1", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "       return regx\n    def _buildRE(self, regx):\n        \"\"\" Return the Proxyfied RE string \"\"\"\n        if self.isEnabled():\n            regx = re.sub('//1', self.option, regx).replace('&', '&amp;')\n", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn type.ToString (fmt) + \" \" + unit.ToString (fmt);\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar obj2 = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(obj2.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(obj2.Properties[0].Value.Type,", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int w = 0; w < width; w++) {\n                    edges.add(new T2(getSIPrefix()+\"square-cylinder-\"+w+\"-\"+h, getSIPrefix()+\"square-cylinder-\"+w+\"-\"+h, \"square", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   ds.add_px_err(isoel=isoel,\n                  col1=\"deform\",\n                  col2=\"deform\",\n                  px_um=px_um,\n                  inplace=False)\n    assert np.allclose(data[0][", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       final IAccessPath<ISPO> expected = new AccessPath(db, \"http://localhost:8080/bigdata/test/test.rdf\");\n        final IAccessPath<ISPO> actual = new AccessPath(db, \"http://localhost:8080/", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                    u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u'SpotPrice': '0.105200',\n                     u'AvailabilityZone': 'us-east-1b'}\n                ", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should download and install Yarta.\n\t * \n\t * When the function returns true Yarta will be installed.\n\t * \n\t * @return true/false", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteBuffers(1, new int[] { 0 }, 0);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteTextures(1, new int[] { 0 }, 0);\n\t\t\tOpen", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       or :py:obj:`None` if singular.\n        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._data_container.data_cov_mat_inverse\n    @property\n    def x_data_error(self):\n        \"\"\"1D array", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * Returns a string representation of this object.\n     *\n     * @return a string representation of this object.\n", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "               }\n              } catch (Exception e) { // If the account is deleted, use the eucalyptus admin account\n                LOG.warn(\"Account ID \" + walrusObject.getOwnerId() + \" does not not exist. Changing the ownership of object \"\n                    + walrus", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public event EventHandler Initialized\n        {\n            add { _initialized += value; }\n            remove { _initialized -= value; }\n        }\n        public", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       final ImportVmTemplateParameters parameters = new ImportVmTemplateParameters(Guid.newGuid(), Guid.newGuid(), Guid.newGuid(), Guid.newGuid(), Guid.newGuid(), t);\n        when(command.getBackend().runInternal", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.TopAttach = ((uint)(1));\n\t\t\tw10.BottomAttach = ((uint)(2));\n\t\t\tw10.LeftAttach = ((uint)(3));\n\t\t\tw10.RightAttach = ((uint)(", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\\n            self.category\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic ConstructorBuilder DefineConstructor(MethodAttributes attribs, CallingConventions callConv, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)\n\t\t{", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return new Builder(prototype);\n    }\n    protected override Builder ThisBuilder {\n      get { return this; }\n    }\n    public override pb::MessageDescriptor DescriptorForType {\n      get { return global::bnet.protocol.channel_invitation.ChannelInvitation", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "               vertices[x] = getVertices()[getVertIndex(i, x)];\n            }\n        }\n    }\n    /**\n     * Stores in the <code>vertices</code> array the vertex values of quad\n     * <code>i</code>. If <code", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (showDateData.length() > 0) {\n            result.add(COLUMNS_DATE_CREATED);\n        }\n        String showDateModified = property(\"categoryDateModified\", \"search\", \"\");\n        if (showDateModified.length() > ", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds (animationDuration);\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnPaintBackground(PaintEventArgs e)\n    {\n      e.Graphics.FillRectangle(SystemBrushes.Control, ClientRectangle);\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!string.IsNullOrEmpty(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            foreach (string user in Users)\n            {\n                SendEmails", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions;\n", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           ValidationControlsData = new TValidationControlsData(ValidationColumn, VerificationResultCollection);\n            ValidationControlsData.ValidateDataManual(AVerificationResult);\n        }\n        private void ValidateDataAutomatic(PcConferenceRow ARow)\n        {\n            P", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, (int)stream.Length);\n                args.Add (filename, buffer);\n            }\n        }\n        /*\n         * Loads a binary file and appends as blob/byte[] into args.\n         */\n        static void LoadBinaryFile", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "       return len(self._reqs[PayloadRequirementType.group]) == 0\n    def __len__(self):\n        \"\"\"Return the number of requirements.\n        return: number of requirements\n        rtype: int\n        \"\"\"\n        return len(self._reqs[Pay", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\treturn _copyOption == CopyOption.CopyCustom;\n\t\t}\n\t\tpublic bool UseInstanceNumberEnabled\n\t\t{\n\t\t\tget { return UseInstanceNumber; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (!value)\n\t\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tdataDir = value;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t\t", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation.getBugType() == BugType.BREAKPOINT) {\n                break;\n            }\n        }\n    }\n    /**\n     * For debugging: check a BugInstance to make sure it is valid.\n     *\n     * @param bug", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\tpublic class CheeseWedge : Food\n\t{\n\t\t[Constructable]\n\t\tpublic CheeseWedge() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic CheeseWedge( int amount ) : base", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast();\n                        }\n                    }\n                }\n            }\n        }\n        private void JungleClear()\n        {\n            if (Menu.GetBool(\"J", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t *", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        if fb == '':\n            return {}\n        header = fb[4]\n        legend = fb[8].split()\n        date = re.findall(r\"\\d\\d\\.\\d\\d\\", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(\n            field_def, field_model_def)\n        clean_field_model_definitions()\n    def test_field_name_model_based_with_override(self):\n        \"\"\"JSONAlchemy - field name model based with override\"\"\"\n", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new[] {new object[] {\"10\", \"TheString\", \"?10?\"}});\n                env.UndeployAll();\n            }\n        }\n        internal class InfraWidening2 : RegressionExecution\n        {\n            private readonly bool namedWindow;\n           ", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "       clibrebound.reb_particle_imul(byref(self), c_double(other))\n        return self\n    \n    def __neg__(self):\n        c = self.copy()\n        return c.__ineg__(self)\n    \n    def __ineg__(", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "   return self.render(cr, uid, id_or_xml_id, values=values, engine='ir.qweb', context=context)\n\n\nA: I'm not sure why you're using the view_id in the view_obj call.  You should be able", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = new HTML(text);\n        } else {\n            value = oldValue;\n        }\n        if (value != null) {\n            c.setClientProperty(BasicHTML.propertyKey, value);\n        }\n    }\n    /**\n     * Returns the HTML renderer", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, contents=content)\n    assert s.name_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    for item in items:\n        assert item.timeout is None\n", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new SqlLoader(namedReference);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmapping.SqlLoader.NamedReference = namedReference;\n\t\t\t}\n\t\t}\n\t\tpublic void Loader(string", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Faction.State.Tithe );\n\t\t\twriter.WriteEncodedInt( (int) m_Faction.State.Silver );\n\t\t\twriter.WriteEncodedInt( (int) m_F", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       assert graphQueue.size() <= maxGraphs;\n    }\n    private void pushInvocationAndGraphs(MethodInvocation methodInvocation) {\n        maxGraphs += methodInvocation.callee().numberOfMethods();\n        assert graphQueue.size() <= maxGraphs;\n        for (int", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "               pytest_command = 'pytest -v --cov {} --cov-append {} --cov-append-path {} --cov-append-file {} --cov-append-file-name {} --cov-append-file-path {} --cov-append-file-name {} --cov-append-", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    states.get(0).readCache.put(key, value);\n                }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraSessionEvent */\n    public void handleCamera", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new InternalGump(from as PlayerMobile, this));\n\t\t\t}\n\t\t}\n\t\t\n\t\tprivate class InternalGump : Gump\n\t\t{\n\t\t\tpublic Item EodonianWallMap { get", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   from invenio.legacy.bibrec import get_fieldvalues\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "       self.module.set(user, data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath)\n    def save_as_mofile(self, fpath):\n        \"\"\"\n        Save the binary representation of the file to *fpath", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to get TransformationProblematics\", res['Message'] )\n      return res\n    transDicts = res['Value']\n    if not transDicts:\n      gLogger.info( \"No transformations found in Wait", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\treturn baseURI.resolve(uri.toString()).toASCIIString();\n\t\t} catch (URISyntaxException e) {\n\t\t\tthrow new CommentException(l10n(\"invalidFormURI\"), e);\n\t\t}\n\t}\n\t\n\t/**\n\t", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       yield self.check_single_build_legacy(buildResult, verifiedScore)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.type = 'text'\n    self.category.text = 'Less: &lt;'\n    self.assert_(self.category.type == 'text')\n   ", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "AnnotatedTypeMirror type) {\n        if (type.hasAnnotationRelaxed(I)) {\n            String immutableString =\n                AnnotationUtils.getElementValue(getImmutabilityAnnotation(type));\n            if (r1.containsKey(immutableString)) {\n", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           _engine.Memory.Map.CurrentMapper.SaveState(this);\n            #endregion\n            #region PPU\n            _ppu.SaveState(this);\n            #endregion\n            #region APU\n            _engine.Apu.SaveState(this);\n            #", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           JMenuItem jMenuItem = new JMenuItem(sTDocUrl);\n            jMenuItem.addActionListener(oActionListener);\n            _jMnuRoot.add(jMenuItem);\n        }\n        private void addTabPane(JTabbedPane _jTabbedPane){\n            J", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Red Bears]\nNext", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn Frame.H;\n\t\t}\n\t\tpublic int SizeWidthToFit ()\n\t\t{\n\t\t\treturn SizeWidthToFitWithMin (0);\n\t\t}\n\t\tpublic int SizeWidthToFitWithMin (int min)\n\t\t", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "       return self.tweet_id\n    def get_absolute_url(self):\n        \"\"\"\n        Return the permalink to this announcement.\n        \"\"\"\n        return reverse('announcements:twitter_cross_publication_detail', kwargs={'slug': self.slug", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "#html_context = sphinx_material.get_html_context()\n\n# -- Options for HTML output ----------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#html_theme =", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "   cursor.execute('''SELECT sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration\n                 FROM flight_group WHERE groupID=?''', (i,))\n    rows = cursor.fetchall()\n    for row in rows", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "   db_set_last_snapshot(new_snapshots)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"I'm not sure what you mean by that.<br/>I'm not a thief, you know.\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_farm\":\n\t\t\t\tMsg(\"You want to buy a farm?<br/>", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead = ()\n        self.codetail = ('name',)\n", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "   def _finish_task(self, status, result):\n        \"\"\" record the results of a task for a single host \"\"\"\n        task_uuid = result._task._uuid\n        if uuid in self._task_data:\n            return\n        play = self._play_name\n       ", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               Intent intent = new Intent(Intent.ACTION_VIEW, uri);\n                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                context.startActivity(intent);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary.keys()) > 0):\n        print(\"primary.xml contains additional packages:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name, pkg.", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "       inputs.extend(self.get_finalized_command('build_ext').get_outputs())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < disassembledValues.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = disassembledValues[j];\n\t\t\t\tif (InitializeLazyProperty(fieldName, entity, session,", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '-J', job_name,\n        '-o', log_name,\n        '-N', job_name,\n        '-n', job_name,\n        '-t', job_name,\n        '-c', job_name,\n        '-v', job_name,\n        '-", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           ViewBag.ToolButtons = \"VP\"; // View Pick \n            ViewBag.PickState = true;\n            return View(\"DelegateList\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                       var circle = (Circle) obj;\n                        return string.Format(\"({0},{1},{2})\", circle.X, circle.Y, circle.Radius);\n                    }\n                    if (obj is Vector2)\n                    {\n                        var vector = (Vector", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "   self.doTimmer()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t\tif (path.Count > 0)\n\t\t\t\t{\n\t\t\t\t\tvar closestHarvestableCell = ClosestHarvestablePos(self);\n\t\t\t\t\tharv.LastHarvestedCell = orderLocation;\n\t\t\t\t", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                      self.logger.error(\"dhcpd -t failed\")\n                       return False\n                else:\n                    service_restart = \"service %s restart\" % self.dhcp_service_name(self.api)\n                    rc = utils.subprocess_call", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           while (true)\n            {\n                if (state.Frequency < 256)\n                {\n                    states[stateIndex] = state;\n                    stateIndex++;\n                    goto NoLoop;\n                }\n                state = _allocator.AllocateUn", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The String VR.\n        /// </summary>\n        public static readonly DicomVr SVr = new DicomVr(\"SV\", false, false, true, 16", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(session_l[tFull[1]]);\n\t\t}\n\t\t\n\t\tif(sessionValuesArray.Count > 0)\n\t\t{\n\t\t\tint [] sessionIDs = new int[sessionValuesArray.Count];\n\t", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "       o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 4)\n        self.assertEquals(b'abcdefghijghij', self.read(o))\n    def test_smaller_than_file_at_end", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 32-", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   ax.plot(cr['combined'][app][VC]['durations'],\n             cr['combined'][app][VC]['stats']['intervals'][0]['interval'],\n             label='95%% CI')\n    ax.plot(cr['combined'][app][VC", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   def test_UID(self):\n        \"\"\"\n        Check UID/GID switches when current effective UID is root.\n        \"\"\"\n        self._testUIDGIDSwitch(0, 0, 0, 0, [], [])\n        self._testUIDGIDSwitch", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\telse if(model.", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[1])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        mirror.writeElement(kind, index, value);\n    }\n    @HOSTED_ONLY\n    public void writeHeaderValue(ObjectMirror mirror, int offset, Value value) {", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           return FileUtils.CombinePaths(SolutionTask.Project.FullName, relativePath);\n        }\n        /// <summary>\n        /// Resolves an assembly reference using a path relative to the project \n        /// directory.\n        /// </summary>\n        /// <returns>\n", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return string % args\n\ndef str_format_color(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using {% and %}\n    instead of { and }\n    \n    This version adds coloring to the output\n    \"\"\"\n", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       Dlasdq.dlasdq(\"U\", i17, i17, 0.0D, 1.0D, paramArrayOfDouble12, i22 - 1 + paramInt22, 1, paramArrayOfDouble12, i22", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                   CollisionObjects = new[]\n                    { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Lucian\n            #region Malphite\n            Spells.Add(\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       with self.assertRaises(OSError) as cm:\n            subprocess.Popen(['/bin/sh', '-c', 'echo hello'])\n        self.assertEquals(errno.ENOENT, cm.exception.errno)\n    @testlib.with_context", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (propertiesName == null)\n\t\t\t\tthrow new InvalidOperationException(\"propertiesName must be set before StartCoreServices() is called\");\n\t\t\tif (configDirectory == null)\n\t\t\t\tthrow new InvalidOperationException(\"configDirectory must be set before StartCoreServices", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\tinternal void AddConstraint (ConstraintCollection collection)\n\t\t{\n\t\t\tif (collection == null)\n\t\t\t\tthrow new ArgumentNullException (\"collection\");\n\t\t\tif (collection.Contains (this))\n\t\t\t\tthrow new ArgumentException (\"Constraint already in collection\");", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.verticalLayout_2.addWidget(self.settings_misc_groupBox)\n        self.verticalLayout_2.addWidget(self.settings_project_groupBox)\n        self.verticalLayout_2.addWidget(self.settings_kernels_groupBox)\n", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               TextView textView = new TextView( getActivity() );\n                textView.setText( R.string.no_stations_found );\n                layout.addView( textView );\n                return false;\n            }\n            Cursor c = result[ 1 ];\n            if ( c ==", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\ts.CreateQuery(\"select Id, Name from Country\").List().Count;\n\t\t\t}\n\t\t\tQueryStatistics sqlStats = stats.GetQueryStatistics(\"select Id, Name from Country\");\n\t\t\tAssert.IsNotNull(sqlStats, \"sql stats", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ uiByteValue;\n                uiCRCITTSum ^= uiByteValue;\n                uiCRCITTSum ^= uiByteValue;\n                uiCRCITTSum ^= uiByteValue", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn entityData.get(SHOOTING_SPEED);\n\t}\n\tpublic void setShootingSpeed(int speed) {\n\t\tentityData.set(SHOOTING_SPEED, speed);\n\t}\n\tpublic int getShootingSpeed", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                new CeylonJavaBackendHyperlinkDetector(), \n                new CeylonInformationControlCreator(), \n                new CeylonInformationProvider(), \n                new CeylonInformationControlCreator(), \n                new", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.l.addWidget(self.drawingModeWidget, 0, 0)\n        self.l.addWidget(qt.QSpacerItem(0, 0), 1, 0)\n        self.l.addWidget(qt.QSpacerItem", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    chosenObj = selectConverter.convert(value);\n                  }\n                  else\n                  {\n                     Converter<Object, Object> converter = converterFactory.getConverter(targetType, Object.class);\n                     chosenObj = converter.convert(value);\n                  }", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tif (i!=j)\n\t\t\t\t\tsb.append(\"\"+i+\"->\"+j+\" \\t\"+min[i][j] +\"\\t\"+max[i][j] +\"\\t\"+avg[i][j]+\"\\n\"); \n\t\tsb", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                           foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                                int line", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskException {\nNext line of code:\n\t\t\tget { throw new Not", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final Database mockDatabase = EasyMock.createMock(Database.class);\n        final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        //expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(3);\n        //expect(mock", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn new Vector2 (v.X, v.Y) * viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Vector2 viewport)\n\t\t{\n\t\t\treturn new Vector2 (v.X", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "   def __eq__(self, other):\n        if type(self) != type(other):\n            return False\n        if self.packets != other.packets:\n            return False\n        if self.bytes != other.bytes:\n            return False\n        return True\n\n\n\n", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\tConsole.WriteLine(\"dpslamServer/Send(\" + PortNumber.ToString() + \")/\" + se.Message);\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t///", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           switch(type) {\n                case Activity:\n                    mActivityBucketList.addAll(list);\n                    break;\n                case Step:\n                    mStepBucketList.addAll(list);\n                    break;\n            }\n        }\n    }", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " print '};'\n  print ''\n  # generate the multi-use version of the callback\n  print textwrap.dedent(\"\"\"\\\n  /**\n   * @brief A %d argument callback which can be called multiple times.\n   */\"\"\" % number_of_args)", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   return simplejson.dumps(range_item_dict(items), cls=JSONEncoder))\n    \"\"\"\n    return simplejson.dumps(range_item_dict(items), cls=JSONEncoder))\ndef range_csv(filename, items):\n    \"\"\"\n   ", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(\"score\"), Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       return super(UserDetailView, self).post(request, *args, **kwargs)\n\n\nclass UserCreateView(CreateView):\n    model = Contact\n    form_class = UserCreateForm\n    template_name = \"shoop/admin/users/create.jinja\"\n", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// A list of the modules that constitute the assembly.\n    /// </summary>\n    public IEnumerable<IModule> MemberModules {\n      get { return Enumerable<", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           var v2 = new DenseVector(input.Count);\n            var v3 = new DenseVector(input.Count);\n            var v4 = new DenseVector(input.Count);\n            var v5 = new DenseVector(input.Count);\n            var v6 =", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[0];\n\t\t}\n\t\t\n\t\tApfloat[] medians = new Apfloat[2];\n\t\t\n\t\tApfloat[] sortedMedians = new Apfloat[2];\n\t\tApfloat[] sortedMedians2 = new Apfloat", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "   update_counts(edge, -1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "   for mapping in mapping_json['mappings']:\n        if mapping['type'] == 'nested':\n            for mapping_item in mapping['properties']:\n                if mapping_item['name'] in csv_mapping:\n                    result[mapping_item['name']] = csv_mapping", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.AllowBots)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar bot = slot.GetOrNull<BotInfo>();\n\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "   frame_header.frame_type = FrameType.DATA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           var b = cluster.BoundingBox;\n            if (b.Left < b.Right)\n                throw new Exception(\"Left bound of the graph is smaller than right bound\");\n            if (b.Top < b.Bottom)\n                throw new Exception(\"Top bound of the graph is smaller than", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeDegrees = m_maxSlopeRadians * 180.0 / M_PI;\n}\ndouble btKinematicCharacterController::getMaxSlope()\n{\n\treturn m_maxSlopeDegrees;\n", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       if (initializers.isEmpty()) {\n            checker.report(Result.failure(\"unique.leaked\"), node);\n        }\n        return super.visitNewArray(node, p);\n    }\n    @Override\n    public Void visitNewClass(NewClassTree node,", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound != null)\n\t\t\t{\n\t\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\t\tif (nbttagcompound1 != null", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = new ClassItem(typeAttribute.Value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Loads the", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.Width = 200;\n\t\t\t\tmyTrackBar.Height = 250;\n\t\t\t\tmyTrackBar.Orientation = Orientation.Vertical;\n", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tdoReturn(Collections.singleton(annotationType)).when(searchNarrower).narrowByAnnotationType(Matchers.<Callable<?>> any());\n\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration, Collections", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\treturn true;\n\t}\n\t\n\t/**\n\t * Returns the access path of the current abstraction\n\t * @return The access path\n\t */\n\tpublic AccessPath getAccessPath() {\n\t\treturn accessPath;\n\t}\n\t\n\t/**\n\t * Returns", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideR;\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this right constituent stretch far enough to reach the left constituent?\n              continue;\n            }\n            float pS =", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "           'rsync',\n            '-e',\n            \"/bin/sh -c 'echo \"\n            '\"$@\"; echo \"'\"',\n            'src',\n            'dst'\n            ],\n            shell=False, env=None,\n            stdout=PIPE, stderr=PI", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.Runt", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a parameter with a color value.\n\t *\n\t * @param   name    Name of the parameter.\n", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( (proxyThat == null) || (this.getClass() != proxyThat.getClass()) ) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal Contact contact = (Contact) proxyThat;\n\t\tif ( this.getContactDate() == null ) {", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "   if n == 0:\n      status = 'w'\n      else:\n        status = 'a'\n      with open(name, status) as f_ID:\n        f_ID.write(str(body_types[i]) + '\\n')\n      for j in range", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "   if cdata is None:\n        return\n    # If the optimization is tried over a node that is not a part of graph before\n    if not hasattr(node, 'fgraph'):\n        return\n    # This optimization needs ShapeOpt and fgraph.shape_feature\n    if not", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   self.fields['groups'].label = \"Select groups\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "                   fn(*arg, **kw)\n                    return None\n        else:\n            fn(*arg, **kw)\n            return None\n\n\nclass AttributeEvents(object):\n    \"\"\"A class to handle attribute events.\n    This class is used to handle attribute events.  It is\n", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "       self.runtime.add_block_as_child_node(self, xml_object)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       for key, change in data_model_changes.items():\n            self.update_filtered_data(to_global(key))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\treturn true;\n\t\t}\n\t}\n\t[XmlType(\"ldtoken\")]\n\tpublic sealed class Ldtoken : Instruction\n\t{\n\t\t[XmlAttribute(\"type\")]\n\t\tpublic string type;\n\t\tinternal override void Generate(CodeGenContext", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(48, 16);\n\t\t\tthis.objYLabel.TabIndex = 14;\n\t\t\tthis.objYLabel.Text = \"Y:\";\n\t\t\t// \n", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"etrepum\")\n        self.assertEqual(set(c.files), set([\"twisted/web/woven/form.py\",\n                                   \"twisted", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new MultiValuedMap<>(vocabulary.getIdentifier());\n            this.data.put(ID_KEY, termData);\n        }\n        for (Map.Entry<String, String> entry : csvData.", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\tif(isPassiveFlower()) {\n\t\tif(player.isSneaking()) {\n\t\t\tif(isPassiveFlower()) {\n\t\t\t\tif(player.isSneaking()) {\n\t\t\t\t\tif(player.isSneaking", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           for (Node n : component.getNeighbors()) {\n                intrinsicCohesion += this.getIntrinsicCohesion(n, c);\n            }\n        }\n        this.memorizedcohesion.put(c, intrinsicCohes", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "   if are_equal:\n        logger.info(\"OK\")\n        return True\n    else:\n        logger.info(\"ERROR: Document %s: Expected comment %s and got %s\" % (str(docid), str(v2), str(v1)))\n        return False", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tif(tvComputerCluster.Nodes.Count>0)\n\t\t\t{\n\t\t\t\ttvComputerCluster.Nodes[0].Nodes.Clear();\n\t\t\t}\n\t\t\tif(tvComputerCluster.Nodes.Count>1)\n", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   exDateList.addAll(exceptionDates);\n    return new ExDate(exDateList);\n  }\n  /**\n   * Generates the dates at which it exist some exceptions in the periodicity of the specified event.\n   * @param event the detail on the event for which it", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.Bind( sourceComponent, sourceProperty, sourceEvent, targetComponent, targetProperty, targetEvent );\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hide", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class,\n                    containerName, this);\n            List<String> toAdd = new ArrayList<String>();\n            for (String port : jsonData.split(\",\")) {\n               ", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tpublic final class ImagePath implements java.io.Serializable\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\n\t\t", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "   new_la = la_obj\n\n\nA: I think the problem is that you are trying to replace the predicate URI with the new URI, but you are not updating the LinkAnnotation object. \nYou need to update the LinkAnnotation object, and then save it.\n\n\nA: I think", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .borderoptions= \")\n                .Append(StringUtil.ToHexString(BorderOptions)).Append(\"\\n\");\n            buffer.Append(\"          .borderleft  = \")\n                .Append(StringUtil.ToHexString(BorderLeft)).Append(\"\\n\");\n", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// This range contains the bulk of the CJK set.\n\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = ((int) (cjkToJis [value])) |\n\t\t\t\t\t\t", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "   src1 = env.A[b]\n    off1 = env.cst(off1.int(-1),10)\n    src2 = env.cst(off2.int(-1),10)\n    obj.operands = [src1, src2, dst", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.openStream();\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\t\n\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\tpropertiesMap", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE || this == SPECTATOR;\n        }\n        /**\n         * Returns true if this is the SPECTATOR game type\n         */\n        public boolean isSpectator()\n        {\n            return this == SPECTATOR;", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (WellKnownSidType.LocalSystemSid, null);\n\t\t\tSecurityIdentifier groupSid = new SecurityIdentifier (WellKnownSidType.BuiltinAdministratorsSid, null);\n\t\t\tDiscret", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "   def __process(self, results):\n        req_data = []\n        req_data.append(urlencode({\n            \"duration\": str(int(round(result.length))),\n            \"fingerprint\": result.chromaprint,\n        }))\n        urld", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       if (PhotonNetwork.serverSettingsAssetFile != null)\n        {\n            PhotonNetwork.serverSettingsAssetFile = AssetDatabase.GetAssetPath(PhotonNetwork.serverSettingsAssetFile);\n        }\n        if (PhotonNetwork.serverSettingsAssetFile != null", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       fullNewMessageBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Intent intent = new Intent(getActivity(), DraftEditor.class);\n                intent.putExtra(\"task\", \"new_answer\");\n                intent.put", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           return psit_G\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       Response response = utkastController.createUtkast(intygsTyp, buildRequest(\"luse\"));\n        assertEquals(OK.getStatusCode(), response.getStatus());\n    }\n    @Test\n    public void testCreateUtkastEfternamnFailsFor", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach (ILNode child in block.Body) {\n\t\t\t\t\tif (child is ILBlock) {\n\t\t\t\t\t\t// Flatten the child\n\t\t\t\t\t\tFlattenBasicBlocks(child);\n\t\t\t\t\t} else", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    IsRagdoll = ragdoll;\n\t    if (IsRagdoll) {\n\t\t//don't do it again if we're already a ragdoll\n", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def fix_region_dim(self, regions):\n        extruded = (self.layer_type == LayerType.stratum)\n        for reg_list in  [self.polygon_region_ids, self.segment_region_ids, self.node_region_ids", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff] = (byte)num;\n        out[outOff + 1] = (byte)(num >> 8);\n        out[outOff + 2] = (byte)(num >> 16);\n        out[outOff + 3] = (byte)(", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new SimpleRegexValueGetter( objectVariables ) );\n        }\n        public FilteredPatternFinder( Iterable<PatternMatch> source,\n            final Map<String, PatternNode> objectVariables,\n            final FilterValueGetter valueGetter )\n       ", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   return slice_json\ndef transform_values_holder_xml_json_to_json(value, format = 'date'):\n    if value:\n        if format == 'date':\n            return value[0]\n        elif format == 'integer':\n            return int(value[0])", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           frameToClose = (InternalFrame)buttons.get(btn);\n            try {\n              frameToClose.closeFrame();\n              frameToClose = null;\n            }\n            catch (PropertyVetoException ex) {\n            }\n          }\n        }\n      });\n   ", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "   elif sys.argv[1] == '--get':\n        print getIDList()\nNext line of code:\n    elif sys.argv[1] == '--create':\n        print createFunction('randLC', \"\"\"\nargs: None\nreturns:\n    filename, redshift, data", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x+x, dpi), Util.px2mm(offset.y+y, dpi));\n    for (int y = Math.max(cy-toolDiameter/2, 0); y < Math.min(cy", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table3.TABLE_NAME, new String[] {Db.Table3._ID}, new String[] {String.valueOf(newId)}, null);\n                    //Update budget items\n                    db.update(Db.Table4.TABLE_NAME, new String[]", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               m_ptr = IntPtr.Zero;\n            }\n        }\n        #endregion\n    }\n    internal sealed class WINTRUST_FILE_INFO : IEquatable<WINTRUST_FILE_INFO>\n    {\n        public WINTRUST_FILE_INFO", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tvar unit = self.World.Map.Rules.Actors[itemName];\n\t\t\tif (unit == null || !unit.HasTraitInfo<BuildableInfo>())\n\t\t\t\treturn;\n\t\t\tvar buildable = unit.TraitInfo<", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "       self.infoLabel.setText(infoText)\n        \n    def showDir(self):\n        self.showCurrentDirInfo()\n        self.showDirTreeview(self.activeTreeview)\n        \n    def showDirTreeview(self, treeview):\n        self.show", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re.sub(re_m4, lambda m: self.subst(m.group(1)), code)\n        self.outputs[0].write(code)\n\n\n@feature('*')\ndef process_source(self):\n    \"\"\"\n    Process each element in", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer:\")\n        return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx + reactorExtent - 2 ] + chemical[ 0 ][ idx + reactorExtent - 1 ] );\n\t\t\t\t\t\t\t\t\tdelta[ 1 ][ idx ]", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               columnTypes.add(typeManager.nextTimestampAdapter().of(dateFormatFactory.get(pattern), timestampLocale));\n                break;\n            default:\n                throw JsonException.$(localePosition, \"Invalid type\");\n        }\n    }\n    private void createImportedType(int", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\treturn true;\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Configura os parametros do metodo de Alterar\n\t\t/// </summary>\n\t\t/// <param name=\"qs\">Objeto da Store Procedure</param>\n\t", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object DeepCopy(object value, ISessionImplementor session)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object DeepCopy(object value, I", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "   self.ntp_auth_conf = self.get_ntp_auth_exist_config()\n    self.ntp_auth_conf = self.get_ntp_auth_enable()\n    self.ntp_auth_conf = self.get_ntp_auth_", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "       self.store.update_item(component.location, editing_user)\n        with check_mongo_calls(max_find, max_send):\n            self.assertGreater(datetime.datetime.now(UTC), after_create)\n            self.assertEqual(self.", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        digest.update((byte) 0);\n        digest.update((byte) 0);\n        updateWith(ch);\n    }\n    public void startElement(String namespaceURI, String local", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict)\ndef mklogical(data):\n    return aetypes.Logical(data)\ndef mkalias(data):\n    return aetypes.Alias(data)\ndef mktype(data):\n    return aetypes.Type(", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           return ResolveType(api, controllerName, actionName, parameterNames, SampleDirection.Request, out formatters);\n        }\n        /// <summary>\n        /// Resolves the type of the action parameter or return value when <see cref=\"HttpRequestMessage\"/> or <see cref=\"Http", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "               value = entry.get_active_text()\n            self.on_edit_cell(record, column.name, value, callback=callback)\n            return\n        elif event.keyval == gtk.keysyms.Delete:\n            if isinstance(entry, gtk.Entry", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "       f.next()\n        except StopIteration:\n            pass\n        else:\n            raise ValueError(\"File %s contains blank lines\" % path)\n    if f:\n        f.close()\n    if not os.path.exists(path):\n        module.fail_json", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.IUnknown)] object pUnkState\n            );\n        [PreserveSig]\n        int QueueEventParamVar(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LPStruct", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       return userDirectoryService.addPrincipalToPrincipal( directedAclKeys );\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = DELETE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void deletePr", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element.findall('.'):\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_extra_text(self, element):\n        \"\"\"Verify the extra text of an element.\n        This verifies the text of an", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   return clone\n\n\ndef _get_elements_by_tagName_helper(doc, tagName, namespaceURI, localName):\n    \"\"\"\n    Return a list of elements with the given tag name.\n    \"\"\"\n    if namespaceURI:\n        return doc.getElementsByTagNameNS(namespace", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(expectedType, endOffset))\n\t\t\t\tkeyLocator.setKeyLocator(decoder.readBlobTlv(expectedType, endOffset));\n\t\t\telse\n\t\t\t\tthrow new Error(\"Expected \" +", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < myWeap", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        action.setColorSelection( m_colorSelection.getValue( m_colorSelection\n            .getSelectedIndex() ) );\n        action.setColorPreview( m_colorPreview.getUrl() );\n        action.setColorPreview( m", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "   raise RuntimeError(\"Error downloading file: %s\" % r.data.decode(\"utf-8\"))\n    return r.data.decode(\"utf-8\")\ndef download_file_json(socket_path, url, progress=True):\n    \"\"\"Download a file, saving it to the", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\tif (response.MergeOrderResponse.Success)\n\t\t\t\t{\n\t\t\t\t\tmergedOrder = response.Mer", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   return [coeff * met.weight for met, coeff in reaction.metabolites.items()]\ndef _reaction_coefficients(reaction: \"Reaction\") -> List[float]:\n    \"\"\"Return the metabolite coefficients.\n    Parameters\n    ----------", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "   return (\n        super(UnitManager, self).get_queryset().select_related(\n            'store', 'submitted_by', 'commented_by', 'reviewed_by',\n        )\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SingleTrainingAttendance',\n            fields=[\n                ('id", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "   self.ipdests[dstip] = True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   m_RecentItems.add(item);\n    updateMenu();\n  }\n  /**\n   * Removes the item from the internal list.\n   *\n   * @param item\tthe item to remove from the list\n   */\n  public synchronized void removeRecentItem", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.Follower.IsInRange(target) && src.Follower.IsInRange(src))\n                return false;\n            return true;\n        }\n        public static bool CanDetect(Mobile src, Mobile target)\n        {\n            if (src.", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       if (halfTradePeriodDate == null && takeOfferDate != null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;\n   ", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\ta = a == null ? LeadingAny(p.down) : a;\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void Complete(Node p) {\n\t\tif (p.typ == Node.any) {\n\t\t\tp.", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)((address & 0x000000ff)  >>  0);\n\t\t\tmWiimoteState.ReadReport(buff);\n\t\t\treturn buff;\n\t\t}\n\t\t/// <summary>\n", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis(order, caseInsensitive);\n\t\t}\n\t\tpublic int compare(MskJointVo o1, MskJointVo o2)\n\t\t{\n\t\t\tif (caseInsensitive)\n\t\t\t{\n\t\t\t", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tEmail.Send( message );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           _freeList[0].SetNext(0);\n            _freeList[0].SetPrev(0);\n            _freeList[0].SetNu(0);\n            _freeList[0].Address = 0;\n            _freeList[0].Stamp = ", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       view = navigate_to(self, 'Create')\n        view.toolbar.configuration.item_select('Create a new Compute Rate', handle_alert=True)\n        view.fill_with(rate, on_change=view.save_button, no_change=view.", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tIntPtr srcData = shadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, srcData, length );\n\t\t\t\tshadowBuffer.", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\t\tself.list.append(getConfigListEntry(_(\"NIM\"), self.satfinder_scan_nims))\n\t\telif len(nimmanager.nim_slots) > 1:\n\t\t\tself.satfinder_scan_nims.value", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                tcpAcceptFilters.add(new tcp_address_mask_t(filterStr));\n            }\n            return;\n        default:\n            throw new IllegalArgumentException(\"unknown option \" + optname);\n        }\n    }\n\n    public void setOptions(", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               if (filter == 0)\n                    return fout.ToArray();\n                else\n                    return curr;\n            }\n            return fout.ToArray();\n        }\n        \n        protected internal PdfObject ReadPRObject() {\n            PdfObject obj = ReadPRO", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface(':1.23'))\n        s.set_interface", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "   output += \"image basis \\n\"\n    for vect in amap.get_image().get_basis():\n        output += str(e2.element_from_vector(vect, level, \n                                                 position, \n                                                 self.options)) + \"\\", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "               \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"optional_string\\\".\",\n                \"optional_string: 123\");\n            AssertParseError(\n                \"1:1: Message type \\\"protobuf", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void clear() {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tqueueOperation( new Clear() );\n\t\t}\n\t\telse {\n\t\t\tmap.clear();\n\t", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member returning an item\n\t\t/// </summary>\n\t\t/// <param", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "   return action_message\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow row = form.grdResults().getRows().newRow();\n\t\trow.setColTestName(orderInvestigationLiteVo.getInvestigation().getInvestigationIndex().getName());\n\t\trow.setColTestResult(orderInvestig", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt.x = pt.x + sw.ClientRectangle.Width;\n                pt.y = pt.y + sw.ClientRectangle.Height;\n                return pt;\n            }\n        }\n        /// <summary>\n        /// The state of this item.\n        /// </", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       return(maker.new_tab(self, cwd, profile))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( \"_\"+Guid.NewGuid().ToString( \"N\" ), managedType, marshalAttribute, arraySize ) );\n                }\n                else {\n                    string typeFragment = nametypeFragments[0];\n                    string", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t\t}\n\t\t}\n\t\tpublic bool IsByRef {\n\t\t\tget {\nNext line of code:\n\t\t\t\treturn base_type !=", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"sender\"></param>\n        /// <param name=\"args\"></param>\n        /// <returns", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.context = context\n\n    def __getattr__(self, name):\n        return getattr(self.context, name)\n\n    def __setattr__(self, name, value):\n        setattr(self.context, name, value)\n\n    def __delattr__(", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.vbox5.Add (this.hbox3);\n\t\t\tglobal::Gtk.Box.BoxChild w28 = ((global::Gtk.Box.BoxChild)(this.vbox5 [this.hbox3]));\n\t\t\tw28.Position", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "               notebooks[\"board\"].page_num(key2gmwidg[child].boardvbox) = new_num\n                notebooks[\"board\"].set_tab_reorderable(True)\n                notebooks[\"board\"].set_tab_reorderable(False)\n", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Move-Tab-to-left-reverse\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo{\" +\n\t\t\t\t\"persistenceUnitName='\" + this.persistenceUnitName + '\\'' +\n\t\t\t\t'}';\n\t}\n}\n\n\nA: I'm not sure if this is the best way to do it, but here", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n  }\n  \n  protected void setFileReadOnly(boolean readOnly)\n  {\n    this.readOnly = readOnly;\n  }\n  \n  protected boolean isFileWriteOnly()\n  {\n    return false;\n  }\n  \n  protected", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.CausesValidation = true;\n\t\t\tthis.butAttach.Cursor = System.Windows.Forms.Cursors.Hand;\n\t\t\tthis.butAttach.DisabledIcon = null;\n\t\t\tthis.butAttach", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       return sb.toString();\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\t// Test with a key that is larger than block-size.\n\t\tpublic void R", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(m_d) {\n\t        case option_1:\n\t        case option_2:\n\t            sum += 4;\n\t            break;\n\t        case option_3:\n\t            sum += 4;\n\t            break;\n\t        default:\n", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      else\n        return java.GetValue(\"JavaHome\").ToString();\n    }\n    private static String GetJavaHome(String key, String defaultValue)\n    {\n      RegistryKey regKey\n        = Registry.LocalMachine.OpenSubKey(key);\n", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "   return [l, ]\n    def find_job(self, name, job=None):\n        # attempt to find job by 'Ansible:' header comment\n        comment = None\n        for l in self.lines:\n            if comment is not None:\n                if comment == name:\n", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "   modifier.vertex_group = modifier_json['vertex_group']\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           for(int i = 0; i < totalBuckets; ++i)\n            {\n                double bucketRank = mScoreRankBuckets.get(i);\n                if(rankCounts[i] == 0)\n                {\n                    double fraction = min", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertTrue(neighbors.contains(1));\n        assertTrue(neighbors.", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   self.parser(self.choice, cap=self.cap)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(63, 138);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);\n", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.Foreign", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               throw SDOException.referencedPropertyNotFound(targetNamespace, sdoTypeName);\n            }\n        }\n        return alreadyProcessed;\n    }\n    private void processIncludes(java.util.List includes) {\n        if ((includes == null) || (includes.size()", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate2', 'manager_id': False})\n    def holidays_validate_notificate(self, cr", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets and sets the delegate that checks whether the user wants to delete selected rows\n        /// </summary>\n        public CheckUserConfirmsDeletionDelegate CheckUserConfirmsDeletionDelegate", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return mixerLine.szName;\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = (ims.core.admin.domain.objects.CareContext) valueObject.getCareContext().getDomainObject();\n\t\t}\n\t\telse \n\t\t{\n\t\t\tvalue10 = null;\n\t\t}\n\t\tif", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "   def notify_darwin(title, text):\n    try:\n        import dbus\n        bus = dbus.SessionBus()\n        notify_obj = bus.get_object(\"org.freedesktop.Notifications\", \"/org/freedesktop/Notifications\")\n        method =", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tdouble pnEst = predictPositives ? p : estP;\n\t\t\tif (function.equals(WRACC)) {\n\t\t\t\tscore = cov * (pnRel / (p + n) - p", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashes(gitStash.Stashes);\n            }\n        }\n        private void Stashed_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            if (Stashed.SelectedIndex == 0)\n            {\n                Stashed.ComboBox", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm2_index).out_address != 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       return this.match((AuthScope)o);\n        return false;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode() {\n        return this.match(this).hashCode();\n   ", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}\n\nA", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\ts += \" \";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static String erstelleStringAusMehrerenSeriennummern(\n\t\t\tList<SeriennrChargennrM", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGenericType)value;\n\t\t\t\t\tbreak;\n\t\t\t", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "   if args.output_file is not None:\n        log.msg('Writing encrypted archive to: {}'.format(args.output_file))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.putb([134, ['CRC7: 0x%01x' % crc]])\n        # TODO: Decode all bits.\n        ### if len(self.read_buf) < 16:\n        if len(self.read_buf)", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "       return true;\n    }\n    return true;\n  }\n  private boolean r_R1() {\n    int among_var;\n    int v_1;\n    // (, line 73\n    // [, line 74\n    slice_from(\"i\");", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               if (cls != null)\n                {\n                    o = cls.newInstance();\n                    if (o instanceof SpyPlugin)\n                    {\n                        ((SpyPlugin)o).messageReceived(lcm, channel, dins);\n                    }\n                }\n", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   def _get_key_usage(self):\n        try:\n            current_key_usage = self.cert.extensions.get_extension_for_class(x509.KeyUsage)\n            current_key_usage = current_key_usage.value\n            key_usage", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tif (i != s.end()) {\n\t\t\t\t\tstill_there = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (still_there) {\n\t\t\t\t(*i)();\n\t\t\t}\n\t", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   # The following **must** hold according to entry condition about \n    # front and back sequence.)\n    assert X.end   <= 0x110000\n    assert X.end   > X.begin\n    result.append(Interval(X.begin, X.end", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\t}\n\t\t}\n\t}\n\tvoid Get() {\n\t\tif (la.kind == 1) {\n\t\t\tGet();\n\t\t\tif (la.kind == 1) {\n\t\t\t\tGet();\n\t\t\t}\n\t\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc_list.append(edi_doc)\n        return edi_doc_list\n    def edi_import(self, cr, uid, edi_document, context=None):\n        \"\"\"Overridden to import sale order line fields with the expected names\n          ", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS + \"sse.local.\");\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               nameMap.put(name,\n                               permissions = new ArrayList<PermissionEntry>());\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    private void assertEquals(AccessStatus expected,\n                                  AccessStatus actual)\n   ", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "       # This is a test, not a production code.\n        # It is not necessary to have a device.\n        # It is not necessary to have a device.\n        # It is not necessary to have a device.\n        # It is not necessary to have a device.\n        # It is", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   d = Device(deviceToken)\n    d.login()\n    d.explore(1, 1, 1)\n    d.fairyLose(1, 1)\n    d.fairyWin(1, 1)\n    d.fairy", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "   if (rv['alphaCoefficients'][0] != 0):\n        rv['alphaReference']['frequency'] = rv['alphaCoefficients'][0]\n        rv['alphaReference']['fluxDensity'] = rv['alphaCoefficients", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           m_ItemID = (int)m_Keys.Count;\n        }\n    }\n}\n\nA: I'm not sure if this is the best way to do it, but it works.\npublic class KeyRing : Item, IResource, IQuality\n{\n   ", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> iterator = devices.iterator(); iterator.hasNext();) {\n            String uinumber = iterator.next();\n            String name = devices.get(uinumber);\n            String recordPathEntry = Registry.getStringValue(registryBranchSingle[0],", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   return jobs.get(lastSeenVersion).run();\n\n    }\n  }\n\n  public static void setLastSeenVersion(Context context, int lastSeenVersion) {\n    TextSecurePreferences.setAppMigrationVersion(context, lastSeenVersion);\n    Version", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length > 1) {\n        Entry entry = new Entry(split[1].split(\"\\\\|\"), split[0], ignoreCase);\n        entries.add(entry);\n      }\n    }\n    return entries;\n  }\n}\n\n\n\n\n\n", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           if os.path.isfile(os.path.join(source_dir, sub_path, n)) and os.access(os.path.join(source_dir, sub_path, n), os.X_OK):\n                return n\n        return None\n\n\ndef Find", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   >>> from mapnik import Python, Layer\n    >>> datasource = Python('PythonDataSource')\n    >>> lyr = Layer('Python Layer')\n    >>> lyr.datasource = datasource\n    \"\"\"\n    keywords['type'] = 'python'\n    return CreateDatasource(key", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "   @property\n    def destination(self):\n        if self.want.ip is None and self.want.port is None:\n            return None\n        return self._values['destination']\nclass Difference(Difference):\n    def __init__(self, want, have=None", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   add_button = Button(**{\"ng-click\": \"vm.addKeyValue()\"})\n    variables_table = Table(\n        \".//div[@id='inputs_div']//table\",\n        column_widgets={\"Actions\": ActionsCell()},\n        row_id", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"ActionFactory: Unable to find action class: \" + className);\n        }\n        return result;\n    }\n    public void initialize() throws Exception {\n        // initialize the db manager\n        setDbManager();\n        // initialize the action factory\n        setActionFactory();\n", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n        self._test_", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "   return embedManifestDllAction(target, source, env)\ndef embedManifestExeCheck(target, source, env):\n    \"\"\"Function run by embedManifestExeCheckAction to check for existence of manifest\n    and other conditions, and embed the manifest by calling embedManifestEx", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           execute(errorStatus);\n        } catch (CoreException e) {\n            errorStatus[0] = recordError(errorStatus, e);\n        }\n        if (errorStatus[0] != null) {\n            MessageDialog.openError(shell, getProblemsTitle(), errorStatus", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\treturn super.init(smi, sdi);\n\t}\n\t\n\tpublic void dispose(StepMetaInterface smi, StepDataInterface sdi)\n\t{\n\t\tmeta=(AggregateRowsMeta)smi;\n\t\tdata=(AggregateRowsData)sd", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   assert f('..12:00', last) == (d(2014,1,31, 19,47), d(2014,1,31, 19,47))\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           if (samaxtime.Contains(\"s\") || samaxtime.Contains(\"m\") || samaxtime.Contains(\"h\"))\n                samaxime = samaxtime.Remove(samaxtime.Length - 1);\n            double dmaxxime = Utility", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "   session = self._get_session()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       assertThat(rc, is(true));\n        assertThat(pub.call(), is(true));\n        assertThat(sub.call(), is(true));\n    }\n}\n\n\nA: I'm not sure what you're trying to do here. \n\nYou'", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator()\n                    .getOnSendRequestAfterParameters()\n                    .contains(destination)) {\n                this.owner.getDecorator().onSendRequestAfter(r);\n            }\n            this.owner.getDecorator().on", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\treturn (value + 0x7F) / 0x80;\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "   self.fm.thisdir.vcs.add(one_file.path)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\tpublic void CreateInstance_StringString_String ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\", \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       repo = self._setup(da, Action.ACCEPTED, None)\n        self.assertEqual(repo.changesets.count(), 2)\n        avs = AppVersion.objects.all()\n        flagdata = flags4appversions(avs)\n        self.assert", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.send_message(PYMUMBLE_MSG_TYPES_MODUSERSTATE, userstate)\n            cmd.response = True\n            self.commands.answer(cmd)\n        elif cmd.cmd == PYMUMBLE_CMD_CHANN", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new PlayerGroupLeaderChangedEvent(group, player));\n        }\n    }\n    public static void changeLeader(PlayerGroup group, Player player) {", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "       self.update(self.colsize, outfile, formatter, hidden_c, squash_c)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column.quantity_renderer.set_property(\"text\", \"22\")\n        column._update_cell_based_on_data(None, column.quantity_renderer, tree_model, tree_iter)\n        self.assertEqual(\"22\", column.quantity_renderer", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof TagImpl) {\n\t\t((TagImpl) parent).doStartTag();\n\t    }\n\t} while (parent != null);\n\treturn EVAL_BODY_CONTENT;\n    }\n    /**\n     * set the value fontsize Font size", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               Dialog.Load(this);\n            }\n            catch (Exception ex) {\n                Log.Error(ex);\n            }\n        }\n        public void ParseStatus(InventoryEntry invEntry, string status)\n        {\n            XmlNodeList nl = element.SelectSingleNode(\"", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor ( int i = 0; i < m_", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add((ims.careuk.vo.beans.ChangeOfServiceVoBean)beans[i]);\n\t\t}\n\t\treturn coll;\n\t}\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           Version.VERSIONS\n        };\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tp.SetByteArray(Argon2Kdf.ParamExpc, pbExpc);\n\t\t\tp.SetUInt64(Argon2Kdf.ParamIterations, 3);\n\t\t\tp.SetUInt32(Argon2K", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\tif(cost > 0) {\n\t\t\tif(remove) {\n\t\t\t\tif(stack.getItem() instanceof IManaItem) {\n\t\t\t\t\tIManaItem manaItemSlot = (IManaItem) stack.getItem();\n\t\t", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "from django.conf import settings\n\n# Local Variables:\n# mode: python\n# indent-tabs-mode: nil\n# End:\n# vim:sw=4:ts=4:expandtab\n# vi:sw=4:ts=4:expandtab\n\n\n\n\n", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\"but Lights has {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       return true;\n    }\n    @Override\n    public int hashCode() {\n        final int PRIME = 31;\n        int result = super.hashCode();\n        result = PRIME * result + ((this.state == null) ? 0 : this.state", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.mRequest = requestFromCLCC(p.readInt());\n            dc.mResult = responseFromCLCC(p.readInt());\n            response.add(dc);\n        }\n        return response;\n    }\n    @Override\n    protected Object\n    response", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isApplication()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType().", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n        {\n            newVertices[x + ySizeP * x] = newVertices[x + ySizeP * x] = new Vector3(x * xPixelsPerTile, y * y", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tresult = client.add(testInt1);\n\t\t\t\n\t\t\tif (result == testInt1)\n\t\t\t{\n\t\t\t\tLog.i(TAG, \"doConnectionTest() returned \" + result + \" as expected\");\n\t\t\t\treturn", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn null;\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\nNext line of code:\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpublic void setBlock", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(name);\n        }\n        else\n            try {\n                out.writeBoolean(true);\n                out.writeObject(found);\n            }\n            catch (IOException e) {\n                logging2(e.toString());", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                   25,\n                    0,\n                    0, 0,\n                    pixel_x, pixel_y,\n                    Machine.visible_area, TRANSPARENCY_NONE, 0);\n                pixel_x += 6;\n            }\n", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                   .To3D()\n                                    .Distance(spell.From.To2D()) <= spell.Range &&\n                                    spell.Width\n                                    )\n                                {\n                                    result.Add(minion);\n                                }\n                            }\n", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       if (graph.isDefCollider(x, y, graph)) {\n            return true;\n        }\n        return false;\n    }\n    public static boolean existsInducingPathInto(Node x, Node y, Graph dag) {\n        if (x.getNodeType", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   var child = pop[i];\n                    if (child is PlaceBase)\n                        plcs.Push(child);\n                    else if (child.Name == Name)\n                        return child;\n                }\n            }\n            return null;\n        }\n        /// <", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.getFileId() == null) {\n            if (other.getFileId() != null) {\n                return false;\n            }\n        } else if (!this.getFileId().equals(other.getFileId())) {\n            return false;\n        }\n", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (m_Item.Map == mobiles[i].Map && mobiles[i].CanBeHarmful(from, false))\n                        {\n                            from.DoHarmful(from, mobiles[i], m_Item.MinDamage, m_Item", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(user, msg);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void MessageTo(PlayerMobile user, PlayerMobile to, string text)\n\t\t{\n\t\t\tInternalMessage(to, text);\n\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sUserId) {\n    return mock.getAvailCompoIds(sUserId);\n  }\n", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           final File selected = new File((String) mListView.getItemAtPosition(key));\n                            if (!selected.isDirectory()) {\n                                uris.add(Uri.fromFile(selected));\n                            }\n                        }\n                    }\n                    Intent intent =", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "       this.j.writeLock().lock();\n        try {\n            this.i.clear();\n        } finally {\n            this.j.writeLock().unlock();\n        }\n    }\n    public void close(PacketListener packetlistener) {\n        this.a(pack", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               z_value = z_dict[z_key][kk]\n                z_err_value = z_dict[z_key][kk+1]\n                z_value = float(z_value)\n                z_err_value = float(z_err_value)\n               ", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return getPluralizedIdentityDescription(context, recipients, resourceOne, resourceTwo, resourceMany);\n    }\n    return getPluralizedIdentityDescription(context, recipients, resourceOne, resourceTwo, resourceMany);\n  }\n  private static @Nullable String getPluralized", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "       env[\"PATH\"] = path.join(env[\"PATH\"], *extra_path)\n        env[\"LD_LIBRARY_PATH\"] = path.join(env[\"LD_LIBRARY_PATH\"], *extra_lib)\n        env[\"RUSTC\"] = path.join(self", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in iteritems(type_paths):\n                for test in tests:\n                    yield test\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compiledScript != null) {\n            compiledScript.setScript(null);\n            compiledScript = null;\n        }\n    }\n    private void trustedCompileAndCache(PrintStream outStream) throws Throwable {\n        AccessController.doPrivileged(", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override setting a timeout for a wrapped client adapter\n        /// </summary>\n        /// <param name=\"timeout\">The timeout in milliseconds</param>\n        protected virtual void ClientSetTimeout(int timeout", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "   transformed_grad = np.asarray(transformed_grad)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (caseInsensitive == true)\n\t\t{\n\t\t\treturn this.id.compareTo(((OrderInvestigationForStatusChangeVo)obj).id);\n\t\t}\n\t\treturn this.id.compareTo(((OrderInvestigationForStatusChange", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.size(), 2);\n    }\n    @Test(dependsOnMethods = \"shouldFindStacksWithSpecifiedTags\")\n    public void shouldFindStacksWithSpecifiedTagsAndSortedByName() throws Exception {\n        stacks[0].getTags().", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter parameter = new Parameter(CRAWL_DEPTH_KEY, depth);\n        parameter.setParameterFamily(pf);\n        crawlParameters.add(parameter);\n        //EXCLUSION REGEXP\n        parameter = new Parameter(CRAWL_EXCL", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tif (candidate.Name == pattern.Name)\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t\tunmatchedAttrs = VList<LNode>.Empty;\n\t\t\treturn false;\n\t\t}", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   if (colisionList.Any())\n                    {\n                        extendedWillHit++;\n                        extendedFarmLocation = colisionList.First().To2D();\n                    }\n                }\n                if (extendedWillHit >= q.UseOnLaneClear)", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.addContextMenu(contextMenu);\n\t}\n\n\tpublic ims.pci.vo.GpContractVoCollection listGpContractVoCollection()\n\t{\n\t\treturn super.listGpContractVoCollection();\n\t}\n\tpublic void set", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   if pattern in frozen_output:\n        return True\n    else:\n        return False\n\n\ndef package_in_frozen_output(package_name):\n    \"\"\"Is this package in the output of 'freeze'?\"\"\"\n    # Look for either:\n    #", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'name': \"Item\"\n        })\n        f = Form(self.env['test_testing_utilities.e'])\n        f.m2o.add(r)\n        f.m2o.remove(index=0)\n        f.m2o.remove(", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert simplify(Sum(x, (x, a, b)) + Sum(x, (x, b, c))) == \\\n        Sum(x, (x, a, b)) + Sum(x, (x, b, c))\n    assert simplify(Sum(x, (x", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tUnityEngine.WWW self=(UnityEngine.WWW)checkSelf(l);\n\t\t\tSystem.String a1;\n\t\t\tcheckType(l,2,out a1);\n\t\t\tvar ret=self.UnEscapeURL(a", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this.InitializeAdd(action, null, -1);\n            }\n            else\n            {\n                this.InitializeAddOrRemove(action, null, -1);\n            }\n        }\n        private void InitializeMoveOrReplace(NotifyCollectionChangedAction action, IList new", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            writer.close();\n            streamWriter.close();\n            objectToXMLDocumentTest(result);\n        }\n    }\n    public void testObjectToXMLStreamWriter() throws Exception", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                case Param.Campus2:\n                    c.Campus2 = Token2Csv();\n                    break;\n                case Param.Campus3:\n                    c.Camp", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "\t\t\t\tif (ide.imageOffset != 0) {\n\t\t\t\t\tide.imageOffset = reader.ReadUInt32 ();\n\t\t\t\t\tide.imageOffset += iconDir.idOffset;\n\t\t\t\t}\n#endif\n\t\t\t\t", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               // add the JSR to the successor of the RET blocks found in the subroutine\n                addReference(JSR, l.position);\n            }\n            // add the subroutine to the successor of the RET blocks found in the subroutine\n            addToSubroutine(id,", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\t\tthis.lblPosition.setText(\"Position: \" + position.toString());\n\t\t\tthis.lblPosition.setBackground(position.getColor());\n\t\t\tthis.lblPosition.setForeground(position.getColor());\n\t\t}\n\t\t\n\t\tprivate", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       currChannelValue = self._getCurrentValue( driver, \"Channel\" )\n        print \"Check decrease frame...\"\n        print \"oldChannelValue=\", lastChannelValue, \"newChannelValue=\",currChannelValue\n        self.assertEqual( int(currChannelValue), int(lastChannelValue", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       self.transport._expect_packet(MSG_KEXGSS_COMPLETE,\n                                      MSG_KEXGSS_ERROR)\n        \"\"\"\n        :param `Message` m: The content of the SSH2_MSG_KEXGSS_COMPLETE message", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           tree.setSelectionRow(0);\n            tree.setSelectionRow(0);\n            tree.setSelectionRow(0);\n            tree.setSelectionRow(0);\n            tree.setSelectionRow(0);\n            tree.setSelectionRow(0);\n            tree.setSelection", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "   return result\n\"\"\"\n\n\nclass smart_salary_simulator_payslip(models.Model):\n    _inherit = 'hr.payslip'\n    _description = \"Simulated payslip\"\n    _name = \"smart_salary_simulator.", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "   dVdzdOm.append(dVdzdOm(zi, chiarr[i], BDarr[i], rho_crit_arr[i], cosmo_h, frac=200.0))\n\n    #dVdzdOm = np.array([", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = font.getSize();\n        d.height = font.getSize();\n        return d;\n    }\n    \n    /**\n     * Initialize the fig\n     */\n    private void initialize() {\n        setFillColor(FILL_COLOR); // in case", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       #print \"theta_res is \",theta_res\n        #print \"phi is \",phi\n        #print \"flag is \",flag\n        #print \"theta_res is \",theta_res\n        #print \"phi is \",phi\n        #print \"flag is \",flag\n        #print", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.IsVisible = !window.IsVisible;\n\t\t}\n\t\tprivate void OnConnectionChanged(bool isConnected)\n\t\t{\n\t\t\tShowOrHide(_securitiesWindow);\n\t\t\tShowOrHide(_ordersWindow);\n\t\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "   self.SetBinContent(i + 1, j + 1, value)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "       if (query.getWith() != null) {\n            contact.firstServerMsgId = query.getFirst();\n        }\n        if (query.getPagingOrder() == PagingOrder.NORMAL) {\n            queryMessageArchiveManagement(protocol, query);\n       ", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "       rgb2I = (0.333333, 0.333333, 0.333333, 0,\n                 0, 0, 0, 0,\n                 0, 0, 0, ", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tret.add(null);\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected void addLog24(Iso7816.Response rsp, ArrayList<byte[]> ret) {\n\t\tif (rsp.isOkey()) {\n\t", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   yield textHandler(UInt16(self, \"file_crc32\", \"CRC32 checksum over the compressed file\"), hexadecimal)\n    yield Enum(UInt8(self, \"compression_type\", \"Type of compression\"), COMPRESSION", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       for app in apps:\n            path = app[0]\n            if path.endswith('/'):\n                path = path[:-1]\n            if path.startswith('/'):\n                path = path[1:]\n            if path.endswith('/'):\n                path = path[:-", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tif sys.argv[ 1 ] == '-h' :\n\t\t\tprint \"Usage: %s -f <field> -s <setfield> -t <train>\" % sys.argv[ 0 ]\n\t\t\tsys.exit( 1 )\n\t\tif sys", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(chance) < res.BaseChance)\n                res = EnhanceResult.Success;\n        }\n    }\n}\n\nA: I'm not sure if this is the best way to do it, but it works.\npublic static void Check", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           return rdltypes.UserEnum(entry_name, entry_value, displayname, desc)\n        return None\n    #---------------------------------------------------------------------------\n    def parse_integer(self, s: str) -> int:\n        \"\"\"\n        Converts a string to an integer\n", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"Fatal Error:\\nUnable to locate coniguration file for FOG Service!\");\n                    this.Close();\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Fatal Error:\\nUnable to locate coniguration file for", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        ///", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(this.trianglePoint == -1)\n                {\n                    insideBeginEnd = true;\n                    this.trianglePoint = textureHash;\n                }\n                else if(this.trianglePoint == textureHash)\n                {\n                    insideBeginEnd = true;\n                   ", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   if header not in exposedHeaders:\n        response['Access-Control-Expose-Headers'] = exposedHeaders + '; ' + header\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    oldDrivers.Add(d);\n                }\n            }\n            return oldDrivers;\n        }\n        /// <summary>\n        /// Enqueue a driver to the idle pool\n        /// </summary>\n       ", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   var = [var]\n\n\ndef _validate_variable(var, new_var, name, input_list):\n    \"\"\"Validate variable.\n    Input_list is used to determine if variable is a list.\n    \"\"\"\n    if isinstance(var, (list, tuple)):", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "st.set(\"chosen\",QUEST.getChosen())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tif (num1 > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tempty = num1.ToString();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tempty = \"", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           Attributes = new AttributeCollection(this);\n        }\n        public void Dispose()\n        {\n            if (_sCurProgram == this)\n            {\n                _sCurProgram = null;\n            }\n        }\n        public void Use()\n        {\n            if (_s", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       for reaction in self.reactions:\n            reaction._model = self\n        # update awareness\n        for reaction in self.reactions:\n            reaction._model = self\n        self.metabolites.update(self.metabolites)\n        self.genes.update(", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(TumourGroupListVo vo : (TumourGroupListVo[])beans)\n\t\t\tcoll.add(vo);\n\t\treturn coll;\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tif(current.x>left){\n\t\t\t\t\tcurrent.x = left;\n\t\t\t\t}\n\t\t\t\tif(current.y>cy){\n\t\t\t\t\tcurrent.y = cy;\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       mListView.setLayoutAnimation(set);\n        mListView.setOnScrollListener(this);\n        mListView.setOnItemClickListener(this);\n        mListView.setOnItemLongClickListener(this);\n        mListView.setOnItemSelectedListener(this);\n        mListView.", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.PPartnerInterestKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.PPartnerInterestKey;\n                }\n            }\n            ARow.PPartnerInterestKey = HighestNumber +", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tint[] \t\tscoresHet \t= new int[length];\nNext line of code:\n\t\tint[] \t\tscoresNonSol \t= new int[length];\nNext line of code:\n\t\tint[] \t\tscoresNonHet ", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
