{"pred": "   private transient KademliaRoutingTable routingTable;\n    private transient JKademliaRoutingTable routingTableJ;\n    private transient KademliaId nodeId;\n\n    private transient Timer timer = new Timer();\n\n    private transient JsonSerializer", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       mImmersiveSensorNavigation = new ImmersiveSensorNavigation(mSpectaculumView, this);\n        mImmersiveSensorNavigation.setOnSensorUpdateListener(this);\n\n        mImmersiveTouchNavigation = new ImmersiveTouchNavigation(m", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "\nclass Encryption1(Encryption):  # noqa: D101\n    input_widths = [8, 8]\n    output_widths = [8]\n    round_keys = [0]\n\n    @classmethod\n    def eval(cls, ci", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "   private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n    private StackEffect mStackEffect;\n    private ColorFilterEffect mColorFilterEffect;\n    private InterlaceEffect mInterlaceEffect;\n    private WatermarkEffect mWatermarkEffect;\n    private Immers", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "               new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n    }\n\n    private void queueEvent(Event event) {\n        this.eventQueue.put(event);\n    }\n\n    private boolean is", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    * \n     * @throws Exception\n     */\n    private void init() throws Exception {\n        if (taskFactory == null) {\n            taskFactory = new TaskFactory();\n        }\n        if (taskAPI == null) {\n            taskAPI = new TaskAPI(task", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\t\tcheck(passphrase, args.vaultLocation(), args.vaultName());\n\t\t} catch (AbortCheckException e) {\n\t\t\tprint(\"Abort check failed.\");\n\t\t\tSystem.exit(1);\n\t\t} catch (IOException e", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           //save deviceId to storage\n            DebugManager.getInstance().saveDeviceId(deviceId);\n        } catch (Exception e) {\n            e.printStackTrace();\n            Log.e(AbstractYasmeActivity.TAG, \"Error while registering device: \" + e.getMessage());\n", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   SignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);\n\n    assertEquals(new SignRequest(SERVER_CHALLENGE_SIGN, SERVER_CHALLENGE_SIGN_BASE64", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "       if self.global_config['acct_enable']:\n            self.uaA.recvEvent(CCEventFail((401, 'Unauthorized')))\n            self.state = CCStateDead\n        else:\n            self.uaA.recv", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "   def __eq__(self, other):\n        return self.uri == other.uri\n\n\nclass FlagList(Signature):\nNext line of code:\n    def __eq__(self, other):\n        return self.flags == other.flags\n\n\nclass ByteFlag(Signature", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "       process_children(cstr_node, ast_node)\n\n      else:\n        if cstr_node.kind == Expr.COMPARATOR:\n          cstr_node.rhs = convert_ast_constraint(ast_node)\n        else:\n          logger", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               intent.setDataAndType(Uri.parse(url), \"video/*\");\n                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static void", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       String message = mLocationSwitch.isChecked() ? \"I'm here\" : \"I'm not here\";\n        String email = mEmail.getText().toString();\n        String name = mName.getText().toString();\n        String avatarUrl = mAvatarUrl.getText", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "       # pylint: disable=line-too-long\n        self.assertEqual(\n            InterLayerPipeline(\n                InputLayer(shape=(10, 10, 3), dtype='float32'),\n                ConvLayer(3, 3, 3", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "   def __new__(cls, *args, **kwargs):\n        init_called = True\n\n    class User(BaseModel):\n        id = Column(String)\n        name = Column(String)\n        email = Column(String)\n        joined = Column(DateTime)\n\n   ", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "   continue\n\n\n@method(infix('!', bp=72))\ndef select_simple_map_operator_with_context(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    for context.item in context", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new Marble", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "   private static final ButterKnife.Action<View> SHOW_TRAILER = (view, index) -> view.setVisibility(View.VISIBLE);\n    private static final ButterKnife.Action<View> HIDE_TRAILER = (", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "               writeResponse(ADD_NOTIFICATION_LISTENER, correlationId);\n                log.tracef(\"[%d] AddNotificationListener - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, ADD_NOTIFICATION", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "       await wild.monitor_task\n        await wild.save()\n\n\n    @group(pass_context=True, category='Bot Info', aliases=[\"wild\"])\n    @channel_checks.wild_report_enabled()\n    async def cmd_wild", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "   if c['vocab_text']:\n        vocab_text = vocab.text_vocab\n    else:\n        vocab_text = None\n    # Load data\nNext line of code:\n    if c['vocab_def']:\n        voc", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": " assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.coeffs == (50.,)", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "               startActivityForResult(new Intent(getActivity(), ParticipantFortunateActivity.class), 0, BaseActivity.ActivityAnimation.SLIDE_LEFT);\n            }\n\n        }\n    }\n\n    private void showActionMode(int position){\n        getActionMode", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "   self.redlock.acquire()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "       ckresult(\n            getattr(\n                _dll,\n                \"FMOD_Sound_Get3DConeSettings\"\n                \"(FMOD_Sound *sound, FMOD_3DConeSettings *cone)\"\n            )(\n                self._sptr,", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "       self._calg = calg\n\n    @calg.register(str)\nNext line of code:\n        self._calg = calg\n\n    @calg.register(bytes)\nNext line of code:\n        self._calg = calg\n\n    def", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "       #cellsize = findCellSize(imgshape, cellShapeThreshold, verbose = verbose, out = out, **parameter);\n        #cellintensity = findCellIntensity(imgshape, cellShapeThreshold, cellIntensityMethod = getParameter(detectSpotsParameter", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "           perfectSound.play(GlobalConfiguration.feedbackVolume / 200f);}\n        if (accuracy == Accuracy.GREAT) {Next line of code:\n            greatSound.play(GlobalConfiguration.feedbackVolume / 200f);}\n", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "           while (transactionIterator.hasNext()) {\r\n                transactionIterator.next();\r\n                printer.print(transactionIterator.getNextTransaction());\r\n                System.out.println(print);\r\n                print.setLength(0);\r\n            }\r\n\r\n            if (startWithLastTransaction)", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "               return pgm;\n            }\n        }\n        return pgm;\n    }\n\n    /**\n     * Get an in memory representation of broken SQL query. This may require \n     * contacting druid for resolving dimensions Vs metrics for SELECT queries\n     * hence it also", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "               encryption_algorithm=EncryptionAlgorithm(\n                    EncryptionAlgorithmCoded.TWOKEY3DES,\n                    UsageEncryption.OSY,\n                ),\n                key_name='dummy',\n            ),\n            encryption_algorithm=EncryptionAlgorithm(", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                           regex.numCombExpCheck += env.numCombExpCheck;\n                        }\n                    }\n                } // USE_SUBEXP_CALL\n            } else {\n                regex.numCombExpCheck = env.numCombExpCheck;\n           ", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "url(r'^pipeline-config/(?P<pipeline_id>[0-9a-f-]+)/toggle$', staff_member_required(ajax_toggle_pipeline_config),\n    name=\"ajax-toggle-pipeline-config\"),\n\n\napp_pip", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\tif (levels.size () < 2) {\n\t\t\t\tnotEnoughData = \"Not enough data\";\n\t\t\t}\n\t\t\n\t\tpublic ResourceData (Meter meter, EnumMap<SRSLevel, String> tags, EnumMap", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "       self._storage_type = storage_type\n        return self\n\n\n#\n# DB OPEN\n#\n# Opens a database on the OrientDB Server instance. It returns the new id of the database.\n#\n# Request: (database-name:string) <-- before ", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   public <$Argument2> AndGivenTwoArguments<$SystemUnderTest, $Argument, $Argument2> andArgument(String description,\n            $Argument2 argument) {\n        return andArgument(functions.toCheckedSupplier(argument));\n    }\n\n    @Override\n   ", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "   try {\n      return process.waitFor().stdout().text().trim();\n    } catch (InterruptedException e) {\n      throw new IosDeviceException(this, e);\n    } catch (CommandFailureException e) {\n      if (expectedExitCodes != null && expected", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\ttextColor = Themer.getColor(contextRef.get(), R.attr.colorText);\n\t}\n\tprivate void setFontStyle() {Next line of code:\n\t\tfontStyle = Themer.getFontStyle(contextRef.get());\n\t}\n\tprivate", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessageBuilder builder = MessageBuilder.buildMessage(request.getRemoteUser(), request.getRemoteHost());\n\t\tMessage message = builder.toTextMessage(\"test\");\n\t\tXmlUtil.writeXml(response, message);\n\t\treturn message.toString();\n\t}\n\n", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   if not os.path.exists(file_path):\n        # 运行该 apk 文件\n        print u'\\n[INFO] 运行该 apk 文件'\n        subprocess.call([adb,\n                         \"-s\",\n                         get", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "       async def cmd_raidcity(self, ctx, *city_title):\n        \"\"\"\n        **!raid-city city-name** - creates a raid city channel.\n\n        **Organizer commands:**\n        **!add pokemon-or-egg gym-or", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertEqual(date_string_to_date(\"11/12/2012\"), datetime(2012, 11, 12, 15, 10, 3))\n\n\nclass DateToDateStringTests(TestCase):", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       config_actor = ConfigActor(config_file, work_dir)\n        config_actor.start()\n\n        database_actor = DatabaseActor(999, delay_seconds=2)\n        database_actor.start()\n        gevent.sleep(1)\n", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           // 分享到微信\n                            shareUtil.shareText(picture.getText_content().trim(), picture.getPics()[0], \"图片\");\n                            break;\n                        case 1:Next line of code:\n                            // 分", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\t\twrite_tm_filetype(opts.tmifile[0],\n\t\t\t\t\t\t\timage_array = positive_data,\n\t\t\t\t\t\t\tmasking_array = masking_array,\n\t\t\t\t\t\t\tmask", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "               OAuthActivity.class,\n                OAuthFragment.class,\n                OAuthActivity.OAuthFragment.class,\n                OAuthFragment.OAuthActivity.class,\n                OAuthFragment.OAuthFragment.class,\n                StreamsFragment.class,\n                HomeFragment.", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "   def parse(self, packet):\n        super(SignatureV4, self).parse(packet)\n        self.sigtype = self.int_to_sigtype(packet[0])\n        self.pubalg = PubKeyAlgorithm(packet[1])\n       ", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "     'no_members': Counter,\n      'load': Counter,\n      'avg_load': AverageTimer,\n      'min_load': Gauge,\n      'max_load': Gauge,\n      'avg_no_members': Gauge", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "   nc.send_message_with_protocol(protocol, 'hello world', 'hello world')\n\n        nc.send_message_with_protocol(protocol, 'hello world',\n                                       'hello world')\n        self.assertEqual(protocol.send_string.call", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       StatementExecution se = (StatementExecution) qe;\n        assertEquals(\"is statement\", \"INSERT INTO test_table (a, b) VALUES (?, ?)\", se.getQuery());\n        assertEquals(\"is statement\", \"a\", se.getParamByName(\"a\"));\n       ", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "       ds.getQueryExecutions().add(new StatementExecution());\n        Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void test", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "               continue\n            else:\n                yield device.sendLinkADRMessage(sendtime)\n                self._dequeueMACCommand(device.deveui, command)\n                self._queueMACCommand(device.deveui, command)\n                sendtime = time.time()", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "               function = FmllrRescoreFunction(args)\n                p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                procs.append(p)\n                p.start()\n                while True:\n                    try:\n                ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#\n# The PHY and MAC format are defined in the following tables.\n# The PHY format is defined in the IEEE 802.15.4-2006 standard.\n# The MAC format is defined in the IEEE 802.15", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       if (chat == null) {\n            chat = DatabaseManager.INSTANCE.getChat(getActivity());\n        }\n        if (chat == null) {\n            chat = new Chat();\n        }\n        chat.setId(getActivity().getIntent().getLongExtra", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "   parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\nNext line of code:\n    parameter = DataElementGroupField(type=ParameterTwostepTAN7)\n\n\nclass H", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "       json_dict['time'] = self.img_handle.current_time\n\n\n\n        # Save the platepar if it was loaded\n        if self.platepar is not None:\n\n            json_dict['platepar'] = self.platepar.toJSON()\n\n\n", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "       mPublicRoomsListList = new ArrayList<List<PublicRoom>>();\n        for (int i=0; i<mHomeServerNames.size(); i++) {\n            String homeServerName = mHomeServerNames.get(i);\n            List<PublicRoom> public", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "       chim_detect = ChimeraDetector(target_sequences, naming_ref)\n    else:\n        chim_detect = None\n\n    #initializing maf2synteny\n    m2s.set_debugging(args.debug)\n    m2", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new BlockLockerCommand(this), this);", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                   startMiPush();\n                }\n                stopHwPush();\n                Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"HWPush\":\n                startHwPush();\n                stopMiPush();\n", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<String>>(\n                SET_OBJECT_NAME));Next line of code:\n        registry.put((byte) (QUERY_EXP ^ R", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "   //create the tree\n    DefaultMutableTreeNode root = new DefaultMutableTreeNode(\"Root\");\n    DefaultMutableTreeNode vuln_node = new DefaultMutableTreeNode(\"Vulnerabilities\");\n    DefaultMutableTreeNode ip_node = new DefaultMutableTreeNode(\"IP Addresses\");\n", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "   private void createBreakdownChartPanelSingle(\n            int metric,\n            DatasetGenerator datasetGenerator,\n            List<GCStatsChartPanel> list) {\n        ChangingPieDatasetWithTTG dataset =\n                datasetGenerator.newPieDatsetWithTTG(metric", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       if (packet.getPacketType() == PacketType.EVENT) {\n            PacketType type = packet.getSubType();\n            if (type == PacketType.MESSAGE) {\n                // TODO: handle message\n                return;\n            }\n           ", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "       lMS.addTrack(appRtcClient.videoConstraints().videoTracks().get(0));\n      }\n      videoSource = new VideoSource(lMS.nativeStream);\n    }\n\n    {\n      logAndToast(\"Creating local audio source...\");\n     ", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "           contentValues.put(JobStorage.COLUMN_EXACT, -1L);\n            contentValues.put(JobStorage.COLUMN_FLEX_MS, -1L);\n            contentValues.put(JobStorage.COLUMN_FLEX_SUPPORT, ", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "\n    private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n   ", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "   logger.info(CORE_LOG_PREFIX + \"coopy init...done\")\n\n\ndef init_system(obj, basedir=None):\n    # a system object is needed in order to coopy work\n    if not obj:\n        raise Exception(CORE_LOG", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "   if self.config.debug_gdb:\n        DebugGdbSupport(self.config).setup_docker(docker_config)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "   final String[] SectionURLs = { \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\" };\n    final String[] BoardURLs = { \"0\", \"1\", \"2\", \"3", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "       super.onStart();\n        //bgTasksRunning.incrementAndGet();\n        //bgTasksRunning.getAndDecrement();\n        //bgTasksRunning.getAndSet(0);\n    }\n\n    @Override\n    public void onStop() {\n        super.on", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\tICompilationUnit compilationUnit = model.getCompilationUnit();\r\n\r\n\tif (compilationUnit == null) {\r\n\t\tthrow new IllegalStateException(\"No compilation unit available\");\r\n\t}\r\n\tIJavaElement[] elements = compilationUnit.getJavaElements();\r\n\tif", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       self.assertTrue(received_simulator_data_datagram(fdm_data))\n\n        self.assertTrue(received_simulator_data_datagram(fdm_data))\n\n        self.assertTrue(received_simulator_data_datagram", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "           showMessage();\n        }\n    }\n\n    private void showMessage() {\n        this.httpMessage = null;\n        if (httpMessage == null) {\n            return;\n        }\n        showResponse = true;\n        showRequest = false;\n        \n        if", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "   assert simple_table_status(description) == expected_status\n\n\n@pytest.mark.parametrize(\"table_status, gsi_status, expected_status\", [\n    (\"ACTIVE\", \"ACTIVE\", ready),\n    (\"ACTIVE\", None, ready),", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "   def __contains__(self, id_):\n        \"\"\"Check if the IFF file contains a specific chunk\"\"\"\n        return id_ in self.root\n\n    @convert_error(IOError, error)\n    def __getitem__(self, id_):\n        \"\"\"Get a", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r\n\r\n      return null;\r\n    }\r\n\r\n    visitProxOp(new VisitOrd3(n), query);\r\n\r\n    return null;\r\n  }\r\n\r", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EdgeTransformation(),\n                    new EmbossTransformation(),\n                    new InvertTransformation(),\n                    new MaskTransformation(0xff000000),\n                    new QuantizeTransformation(),\n                    new ThresholdTransformation(),\n                ", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "   self._decode_header()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "\n    api = BMUNITSEARCH(args.apikey)\n\n    if args.settlement_period is None:\n        print(\"A settlement period should be supplied using the --settlement-period flag (range 1 to 50).\"\n              \"Defaulting to", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titems.add( new GalleryAlbum( proxy.getAlbumId(), proxy.getAlbumName(), proxy.getAlbumCreator() ) );\n\t\t\t\tcontinue;\n\t\t\t} // if-else\n\t\t\titem = new GalleryImage( proxy", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   user_key = dump_key(user)\n\n    assert user_key == {\"id\": {\"S\": \"foo\"}}\n\n\ndef test_extract_key(engine):\n    user = User(id=\"foo\")\n    user_key = {\"id\": {\"S\": \"", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "         Colourizer.Color.WHITE.getCode(),\n          Colourizer.Color.RED.getCode()),\n        new Percentage(\" 100%\"),\n        new Fraction(\" 25%\"),\n        new StaticString(\" 25%\"),\n       ", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\t\tformFor(resource, fields);\n\t}\n\n\tpublic static Link link(Object href, Object title, Object target) {\n\t\treturn new Link(href, title, target);\n\t}\nNext line of code:\n\t\tlink(href, title, target);\n", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "           event = Event(e)\n            events.append(event)\n\n        return events\n\n    def get_event(self, event_id):\n        data = self.call_api(\"events/%s\" % event_id)\n        return Event(data)\n\n    def", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "           Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n    ", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           applyWallpaper();\r\n        } else if (id == R.id.menu_cancel) {\r\n            if (mWallpaper != null && !mWallpaper.isDownloading()) {\r\n                mWallpaper.cancel();\r\n            } else {\r\n                Toast.makeText", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": " private static final Logger logger = Logger\r\n      .getLogger(QsolToQueryVisitor.class.getPackage().getName());\r\n\r\n  public static final String PARAM_PREFIX = \"param:\";\r\n  public static final String PARAM_SUFFIX = \"", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\tARG_CHECKER.check(args,mode='converting')\n\n\t\t#Check if genotype file exists, if not create it\n\t\tif not os.path.isfile(args.genotype[0]):\n\t\t\traise ValueError", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "       self.beginning_datetime = datetime.datetime.strptime(filenameToDatetime(self.vid_path), '%Y%m%d%H%M%S%f')\n\n        # If no beginning time is found, try to find it from the file\n        if not", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "   # 3. background\n    bkgrnd = objs.PlatonicSpheresCollection(BKGVALS, 0.5, zscale=0.89)\n    objects += comp.ComponentCollection([bkgrnd], category='obj')\n\n   ", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tPacketDispatcher.sendPacketToPlayer(new PacketConfigSync(player), player);\n\t}\n\n\t@Override\n\tpublic boolean process(EntityPlayer player)\n\t{\n\t\tif (FOOD_MODIFIER_ENABLED)\n\t\t{", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "       comments = post.comments.all()\n        comments = comments.order_by('-net_votes')[:10]\n        comments = comments.filter(deleted=False)\n        comments = comments.filter(parent=None)\n        comments = comments.filter(user=", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tSelectionLayer.SelectionCell selectedCell = selectedCells.iterator().next();\n\t\t\t\t\t\tint row = selectedCell.getRow();\n\t\t\t\t\t\tint column = selectedCell.getColumn();\n\t\t\t\t\t\tlog.info(\"", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "       self._keyclass = val\n\n    def __init__(self, keyclass):\n        super(RevocationKey, self).__init__()\n        self._keyclass = keyclass\n\n    def __bytearray__(self):\n        _bytes = super(RevocationKey", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "       if is_processing_instruction_node(item):\n            yield item\n\n\n###\n# Node tests\n@method(function('node', nargs=0, label='kind test'))\ndef select_node_kind_test(self, context=None):\n    if context", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "from Timeline.Server.Constants import TIMELINE_LOGGER, LOGIN_SERVER, WORLD_SERVER, DIGGABLES, GOLD_DIGGABLES, DIGGABLE_FURN, GOLD_DIGGABLE_FURN\nfrom Timeline.", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "   I.update_field(P)\n    I.draw_ortho(im, g, cmap='bone', vmin=0, vmax=1)\n    I.register_events()\n    I.draw()\n\n    return im\n\ndef make_image_1", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "           return_queue = mp.Queue()\n            error_dict = mp.Manager().dict()\n            stopped = Stopped()\n            procs = []\n            for i, args in enumerate(jobs):\n                function = CompileInformationFunction(args)\n                p = Kaldi", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "   platepar.rotation_wrt_horizon = rotationWrtHorizon(platepar.RA_d, platepar.dec_d, platepar.pos_angle_ref, \\\n        platepar.lat, platepar.lon)\n\n\n    # Save the platepar", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLUMN_END_MS, 60_000L);Next line of code:\n        contentValues.put(JobStorage.COLUMN_FLEX_MS, 60_000L);Next line of code:\n", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       if (chatRem == null) {\n            chatRem = getActivity().findViewById(R.id.chat_settings_remove);\n        }\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        //", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "       fields = ['area', 'area_code', 'area_name', 'area_type', 'area_type_code', 'area_type_name']\n\n\nclass AreaFilter(django_filters.FilterSet):\n    name = django_filters.CharFilter(lookup_expr='", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           dataList.getOnScrollListener().onScrollStateChanged(dataList, SCROLL_STATE_IDLE);\n            dataList.getOnScrollListener().onScroll(dataList, firstVisibleItem, visibleItemCount, totalItemCount);\n            fab.setOnClickListener(null);\n", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "\n                transport.connect(context, manager, true).then(new Catch<Void>() {\n                    @Override\n                    protected Void doCatch(final Throwable cause) throws Exception {\n                        context.handleError(cause);\n\n                        return null;\n", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "               this.getClass().getName());\n        Log.d(this.getClass().getSimpleName(), \"Successful\");\n    }\n}\npackage de.fau.cs.mad.yasme.android.asyncTasks.server;\nimport android.content.SharedPreferences;\n", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "   private final static AtomicInteger INITIAL_STATE_INDEX = new AtomicInteger(0);\n    private final static AtomicInteger INITIAL_STATE_COUNT = new AtomicInteger(0);\n    private final static AtomicInteger INITIAL_STATE_MAX = new Atomic", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "   private int[] bottomMargins;\n    private List<String> urls;\n    private List<String> titles_checked;\n    private List<String> urls_checked;\n    private SimpleTextAdapter<String> textAdapter;\n    private DoubleListView doubleListView;\n    private Single", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": " assert isinstance(args.gps_sv[0].getMessage(), ConstMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "self.svg.n_tris += len(tris) / 3\n\nself.svg.n_tris += len(tris) / 3\n\nself.svg.n_tris += len(tris) / 3\n\nself.svg.n_tr", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\ta = Apps.parseApp(data);\n\t\t\t\tif (a != null) {\n\t\t\t\t\tapps.add(a);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (FileNotFoundException e) {\n\t\t", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "               if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       self.beg_alt = self.beg_vect.norm()\n        self.end_alt = self.end_vect.norm()\n\n        # Compute the great circle\n        self.gc = greatCircle(self.beg_alt, self.end_alt)", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol s = new FunctionSymbol(currentScope, ctx.ID().getText(), fhead.params, ctx.retType());\n\t\tclassInFile.addMember(new MFunction(s));\n\t}\n\n\t@Override\n\tpublic void exitFunction(@NotNull FunctionContext", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "   /**\n     * Called when the visitor first reaches a node with children.\n     * @return Determines whether the node's children will be visited.\n     */\n    boolean enter(Node node) {\n        return true;\n    }\n\n    /**\n     * Called", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "\n    private void registerParserFactories() {\n        parserFactories.add(new SpringParserFactory());\n        parserFactories.add(new SpringParserFactory());\n        parserFactories.add(new SpringParserFactory());\n        parserFactories.add(new SpringParserFactory());\n       ", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "       bind(GerritCheckoutProvider.class);\n        bind(GerritHttpAuthDataProvider.class);\n        bind(GerritPushExtension.class);\n        bind(GerritActionsModule.class);\n        bind(GerritDiffModule.class);\n       ", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                   if (zxid.contentEquals(getZxidFromName(snapshots.get(i).getName()))) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n                    i--;\r\n                }\r\n", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "\n\n    def _get_account_entries(self, account):\n        date_range = self.document.date_range\n        entries = self.document.accounts.entries_for_account(account)\n        entries = [e for e in entries if e.date in date_", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "   ]\n    #--------------------------------------------------------\n    # * File Name : segment.py\n    # * Created : 2012-04-16\n    # * Authors : Benoit Michau \n    # *--------------------------------------------------------\n    \n    # * Copy", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\tsearchList.setVisibility(View.GONE);\n\t\t\t\t\t\ttabLayout.setVisibility(View.GONE);\n\t\t\t\t\t\tscanButton.setVisibility(View.GONE);\n\t\t\t\t\t} else {\n\t", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "   coverslip = np.random.randn(POS.shape[0])\n    coverslip *= 0.02  # 0.02 +- 0.01 px coverslip\n    POS += coverslip\n    POS *= 1.2 ", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "       result, index = apply_fast_and(left.values, right.values,\n                                       left.index, right.index)\n\n    else:\n        result, index = apply_fast_and(left.values, right, left.index)\n\n    return Column(", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);\r\n                    if (request.getIcon() != null) {\r\n                        stringBuilder.append(\"\\nIcon: \")\r\n                                .append(request.getIcon().getUrl());\r\n                    }\r\n", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "       return SearchMenuPage(self._createSearchHistory(context))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "               if not checkFileExistence(pattern.datafile):\n                    errmsg += pattern.name + \":\" + pattern.datafile + \" does not exist.\\n\"\n                else:\n                    continue\n            elif mode == \"Calculate\":\n                if not checkFileExistence(", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "   serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'area', 'type')\n\n\nclass SectorTypeViewSet(ModelViewSet):\n    queryset = SectorType.objects.all()", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\t\n\t\t// ----- DDI2FO\n\t\tlogger.info(\"DDI2FO : START\");\n\n\t\t// ----- DDI2FO : Processing\n\t\tlogger.info(\"DDI2FO : Processing : START\");\n\n\t\t//", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       user.setPassword(password);\n                        user.setDeviceId(deviceId);\n                        user.setDeviceProduct(deviceProduct);\n                        user.setDeviceType(deviceType);\n                        user.setDeviceVersion(deviceVersion);\n                        user.setDevice", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "   url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),\n    url(r'^new$', login_required(NewPackageView.as_view(), login_url=LOGIN_URL),\n        name=\"packages-new\"),\n    url", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, BandBitEncoder)\n  assert encoder.bandIndexes[0] == NormalRateConfig.GPS", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "   return tg_helper._tgToDictionary(tg).get(0).get_entries()\n\n\ndef run_save_all_tiers(\n    tgs,\n    includeBlankSpaces=True,\n    minimumIntervalLength=None,\n    minTimestamp=", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "\n                    procs.append(KaldiProcessWorker(\n                        function,\n                        return_queue,\n                        stopped,\n                        self.vad_config,\n                        self.split_directory,\n                        self.segmentation_options,\n                        self", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "\n            dataset = UAV123(root_dir, version=version)\n\n            self._check_dataset(dataset)\n\n        # with meta\n        for version in ['UAV123', 'UAV20L']:\n            dataset = UAV123", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "   boolean isSet(FixTag tag);\n    Validity isValid(FixTag tag);\n\n    List<FixTag> getTags();\n    boolean has(FixTag tag);\n    boolean contains(FixTag tag);\n    boolean contains(FixTag tag,", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "           yield self._create_chunk(bounds, n_samples,\n                                     **self._kwargs)\n\n        # Use a chunker that works on the filtered data.\n        chunker = _chunk_filtered(self._create_chunker())\n        # The chunker takes care", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tprotected ExpansionResult expandQuery(FieldOptions fieldOptions, ExpanderOptions expanderOptions, AlvisIRQueryNode queryNode) {\n\t\t\treturn super.expandQuery(fieldOptions, expanderOptions, queryNode);\n\t\t}\n\t}\n\n\t@Override\n\t", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate Validator validator;\n\tprivate SchemaValidator schemaValidator;\n\t\n\tprivate static final String ENO_PARAMETERS_XSD = \"eno_parameters.xsd\";\n\tprivate static final String PIPELINE_XML = \"pipeLine.xml\";\n\tprivate", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (ADD_NOTIFICATION_LISTENER), new MarshalledResponseHandler<Void>(VOID));Next line of code:\n        registry.put((byte) (ADD_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       String[] words = content.split(\" \");\n                        int num = 0;\n                        for (String word : words) {\n                            if (word.equals(word)) {\n                                num++;\n                            }\n                        }\n                        if (num > ", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "       return lines\n\nThis is the output:\n>>> from pybufrkit import FlatTextRenderer\n>>> bufr_message = BufrMessage()\n>>> bufr_message.table_group_key = 1\n>>> bufr_message.sections.append(", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "       help=\"network delay [millisecond].\n        valid units are either: {}.\n        e.g. tcset eth0 --delay 1ms\n        \"\"\".format(\n            \", \".join([\", \".join(values) for values in hr.Time.get_text_un", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "       contacts = Contact.objects.filter(phone_number=self.phone_number)\n        contacts = contacts.order_by('-date_of_birth')\n        contacts = contacts.order_by('-date_of_sign_up')\n        contacts = contacts.order_", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   pipeline.apply(\"Read live projects\",\n        Read.from(new LiveProjectSource(org, knownGoodFiles, errorTag)));\n\n    // Filter out projects that don't have a policy.\n    PCollection<GCPProject> filteredLiveProjects = liveProjects.apply(\n       ", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       self.rule = RejectRequest(Engine(), \"RejectRequest\", DetectSoft404(), ContentHashSampling(), ContentSampling(),\n                                  ContentSimhashSampling(), \"http://example.com/\")\n\n\nclass RejectRequestTest(TestCase):\n", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "       conditions.append(Condition(AndCondition(\n            [Condition(operation, column=column),\n             Condition(operation, column=column)])))\n\n\ndef get_column_names():\n    return [\"c\", \"d\"]\n\n\ndef get_column_types():\n   ", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "       assert get_square_idx(1) == 1\n\n\nclass TestDutchNationalPartition(object):\n    \"\"\"\n    Question 6.18\n    \"\"\"\n\n    def test_basic_example(self):\n        assert dutch_national_partition(1", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "\n    private final Testprio testprio;\n\n    private final Settings settings;\n\n    private final HashMap<IType, Vector<IMethod>> methodMap = new HashMap<IType, Vector<IMethod>>();\n\n    private final HashMap<IType, Vector<IMethod>>", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "   self.next_sink.AsyncProcessRequest(\n      sink_stack,\n      msg,\n      stream,\n      headers\n    )\n)\n\n  def AsyncProcessRequest(self, sink_stack, msg, stream, headers):\n    \"\"\"Process a request message, stream,", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate int pageNumber;\nNext line of code:\n\tprivate int pageNumber;\nNext line of code:\n\tprivate int pageNumber;\nNext line of code:\n\tprivate int pageNumber;\nNext line of code:\n\tprivate int pageNumber;\nNext line of code:", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "     files = new StableList<Path>();\n      if (docerConf.moduleDocSourcePath().isPresent()) {\n        files.appendAll(docerConf.moduleDocSourcePath().get());\n      }\n      if (docerConf.moduleDocTestPath().isPres", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "\n    def consultar_numero_sessao(self, codigo_uf):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_numero_sessao`.\n\n        :return: U", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPEAKER_ACTION_", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "   gitc_utils.SetGitcConfig(git_trace2_event_log)\n\n    if name in self.commands:\n      cmd = self.commands[name]\n    elif name in self.commands['help']():\n      cmd = self.commands['help']()\n", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   @Named(\"app\")\n    Application provideApplication(Application app) {\n        return app;\n    }\n\n    @Provides @Singleton\n    Settings provideSettings() {\n        return new Settings(app);\n    }\n\n    @Provides @Singleton\n   ", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "       Assert.assertThat(ds, totalQueryCount(3));\n        // ...\n\n\n        queryExecutions.clear();\n        queryExecutions.add(getMockInsertQueryExecution());  // insert\n        queryExecutions.add(getMockUpdateQueryExecution());  // update\n       ", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "       return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {\n        return new SvnJavaBranchCommand();\n    }\n\n    /**\n     * {@", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       final VerifierProperty verifierProperty = new VerifierProperty(\"Verify\");\n        verifierProperty.addVerifier(new ValidSchemaNameVerifierImpl());\n        verifierProperty.addVerifier(new RemoteFilesExistVerifierImpl());\n        verifierProperty.addVerifier", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           Toast.makeText(getActivity(), \"Login failed\", Toast.LENGTH_LONG).show();\n            showProgress(false);\n        }\n    }\n\n    public boolean yasmeDeviceCheck() {\n        SharedPreferences sharedPref = getActivity().getSharedPreferences(AbstractYas", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "    *\n     * @throws DrupalLoginException if there's an error logging in the user (e.g. username/password mismatch)\n     */\n    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "\n\n        for f in quirks:\n            if f.type == \"prefix\":\n                self.textInput.insertPlainText(f.quirk[\"value\"])\n            elif f.type == \"suffix\":\n                self.textInput.insertPlainText(f.", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "           (r'/logout', LogOutHandler),\n            (r'/login', LogInHandler),\n            (r'/register', RegisterHandler),\n            (r'/problems', ProblemHandler),\n            (r'/status', StatusHandler),\n            (r'/", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explan", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "               informationCriterion = null;\n        }\n\n        return informationCriterion;\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.prottest.facade.ProtTestFacade#computeInformation", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(ty1, ty2)\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"Turn an expression into a Fst.\n    \n    Arguments:\n    - `expr`: an expression\n    \"\"\"\n    e = to", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "   void inject(AudioBookManager audioBookManager);Next line of code:\n    void inject(DemoSamplesInstaller demoSamplesInstaller);Next line of code:\n    void inject(EventBus eventBus);Next line of code:\n    void inject(Resources resources);Next line of code", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "   private List<SliceValue> sliceValues;\n    private List<Expense> expenses;\n    private List<CreditPeriod> creditPeriods;\n    private List<CreditCard> creditCards;\n\n    //UI\n    private TextView mActiveCreditCardTextView;", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   response = Mock(settings={})\n    response.content_type = None\n    with pytest.raises(ResponseValidationError,\n                       match='Response validation failed. '\n                              'Response has no content-type'):\n        response.json()\n\n\ndef test_response", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\tpublic void enterRule(ParseTreeListener listener) {\n\t\tif (listener instanceof ConsoleCommandListener) {\n\t\t\t((ConsoleCommandListener)listener).enterRule(this);\n\t\t}\n\t}\nNext line of code:\n\tpublic void exitRule(ParseTreeListener listener", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "\n\n    def finished_processing(self) -> None:\n        \"\"\"\n        Stop the multiprocessing worker\n\n        Returns\n        -------\n        None\n        \"\"\"\n        self.finished_processing.stop_check()\n        self.finished_adding.stop_check", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "       PressureSensorResource,\n        \"/aircraft/sensors/pressure_sensor\",\n        resource_class_args=(sensors.pressure_sensor,)\n    )\n\n    api.add_resource(\n        PitotTubeResource,\n        \"/aircraft", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "\n        self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueFPS())\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsiDeg())\n\n        self", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "   CMD_OPTION_HELP_HELP_LINE,\n]\n\n\nINSTANCE_QUERY_HELP_LINES = [\n    'Usage: pywbemcli [GENERAL-OPTIONS] instance query INSTANCENAME [COM", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tprivate ChallengeInManager challengeInManager;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate CategoryInManager categoryInManager;\n\t@Resource\n\tprivate NewsInManager newsInManager;\n\t@Resource\n\tprivate HintInManager hintInManager;", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                           throw new AWSLambdaException(\"Error during operation: \" + t.getMessage(), t);\n                        }\n                        else if(exceptionClass.equals(SdkClientException.class)){Next line of code:\n                            throw new SdkClientException(\"Error during operation: \" + t.", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "                                      join_keyword=u'\\u0926\\u093f\\u0928\\u094b\\u0902')\n\n    def test_full_e2e_english_signup_and_cancel_flow_with", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": " protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationListener locationListener;\n  protected boolean isRunning = false;\n  protected boolean isRunningInBackground = false;\n  protected boolean isActive = false;\n  protected boolean isPassive = false;\n  protected boolean isP", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "   adb = getADB()\n    emulator = get_identifier()\n    print \"[INFO] Wait for emulator to load\"\n    args = [adb,\n            \"-s\",\n            emulator,\n            \"wait-for-device\"]\n    subprocess.call(args)\n", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "RRC_header = Bit('RRC_header',\n                bitlen=32,\n                val=0x00000000000000000000000000000000000000", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\tfaces_lh = np.asarray(faces_lh)\n\tfaces_rh = np.asarray(faces_rh)\n\tfaces_lh = faces_lh.astype(int)\n\tfaces_rh = faces_rh.astype(int)\n", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "       result.append(OPEN_BRACKET);\n    } else {\n      result.append(ON);\n      result.append(AS);\n      result.append(baseVariableName);\n      result.append(exp.getOperator());\n      result.append(exp.getR", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "       cacheService.storeCacheList(new CacheList(listName));\n      }\n    }\n  }\n\n  @FXML\n  public void deleteList(ActionEvent actionEvent) {\n    final Optional<String> listNameOption = Dialogs.\n        create().\n        title", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "   ]\r\n    def __init__(self, TI, Cause):\r\n        self.TI = TI\r\n        self.Cause = Cause\r\n        self.Type = 17\r\n        self.TypeName = 'SMS CP-DATA'\r\n       ", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                               TimeEntryOvertimeAggregation.class\n                )\n        );\n\n        tasksDl.getItemPropertyChangeListener(Project.class).setParameter(\"project\", project);\n        tasksDl.getItemPropertyChangeListener(Task.class).setParameter(\"project\", project", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "       }\n\n        if self._pkalg in _c:\n            self.signature = _c[self._pkalg]\n        elif self._pkalg == PubKeyAlgorithm.DSA:\n            self.signature = DSASignature\n        elif self._pkalg", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "                                 self._expansion_num, BoardInfo.BOARDTYPE)\n\n    @property\n    def expansion_name(self):\n        return ul.get_config_string(InfoType.EXPANSIONINFO, self._board_num,\n                                     self._", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "       self.key_size = read_u32le(f)\n\n        # read the refs\n        self.references = {}\n        for i in range(count):\n            ref = read_u16le(f)\n            key = read_u16le", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "\n            user = create_inactive_user(email, full_name)\n\n            # Save a link to the new user\n            save_link(request, user, form.cleaned_data['url'])\n\n            messages.success(request, _('Your invitation has been sent", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "\n        draft = await self.fetch_draft_for_channel(ctx.guild.id, ctx.channel.id)\n        if DraftStatus.value(draft.status) >= DraftStatus.value(DraftStatus.DRAFT):\n            return await Utilities", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "   ]\n\n\ndef create_order_book(market_pair_code):\n    \"\"\"\n    [\n        'BTC_BCH',\n        ...\n    ]\n    \"\"\"\n    order_books = {}\n    for market_pair_code in order_books:\n       ", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "           if item is not None:\n                yield item\n\n\n@method(nullary('.'))\ndef select_self_shortcut_with_context(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    if self.axis", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "   {\n      DataSource ds = new SHPDataSource(serverAddress.getHostName(), serverAddress.getPort());\n      Connection conn = ds.getConnection(NoCredentials.INSTANCE);\n      Command command = conn.createCommand(\"SELECT ?x ?y WHERE { this should be a real", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\tString type = elt.getAttribute(AlvisIRConstants.XML_SEARCH_EXPANDER_TYPE);\n\t\t\tif (type != null) {\n\t\t\t\ttextExpander = new QueryNodeExpanderFactory(type).getExpander();\n", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                   deviceMiToken = MiPushClient.getInstance().getMiPushToken();\n                    Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n        }\n\n        currentUserListView = (ListView) findViewById(R.", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "   private final KadConfiguration config;\n\n    private final int maxConnectAttempts;\n    private final int maxMessageSize;\n\n    private final int connectionTimeout;\n    private final int messageTimeout;\n\n    private final int maxMessageSize;\n\n    private int connectAttempt", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "               tablefmt = table_format\n            output.append(tablefmt(rows, numalign, stralign, headers))\n        if status:\n            output.append(status)\n\n    return output\n\n\ndef expand_table(table):\n    \"\"\"\n    Expand table and return", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "       return words_api(wordnik_api, token)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tpublic TaskListByJQLActivity(Context context) {\n\t\tsuper(context);\n\t\tctx = context;\n\t\tsetContentView(R.layout.tasklist_by_jql);\n\t\tlistView = (ListView) findViewById(R.id.task_list);", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "       handle.CloseHandle()\n\n        self.assertEqual(handle.handle, 0)\n\n    def test_create_event_invalid_handle(self):\n        handle = CreateEvent(bManualReset=False, bInitialState=False)\n        self.assertRais", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "       this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.vms = new SpringVms(restTemplate, root);\n        this.jobs = new SpringJobs(restTemplate, root, tasks, deployments);\n    }\n\n   ", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   return parserHolder.parse(currentAnnotatedElement.get(), roundEnv.getElementsAnnotatedWith(annotation));\n                })\n                .collect(Collectors.toList());\n        if (!parsedPaths.isEmpty()) {\n            LOG.debug(\"Found {} paths\",", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "   protected PageParser pageParser;\n\n    protected FetchResultHandler fetchResultHandler;\n\n    protected CrawlerRequestHandler crawlerRequestHandler;\n\n    protected CrawlerRequestHandler crawlerRequestHandler2;\n\n    protected CrawlerRequestHandler crawlerRequestHandler3;\n", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           actionPopupGroup.add(new AddKeyAction(editTableView.getTree()));\n            actionPopupGroup.add(new AddValueAction(editTableView.getTree()));\n            actionPopupGroup.add(new DeleteKeyAction(editTableView.getTree()));\n       ", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "   private GuiScrollingPanel channels;\n    private GuiPanel panel;\n\n    private GuiButton enable;\n    private GuiButton disable;\n    private GuiCheckbox auto;\n\n    private GuiButton channel;\n    private GuiButton add;\n    private G", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_BACK_CODE:\n                return new BtnBackLight();\n            case ConstantStr.FUNC_CLEAR_BACKGROUND_CODE:\n                return new BtnClearBackground", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "       Composite composite = toolkit.createComposite(form.getForm());\r\n        toolkit.makeFormSection(composite, Messages.configurationEditorSection);\r\n        _webAppTable = toolkit.createTable(composite, SWT.BORDER | SWT.F", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       type = Type(\"string\")\n        type.get_sample()\n\n        self.assertEqual(\"my_string\", type.get_sample())\n\n    def test_type_get_sample__return_default_sample(self):\nNext line of code:\n        type = Type", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "               new EventCommandHandler<>(CorrectionCommand.class, CorrectionEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStartTimeCommand.class, StartEvent::fromCommand, this::queueEvent));\n        command", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "       self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n        return self\n\n    def set_datasegment_name(self, _datas", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "   query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'oauth_token': settings.FLICKR_TOKEN,\n        'oauth_token_secret': settings.FLICKR_SECRET,\n        'f", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t\tfcpMessage = new FCPPutFailedException(\"Caught FCPBadFileException while inserting message\", e);\n\t\t\t\t} catch(FCPException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPException while inserting", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "       k = bytecode[k][0]\n      except IndexError:\n        break\n      cond_stack_size -= 1\n    # If there are still operators on the stack, then the condition is\n    # non-deterministic and needs to be split up\n    if cond", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "       int activeCreditPeriodId = -1;\n    CreditPeriod activeCreditPeriod = null;\n    int activeCreditPeriodIndex = -1;\n    int activeCreditCardIndex = -1;\n    int activeCreditPeriodAmount = -1;\n    int activeCred", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\nall_platform_slugs.extend(RELSTREAM_SLUGS)\nall_platform_slugs.", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\t\t\topenLocalPlace(place);\n\t\t\topenRating(rating);\n\t\t\topenFeedItem(feedItem);\n\t\t\topenCustomList(((CustomListsAdapter) view.getAdapter()).get(pos));\n\n\n\t\t\tview.getAdapter()", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "   def parse(self, ping_message: Sequence[str]) -> PingStats:\n        return self.__parser.parse(ping_message)\n\n\"\"\"\n.. codeauthor:: Tsuyoshi Hombashi <tsuyoshi.hombashi@gmail.com>\n\"\"", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           // get the messages from server\r\n            GetMessageTask getMessageTask = new GetMessageTask(chatId, chat.getId());\r\n            getMessageTask.execute();\r\n            latestMessageOnDisplay = new AtomicLong(0);\r\n        }\r\n        // if the latest message has", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tpublic Player player = new Player();\n\tpublic Player player = new Player(new AABB(0, 0, 0, 0, 0, 0));\n\tpublic TileRenderer tileRenderer;\n\tpublic TextureLoader textureLoader;\n\tpublic LevelGenerator levelGenerator", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "   account = account_for_facebook_user(fb_user, person=person)\n\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "       assertThat(qe, is(isBatch()));\n        assertThat(qe, is(isStatement()));\n        assertThat(qe, is(isBatchStatement()));\n        assertThat(qe, is(isStatementOrBatchStatement()));\n        assertThat(qe, is", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "   }\n    log(\"server response is: \" + responseTxt, null);\n    successful = false;\n    cancelUpload(responseTxt);\n  }\n\n  private void parseUploadResponse(String responseTxt) {\n    if (responseTxt == null) {\n     ", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "   logger.info(\"Reading original assembly points\")\n    original_assembly_points = [or_ap for aps in assembly_points_by_sources.values() for or_ap in aps]\n\n    logger.info(\"Merging assembly points\")\n    merged_assembly_", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "       GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n        \"/aircraft/sensors/ther", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "       fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n        inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def send_channel", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (level.isInstalled()) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tshowConfirm(\n\t\t\t\t\t\t\tgetString(R.string.install_kb),\n\t\t\t\t", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   private final WeeklyCaptionProvider weeklyCaptionProvider = new WeeklyCaptionProvider();\n\n    /**\n     * Caption format provider for the monthly view.\n     */\n    private final CalendarCaptionProvider calendarCaptionProvider = new CalendarCaptionProvider();\n\n    /**", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "       this.vms = new SpringVms(restTemplate, root, deployments);\n    }\n\n    @Override\n    public Info info() {\n        return info;\n    }\n\n    @Override\n    public Releases releases() {\n        return releases;\n    }\n", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "     (signerId, keyId) -> Lists.newArrayList(new VerifierProvider() {\n        @Override\n        public List<Verifier> getVerifiers(String signerId, String keyId) {\n          return Lists.newArrayList(new Verifier() {\n           ", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n\n    protected int mLayoutId;\n    protected int mDefaultLayoutId;\n    protected int mItemViewType;\n   ", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "               } catch (FilesNotFoundException e) {\n                    assertTrue(e.getMessage().contains(\"404\"));\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    fail(\"Unexpected IO Exception\");\n                }\n            }\n\t\t} catch", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "               }\n            });\n        }\n    }\n\n    @Override\n    public void foundRadioStationInfo(final DataRadioStation radioStation) {\n        DataRadioStation oldRadioStation = this.radioStation;\n        this.radioStation = radioStation;\n\n        if (oldRadio", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "   private DrawerLayout drawer;\n    private ActionBar actionBar;\n    private FragmentManager fragmentManager;\n    private FragmentTransaction fragmentTransaction;\n\n    private static final String TAG = \"MainActivity\";\n    private static final int DRAWER_OPEN = 1;\n   ", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                       ((CandyBarMainActivity) mContext).selectPosition(3);\r\n                        break;\r\n                    case WALLPAPER:\r\n                        ((CandyBarMainActivity) mContext).selectPosition(4);\r\n                        break;\r\n                    case OTHER:\r\n", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "       encoding = Default.ENCODING\n\n    if proxy:\n        proxy = msgfy.parse(proxy)\n        if proxy:\n            proxy = proxy.split(\":\")\n            proxy_user = proxy[0]\n            proxy_password = proxy[1]\n           ", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "       return None\n\n    def items(self, after=None, refresh=True):\n        \"\"\" Returns a list of :class:`~plexapi.media.Playable` objects. \"\"\"\n        if self._items is None:\n            self._loadData(self.key, method=self", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "       self.assertRaises(\n            TypeError,\n            _environment_to_string,\n            u\"e=f\",\n            u\"g=h\",\n            u\"a=b\",\n            u\"c=d\",\n            u\"e=f\",\n            u", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "\n  def _RunCommand(self, name, gopts, argv):\n    \"\"\"Run a subcommand.\"\"\"\n    cmd = self.commands[name](\n        repodir=self.repodir,\n        client=self.client,\n        manifest=self.manifest,", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               taskData.setRunStatus(TaskData.RUN_STATUS_SUCCESS);\n            } catch (Exception e) {\n                taskData.setResultData(null);\n                taskData.setState(TaskData.STATE_FAILED);\n                taskData.setRunStatus(", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       await r.handle(self.request)\n        self.assertRaises(RejectRequest, lambda: await r.handle(self.request))\n\n    @async_test()\n    async def test_reject_nonexistent(self):\n        r = RejectStatus", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       stuName = split[1].replace(\"同学\", \"\");\n        //用户的电话号码\n        stuTel = split[2];\n        //用户的邮箱\n        stuEmail = split[3];\n        //用户", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "\n        self.__device = device\n        self.__ifb_device = device\n        self.__ip_version = ip_version\n        self.__logger = logger\n        self.__tc_command_output = tc_command_output\n        self.__export_path = export_path\n       ", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "           if inv:\n                state[\"inventory\"] = [\n                    item.name for item in inv.items if item.name not in state[\"inventory\"]]\n        except AttributeError:\n            pass\n\n    def add_location_property(self, state: Dict[str", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "   if (n.f0.tokenImage.length() == 2) {\r\n      occurs = rfOpToOccur.get(n.f0.tokenImage.substring(0, 1));\r\n    } else {\r\n      occurs = opToOccur.get(order", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = true;\n\t}\n\t\n\tpublic void setPipelineGenerator(PipelineGenerator pipelineGenerator) {\n\t\tthis.pipelineGenerator = pipelineGenerator;\n\t}\n\n\tpublic", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "       try {\r\n            decoder = UnicodeDecoder.getInstance();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        try {\r\n            DataDirTransactionLogFileList dataDirTransactionLogFileList = new DataDirTransactionLogFileList(dataDir,", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "   self.ntp_setup()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "       cursorById.close();\n\n        // Test the basic content provider query\n        Cursor movieCursor = mContext.getContentResolver().query(\n                MovieColumns.CONTENT_URI,\n                null,\n                null,\n                null,\n                null\n        );\n\n        //", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "       DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications(self.inscrit", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "       self.assertEqual(etree_iter_children(self.elem), [self.elem])\n\n        self.assertEqual(etree_iter_children(self.elem), [self.elem])\n\n        self.assertEqual(etree_iter_children(self.elem", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\t\tsetContentView(R.layout.main);\r\n\t\t\tinitView();\r\n\t\t\tinitData();\r\n\t\t\tinitListener();\r\n\t\t\tinitOverlays();\r\n\t\t\tinitMarker();\r\n\t\t\tinitRefPointMarker();\r\n\t\t\tinitLocation", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                   ", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "\n\n\n\nclass Cisco3945SwitchCore(BaseCiscoSwitchCore):\n    def new_command_processor(self):\n        return EnabledCommandProcessor(\nNext line of code:\n\n\n\n\nclass Cisco3945XESwitchCore", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n  assert isinstance(config, NormalRateConfig)", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "       return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n\n    def consultar_numero_sessao(self, numero_sessao):\n        \"\"\"Sobrepõe :meth:`~satcfe.", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "   calculate_dict = dict(calculate_dict)\n\n    for subl_dof_idx, subl_dof_val in enumerate(subl_dof):\n        calculate_dict[v.T] = calculate_dict[v.T] + subl_d", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "   api.add_resource(FlightControlsResource, \"/flight_controls\",\n                     resource_class_args=(fdm.fdmexec,))\n\nThe above code is a bit more complex. It contains a function _add_fdm_resources\nthat is called from the main", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "import json\nimport os\nimport random\nimport time\nimport jsonlines\nimport yaml\nfrom abc import ABCMeta, abstractmethod\nfrom collections import Counter\nfrom montreal_forced_aligner.abc import MfaWorker, TemporaryDirectoryMixin\nfrom montreal_for", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "   public static final String TAG_EXTRA_TEXT = \"tagExtraText\";\n    public static final String TAG_EXTRA_CATEGORY = \"tagExtraCategory\";\n    public static final String TAG_EXTRA_TYPE = \"tagExtraType\";\n\n    private static", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final TimeUtil time = new TimeUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final NetUtil net = new NetUtil();\n\t\n\tprivate Util() {\n\t}\n\t\n\tpublic static Util getInstance() {\n\t\treturn instance;\n", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       return new ArrayList<>();\n    }\n\n    private void installActions() {\n        ActionManager actionManager = ActionManager.getInstance();\n        DefaultActionGroup group = new DefaultActionGroup();\n        actionManager.getAction(\"mongo.addServer\").registerCustomShortcutSet(\n                Action", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\t// container.H1(\"TodoApp\").InputNext(\"Search\");\n\t\t// container.H1(\"TodoApp\");\n\t\tcontainer.H1(\"TodoApp\").InputNext(\"Search\");\n\n\t\t// List with Li\n\t\tcontainer.Li(list =", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "               if(SAVE_FILE_TO_STORAGE) {\n                    saveToStorage(output);\n                }\n                else {\n                    openGallery(output);\n                }\n                if(output != null) {\n                    if(SAVE_FILE_", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "\n    public SongListFragment() {\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        if (savedInstanceState != null) {\n            mShowToolbar = savedInstanceState.getBoolean(STATE_SHOW", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   key_condition = ComparisonCondition(\n        operator=\"EQ\",\n        attribute=query_on.hash_key,\n        value=\"value\",\n        operator_alias=comparison_aliases[query_on.hash_key]\n    )\n\n    # Create the search\n", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCActivitySet gcActivitySet,GCActivity gcActivity) {\n        locker.doWhileLocked(new Runnable() {\n\n            public void run() {\n                addChart();\n            }\n        });\n    }\n\n    public void gcActivityNameAdd", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "\n    def get_model_list(self, left=False):\n        if left:\n            return self._df_manager.get_model_list(left=False)\n        else:\n            return self._df_manager.get_model_list(left=True)\n\n", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "\n\n    parser.parser.add_argument(\n        \"--reorder\",\n        dest=\"reordering_rate\",\n        default=0,\n        help=\"\"\"round trip packet reordering rate [%%]. the valid range is\n        from {:d} to {:d}. (", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "\n    private final static ILayout BORDER = new BorderLayout();\nNext line of code:\n\n    private final static ILayout FLOW = new FlowLayout();\nNext line of code:\n\n    private final static ILayout BORDER_FLOW = new BorderLayout();\nNext line of code", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "       void dateClicked(Date date);\n\n        /**\n         * Triggered when a day was clicked\n         *\n         * @param date\n         *            The date and time that was clicked\n         */Next line of code:\n        void dayClicked(Date date);\n\n", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "       self._db_type = db_type\n\n\n        self._append(( FIELD_STRING, self._db_type ))\n        return self\n\n    def set_user(self, user):\n        self._user = user\n        return self\n\n    def set_pass", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "           break;\n        }\n\n        case DISCONNECT: {\n            client.getBaseClient().schedulePingTimeout();\n            break;\n        }\n\n        case JOIN: {\n            client.getBaseClient().schedulePingTimeout();\n            Namespace namespace =", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ActionBarPullToRefresh.PullListener pull", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tList<PreProcessor> preProcessors = new ArrayList<PreProcessor>(Arrays.asList(pipeline.getPreProcessing().getPreProcessors()));\n\t\tpipeline.setPreProcessing(new PreProcessing(preProcessors));\n\t\tLOGGER.info(\"", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<KV<GCPResource, GCPResourceState>> liveStates =\n        pipeline.apply(\n            \"Read live data\",\n            Read.from(new LiveProjectSource(org, \"projects\", \"all\", \"all\")));\n    // Tag the state objects to", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "   return MyModel\n\n\n@pytest.fixture\ndef model_meta(model):\n    \"\"\"Return a clean model Meta so each test can mutate the model's Meta\"\"\"\n    return model.Meta\n\n\n@pytest.fixture\ndef model_instance(model", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "               self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,\n                                                          dim, vocab, lookup)\n\n\n        else:\n            self._def_reader = None\n\n        if standalone_def_", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "   private String _audiologistInfoString = \"\";\n    // Guarded by _lockObject.\n    private String _room;\n    // Guarded by _lockObject.\n    private String _userName;\n    // Guarded by _lockObject.\n    private String _userId;\n   ", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;\n   ", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n\n    RotateOut(RotateOut.class),\n    Rotate", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "       return self.render_to_response(self.get_context_data(**kwargs))\n\nclass UserCreate(UserBase, CreateView):\n    template_name = \"relevamiento/crear_user.html\"\n    success_url = \"/\"\n    success_message", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "\n        // TODO Fog\n\n        // TODO Fog\n\n        // TODO Fog\n\n        // TODO Fog\n\n        // TODO Fog\n\n        // TODO Fog\n\n        // TODO Fog\n\n        // TODO Fog\n\n        // TODO Fog\n\n", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\t\t\t\n\t\t\tif(this.handle == null) new ErrorJSON(\"Please open the Loom file first\");\n\t\t\tlong[] dim = this.handle.getDataSetInformation(\"/matrix\").getDimensions(); // Know the actual size of the array\n\t\t\tfloat[][]", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "\n    ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n\n}\n\n\n\n\n\n\npackage com.rashwan.reactive_popular_movies.", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t\treturn vals.size() > 0;\n\t\t} catch (final SocketViewException e) {\n\t\t\tthrow e;\n\t\t} catch (final SocketViewException e) {\n\t\t\tthrow e;\n\t\t} catch (final SocketViewException e", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "   cache_build_details_manager = CacheBuildDetailsManager()\n\n\nclass LanguageSetManager(ManagersMixin):\n    \"\"\"\n    Language Set Manager\n    \"\"\"\n    language_set_manager = LanguageSetManager()\n\n\nclass PipelineConfigManager(ManagersMix", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tlogManager.logInfo(this,\n\t\t\t\t\t\"Getting the endpoint from the service discovery file.\");\n\t\t\tEndpoint endpoint = serviceDiscoveryInfo.getMoreSuitableEndpoint(\n\t\t\t\t\tEndpointType.PRODUCTION);\n\t\t", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "       planilla_de_relevamiento = PlanillaDeRelevamiento.objects.all()\n\n        planilla_de_relevamiento = PlanillaDeRelevamiento.objects.filter(zona__in=request.GET.getlist('zona'))\n        planilla_", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "     self._cstr = root\n      return\n\n    cur = root\n    while not cur.is_none:\n      if cur.is_boolean:\n        self._cstr = cur\n        return\n\n      if cur.is_string:\n        self._cstr = cur", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": " private ActionSupportHandler<StartRecordingAction> startRecordingActionSupportHandler = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction.class);\n  private ActionSupportHandler<RedirectAction>      redirectActionSupportHandler      = new ActionSupportHandler<RedirectAction>(RedirectAction.class", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\t\tthrows PlayerOfflineException if the player is not online\n\t\t\tthrows PlayerPresentException if the player is already in a round\n\t\t\tthrows RoundFullException     if the round is full\n\t\t\t\t\t\t\t\t\t\t\t\n\tpublic Jo", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1024), [1023])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [123456", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "   return result\n\n@method(function('format-decimal', nargs=(2, 3),\n                 sequence_types=('xs:decimal?', 'xs:string', 'xs:string?', 'xs:string')))\ndef evaluate_format_decimal_function(", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item is not None:\n\t\t\t\tif row == 0:\n\t\t\t\t\treturn Qt.ItemIsEditable | Qt.ItemIsEnabled\n\t\t\t\telse:\n\t\t\t\t\treturn default_flags\n\t\texcept Exception as", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "\n        response = Hydrator(version1, versions, []).hydrate_object(object_dto, object1)\n        response = Hydrator(version2, versions, []).hydrate_object(object_dto, object2)\n        response =", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "         PipeReader reader = new PipeReader(catBytes, clientConfig);\n\n\n\n          FASTClassLoader loader = new FASTClassLoader(new TemplateLoader(catBytes, clientConfig));\n          FASTInputStream inputStream = new FASTInputStream(new FASTDecoder(catBytes,", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": " to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (2, )))\nNext line of code:\n  to_map_and_back(AFO, AmplitudePoly(Am", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "               containsString(\"\\\"_source\\\":{\\\"@id\\\":\\\"http://localhost:9200/csw-records\\\"}}\"));\n\n        //\n        // test querying\n        //\n        query = \"http://localhost:9200/\" + mapping.getIndex()", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "       }\n        if self._pkalg in _c:\n            self.pub = _c[self._pkalg](self)\n        else:\n            raise PGPError(\"Unknown public key algorithm: {:s}\".format(self._pkalg))\n\n    @pkalg.register", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tJPEParserManager.getInstance().registerJPEParser(new CSVParser());\n\n\t\tcache = new CacheListener();\n\t\tcache.start();\n\t}\n\n\tprivate", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                       res = Schema.get(\n                            new ExtMap().mput(Schema.InvokeKeys.ENTITY, context.get(Schema.InvokeKeys.ENTITY))\n                            .mput(Schema.InvokeKeys.ENTITY_KEYS, context.get(Schema.Invoke", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "   url(r'^user/new/$', new_user, name='new-user'),\n    url(r'^user/(?P<user_id>[-\\w]+)/edit/$', edit_user, name='edit-user'),\n    url(r'^user/(?", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                               stack.getPlaySession().test();\n                            }\n                        }\n                    }\n                });\n                dialogFragment.show(getActivity().getSupportFragmentManager(), \"test\");\n            }\n        }\n    }\n\n    @Override\n    public void onPause", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   private DropMenuAdapter dropMenuAdapter;\n    private CookBookAdapter cookBookAdapter;\n    private CookBookManager cookBookManager;\n    private List<SearchBean> searchBeanList = new ArrayList<>();\n    private ArrayList<String> list = new ArrayList<>();\n    private HashMap<String,String", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       obj.updateBuffImg()\n\n        # update block shape\n        obj.blockShape = BlockShapeUtil.getBlockShape(obj.block);\n        obj.blockShape.updateBlockShape(obj.block)\n\n        # update block widget\n        obj.blockWidget = obj", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "   assert isinstance(d1, core.Constant)\n\n\n        f = Difference(d1, d2)\n        assert isinstance(f, Difference)\n        assert isinstance(f.input_diff[0], core.Constant)\n        assert isinstance(", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\t\tpublic abstract Node transformRepetition(RepetitionNode node, Node newStart, Node newRep, Node newEnd);\n\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node);\n\t}\n\t\n\tprivate static Node getTransform(Node node,", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\t// Add the listeners\n\t\tPlugin.instance.getServer().getPluginManager().registerEvents(playerListener, this);\n\t\tPlugin.instance.getServer().getPluginManager().registerEvents(blockListener, this);\n\t\t// Load the config\n\t\tloadConfig();", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "       challenge = new Challenge(challengeData);\n    }\n\n    private void parseFailure(Element doc) throws IOException {\n        String condition = doc.getText();\n        LOGGER.warn(\"Failure: \" + condition);\n        failure = new Failure(condition);\n    }\n\n", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "\n\nclass TestSearch(unittest.TestCase):\n    \"\"\"Tests for `arxpy.smt.search.search`.\"\"\"\n\n    def setUp(self):\n        self.smt = arxpy.smt.search.Search(32, 1,", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "\n    private SongListAdapter mSongListAdapter;\n\n    private Playlists mPlaylists;\n\n    private LoaderManager mLoaderManager;\n\n    private LoaderManager.LoaderCallbacks<List<Song>> mSongListLoaderCallbacks;\n\n    private Toolbar", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "           mImmersiveSensorNavigation = new ImmersiveSensorNavigation(mSpectaculumView);\n            mImmersiveSensorNavigation.attach(mSpectaculumView);\n            mImmersiveSensorNavigation.activate();\n        }\n        if", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "       Bit('TFT', ReprName='Type of Field Transformation', Pt=4, BitLen=4,\n            Dict=ESMTransFlag_dict, Repr='hum'),\nNext line of code:\n        Bit('C', ReprName='Cause', Pt", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "           mArtist.setArtistName(mArtist.getArtistName() + \" \" + mArtist.getArtistName());\n            mArtist.setArtistName(mArtist.getArtistName() + \" \" + mArtist.getArtistName", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "self.num_jobs += 1\n\n\nclass MfaWorker(mp.Process):\n    \"\"\"\n    Multiprocessing worker for corpus loading\n\n    Attributes\n    ----------\n    job_q: :class:`~multiprocessing.Queue`\n", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t\t@Override\n\t\tpublic boolean addRemittUser(UserDTO user) {\n\t\t\treturn UserManagement.addUser(user);\n\t\t}\n\n\t@POST\n\t@Path(\"listusers\")\n\t@Produces(\"application/json\")\n\t@Override", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "   Observable<ApiPlan> apiPlan(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns information about the API plan belonging to the given API key.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"api-info\")", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   @Override\n    public void visit(LogMessage message) {\n      if (message.isError()) {\n        logger.log(Level.SEVERE, \"Error: \" + message.getMessage(), message.getException());\n      } else if (message.isWarning()) {\n       ", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   \"\"\"\n    Testing the Glasberg, Moore, Slaney example\n    \"\"\"\n    \"\"\"\n    Testing the Glasberg, Moore, Slaney example\n    \"\"\"\n    \"\"\"\n    Testing the Glasberg, Moore, Slaney example\n    \"\"\"\n    \"\"\"\n   ", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "   yield DataElement(tag, VR, value, value_tell, is_undefined_length=is_undefined_length)\n\ndef read_sequence_item(fp, is_implicit_VR, is_little_endian, encoding, offset):\n    \"\"\"Read", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   for (ICommentProcessor commentProcessor : commentProcessors) {\n      if (commentProcessor != null) {\n        commentProcessor.commit(document, proxyBuilder);\n      }\n    }\n  }\n\n  public ICommentProcessor getCommentProcessor(Class<?> interfaceClass) {\n", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   protected abstract YarrnAdapter<PatternShort> getAdapter();\n\n    @Override\n    protected void loadData(final int page) {\n        super.loadData(page);\n        getActivity().runOnUiThread(new Runnable() {\n            @Override\n            public void", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "   def flags_int(self, val):\n        self._flags = val\n\n    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self.flags = self.bytes_to_int(val)\n\n    def __init__(self", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "       self.textInput.setFocus()\n\n        self.textInput.returnPressed.connect(self.sentMessage)\n\n        self.textInput.returnPressed.connect(self.sentMessage)\n\n        self.chum.sendMessage(serverMsg)\n\n        self.", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "\ndef check_string(arg, type_, env):\n    arg = check(arg, env)\n    with env.errors.location(arg.location):\n        unify(arg.__type__, type_)\n    return arg\n\n\ndef check_number(arg, type_, env", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date1", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "   feature_matrix = _build_feature_matrix(datasets, comps)\n    if features is not None:\n        feature_matrix = features.get(phase_name, feature_matrix)\n    if feature_matrix is None:\n        raise ValueError(f\"No features for", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "   @Override\n    public void pausePlayerAndSHowVpaid(PlayerUIController controller,\n            PlayerAdLogicController componentController,\n            FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n        super.performWorkAndUpdatePlayerUI(fsmPlayer);\n\n", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            TemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8 || type ==", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   Call<String> getSuggestion(@Url String imageUrl);\n\n    @GET(\"suggest\")\n    Call<String> getSuggestion(@Url String imageUrl, @Query(\"limit\") int limit);\n\n    @GET(\"suggest\")\n    Call<String", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "       stream = Stream(model=model, engine=self)\n\n        if position == \"latest\":\n            stream.heartbeat()\n        elif position == \"trim_horizon\":\n            stream.move_to(\"trim_horizon\")\n        elif isinstance(position, Stream.", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "\n        self.plot_confusion_matrix(confusion_matrix, classes=data_set.label_map.keys(),\n                                    normalize=False,\n                                    title='Confusion matrix')\n\n        self.log.info(\"accuracy on %s: %", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate SubmissionServices submissionServices;\n\t@Resource \n\tprivate ChallengeServices challengeServices;\n\t@Resource \n\tprivate CategoryServices categoryServices;\n\t@Resource \n\tprivate BannedIpServices bannedIpServices;\n\t@Resource \n\tprivate CountryServices country", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "\npyorient/ogm/index.py\nclass Index(object):\n    def __init__(self, graph, key, value, is_unique=True, is_ascending=True,\n                 is_descending=True, is_case_insensitive=False):\n       ", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "       return decoder_inputs\n\n    @scoped_subgraph\n    def decoder(self) -> StandardRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the decoder input sequences, and is initialized with the final state", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "for slug in all_platform_slugs:\n    for engine in TRANSPLATFORM_ENGINES:\n        for relstream in RELSTREAM_SLUGS:\n            for slug in ZANATA_SLUGS:\n                for slug in", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   @Override\n    public boolean add(SelectorGroupNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SingleLineCommentNode", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\n\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       final int numberOfColumns = 8;Next line of code:\n        final int numberOfColumns = 7;Next line of code:\n        final int numberOfColumns = 6;Next line of code:\n        final int numberOfColumns = 5;Next line of code:\n", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "     while len(self._blocks) > 1:\n        node = self._blocks[0]\n        parent = self._blocks[len(self._blocks) - 1]\n        if has_true_false_branches(parent.edges) and \\\n", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.k, this.m);\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\tthis.tree.setTreeType(this.treeType);", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "   #\n    # @author Davide Brunato <brunato@sissa.it>\n    #\n    # type: ignore\n\"\"\"\nXPath 3.0 implementation - part 3 (functions)\n\"\"\"\n\nfrom .xpath30_helpers import FORM", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                       updateMenuEntries();\n                    }\n                }\n            });\n        }\n\n        @Override\n        public void onEvent(String eventType, String roomId, String eventId, String eventContent) {\n            if (eventContent.startsWith(\"m.room.name", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tprivate DDI32ToDDI33Preprocessor ddi32ToDdi33 = new DDI32ToDDI33Preprocessor();\n\n\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoop = new PoguesXmlInsert", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "       DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationEtatsPresenceMensuel(self, _):\n        site = self.GetSelectedSite()\n        date = str2date(self.", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "           H += crossmat(c - p) * crosstens(J_rot) * J_trans\n            H += crosstens(I) * dot(J_rot, crosstens(H_rot))\n            H += dot(I, J_rot) *", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "       if (queuedProjectResult != null) {\n            if (queuedProjectResult.getPattern() != null) {\n                View view = getView();\n                if (view != null) {\n                    view.setVisibility(View.VISIBLE);\n                    gauge_description", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "               new MigrateCommand(),\n                new RefreshCommand());\n        // Register economy\n        game.getServiceManager().setProvider(this, EconomyService.class, economyService);\n        // Register the virtual economy\n        game.getServiceManager().setProvider(this, EconomyService", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "       else:\n            _log.error('Invalid prior type.')\n            return None\n        # get the prior values from the dictionary or from the prior object\n        prior_values = prior.get('values', prior.get('prior_values', [0]))\n        prior_names =", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "   return Const(data=arg)\n  elif op == LOAD_ATTR:\n    return Ref(data=arg)\n  else:\n    # It's a reference to some variable\n    return Ref(data=arg)\n\n\ndef convert_ast_expr(ast_", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final Config config;\n\n\tprivate final EntityParser parser;\n\n\tprivate final Physics physics;\n\n\tprivate final SpriteBatch batch;\n\n\tprivate final PingPongEq eq;\n\n\tprivate final EntityControllerFactory factory;\n\n\tprivate final VirtualThread thread;", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMP:\n                    TempSensorView tview", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic List<AuthorWithBooks> authorWithBooks() {\n\t\tList<AuthorWithBooks> list = new ArrayList<>();\n\t\tResult<?> result = dslContext.fetch(\"SELECT AUTHOR.ID, AUTHOR.NAME, BOOK.ID, BOOK", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic SQLBatch(Class<T> rootClass, SQLQuery rootQuery) {\n\t\tsuper();\n\t\tthis.schema = new Schema(rootClass);\n\t\tthis.rootQuery = rootQuery;\n\t}\n\n\tpublic SQLQuery getRootQuery() {\n\t", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "       if app_info['packagename'].startswith('.'):\n            app_info['packagename'] = app_info['mainactivity']\n        \n        if app_info['packagename'] == 'de.robv.android.xposed.installer':\n            #", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "    */\n    Genotype parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return carrier information.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into carrier", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "               Symbol.typed(bar_type, 'bar'),\n                Symbol.typed(IntType, 'baz'),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n\n\ndef test_if():\n    inc", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "       PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, prepared());\n        assertThat(pe, isBatchPrepared());\n        assertThat(pe,", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\t\t\tself._geometry_dock.set_geometry(selection[0])\n\n\tdef on_tree_selection_removed(self, selection):\n\t\tif len(selection) == 1:\n\t\t\tif type(selection[0]) is Sketch:\n\t", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                           return new NotFoundException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                }\n                return new ApiException(cause);\n            }\n        };\n        mAdapter = new RestAdapter.Builder()\n                .", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t\tregisterRenderer(Token.class, new DefaultTokenRenderer());\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the expansion size factor.\r\n\t * \r\n\t * @param expansionSizeF", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute(elt, AlvisIRConstants.XML_SEARCH_LABEL_LOWERCASE, defaultCapitalize)) {Next line of code", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "   url(r'^(?P<pipeline_id>[\\w\\-]+)/(?P<action>start|stop|status|toggle|delete)$',\n        staff_member_required(PipelineDetailView.as_view(), login_url=LOGIN_URL),\n       ", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                       intent.putExtra(Extras.EXTRA_THUMB_URL, mWallpapers.get(position).getThumbUrl());\r\n                        intent.putExtra(Extras.EXTRA_NAME, mWallpapers.get(position).getName());\r", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "   client = oauth.Client(csr, access_token)\n\n\ndef signin_tumblr(request):\n    # Tumblr is not really a good place to ask for a token, since it doesn't\n    # really make sense to use a user'", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "               # Pointing_dir, pointing_magn = angle2magn(platepar, x_mean, y_mean, test_px_sum)\n\n                # Compute the vignetting and extinction loss for the mean location\n                # vignetting_loss, ext", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   grid_x = _gen_grid(options['density'], options['param_free'])\n    \n    # Calculate likelihood/posterior for each parameter combination\n    for i in range(0, len(grid_x)):\n        # Set up parameters for grid\n        param", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           Board.this.doubleDices();\n          }\n        else {\n          Board.this.rollDices();\n        }\n      }\n    });\n    rollBtn.setX(getX() + (boardbg.getWidth() - rollBtn.getWidth()) / 2", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "       for node in etree_iter_paths(root, 'b2/c2'):\n            print(node)\n\nResult:\nb2\nc2\nc2\nb2\nc2\nb2\nc2\nb2\nc2\nc2\nb2\n", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "       self.runner.add(ContentSampling(), with_child=True)\n\n        self.runner.add(ContentSimhashSampling(), with_child=True)\n        self.runner.add(SimilarPathGenerator(), with_child=True)\n        self.runner.add", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "\n    cfe = CFeCancelamento(\n            emitente=Emitente(\n                    CNPJ=_opcao('--emitente-cnpj'),\n                    IE=_opcao('--emitente-ie'),\n                    IM=_opcao", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "   List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return user profiles.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into user profiles\n     */Next", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           this.client.sendRequest(req);\n        } catch (IOException ioe) {\n            System.out.println(\"Failed to send signature request.\");\n            ioe.printStackTrace();\n            this.client.shutdown();\n        }\n        \n        // 5. Wait for", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           RotationVectorSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type ==", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate TeamLeaders teamLeaders;\n\tprivate TeamScheduleResponse teamSchedule;\n\tprivate TeamRosterResponse teamRoster;\n\tprivate TeamSummaryResponse teamSummaryResponse;\n\tprivate TeamLeadersResponse teamLeadersResponse;\n\tprivate Game game;\n", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "       AppliverySdk.Logger.log(\"sendFeedback: \" + packageInfo.packageName);\n\n        userFeedback.setPackageName(packageInfo.packageName);\n\n        if (userFeedback.mustAttachScreenshot()) {\n            userFeedback.setScreen", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "           object_index[obj.__class__] = key\n            table_index[table_name] = key\n\n        if not consistent:\n            logger.info(\"loading {} objects from {}\".format(\n                len(objs), \", \".join(get_table_name(c.__", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "               draw_art(key['fingerprint'])\n\n            print(f'{fingerprint}: {description} (created at {created_at})')\n\n    async def get_key(self, user, fingerprint):\n        backend = await self.open_backend(num_", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, Component", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "\n    def __init__(self, ip_sat, chave_cfe):\n        \"\"\"Constrói um objeto ``ClienteSATLocal``.\n\n        :param str ip_sat: Endereço IP do SAT.\n        :param str chave_", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "       self.assertEqual(node_document_uri(ElementTree.XML(xml_test)), 'http://www.w3.org/XML/1998/namespace')\n\n\ndef test_etree_iter_paths_function(self):\n    root = ElementTree.", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n                case START_DATE_DESC:Next line of code:\n                    Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "       self.worker.training_complete = True\n        self.logger.info(f\"Training completed for {self.identifier} in {time.time() - begin:.2f}s\")\n        self.logger.info(f\"Training completed for {self.identifier} in", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   private final String clientSecret;\n    private final SessionController sessionController;\n    private final StateController stateController;\n    private final OkHttpClient httpClient;\n\n    private final String clientId;\n    private final String clientSecret;\n    private final SessionController sessionController;\n    private", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   private final Errands errands;\n    private final Tasks tasks;\n    private final Jobs jobs;\n    private final Vms vms;\n\n    public SpringDirectorClient(RestOperations restOperations, URI root) {\n        this.restTemplate = new RestTemplate(", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "           if (_state.getConnectionState() != FittingConnectionState.NOT_CONNECTED)\n                throw new IllegalStateException(\"A fitting session is already running. Wait for NOT_CONNECTED state.\");\n\n\nThe above code is throwing an IllegalStateException at the following", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand( this );\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {Next line of code:\n        return new SvnJavaBranchCommand( this );\n    }", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   @Override\n    protected void onDraw(@Nonnull GuiScreen gui, int mouseX, int mouseY) {\n        super.onDraw(gui, mouseX, mouseY);\n\n        FontRenderer fontrenderer = gui.fontRenderer;\n\n        ILocation", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "       // new blackCall() : new blackPut(),\n          DATA[looptest], EPSILON, FiniteDifferenceSchemes.BACKWARD);\n        double[] d3Put = FiniteDifferenceFirstOrder.differentiate(callPut[looppc]", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "           VotingModule.class,\n            AthenaGM.class\n    };\n\n\n    /**\n     * Instantiate a ModuleLoader, and load all the modules\n     * @param plugin the AthenaGMS instance we're loading the modules for\n     */\n    public ModuleLoader", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    */\n    public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     * @param threadPoolSize thread pool size.\n     * @return {@link DownloadQueue}.\n", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " public MutableConfig init(MutableConfig config) {\n    return config;\n  }\n\n  @Override\n  public MutableConfig configure(MutableConfig config) {\n    return config;\n  }\n\n  @Override\n  public WatcherRegistry watch(Config config, Watcher", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    * @throws JMingoParserException {@link JMingoParserException}\n     */\n    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {\n        Validate.notNull(element, \"parseQuerySetConfigTag::element cannot be null", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "   if self.cur_stance.right_foot is not None:\n        right_foot_task = ContactTask(\n            self.robot, self.robot.right_foot, self.cur_stance.right_foot,\n            weight=contact_weight)\n       ", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "   BvNeg, BvNot, Extract, ZeroExtend, Repeat, Ite\n\n\ndef make_test_bitvector(n, op, bv):\n    \"\"\"Generate a test bitvector.\"\"\"\n    return bitvectify(bv, n,", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\taOutput.writeInt16(SegmentMarker.APP14.CODE);\n\t\t\taOutput.writeInt16(aJPEG.mICCProfile.getProfileLength());\n\t\t\taOutput.write(aJPEG.mICC", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "           if (type == HibiscusExportType.SAMMEL) {\n                sendSammellast(sl);\n            } else if (type == HibiscusExportType.ALLE_EINZEL) {\n                sendAllEinzel(sl);\n           ", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "def generate_pronunciations_arguments(\n    log_path: str,\n    dictionaries: List[str],\n    text_int_paths: Dict[str, str],\n    word_boundary_paths: Dict[str, str],\n    ali_paths:", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       ItemStack stack = new ItemStack(ItemLorePage.getItem(), 1, 0);\n        ItemLorePage.setLore(stack, LoreKey.fromLore(LoreLoader.getLore(category, ident)));\n        entityPlayer.addItemStack", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "   private static final DateTimeFormatter CURRENCY_FORMATTER = DateTimeFormatter.ofPattern(\"#,##0.00\");\n\n    private final AuthTokenDAO authTokenDAO;\n    private final CategoryDAO categoryDAO;\n    private final BudgetDAO budget", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(MiscUtil.randomNumber());\n\t}\n\n\tpublic Util() {\n\t\tLogger logger =", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n    FadeOutUp(FadingOutUp.class),\n\n    SlideInDown(SlideInDown.class),\n    SlideInLeft(S", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if issubclass(bvf_cipher, BvFunction):\n        problem = SearchRkCh(ch, key_der_mode=der_mode, enc_der_mode=der", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "           h5 =  LocalHost5\n\n\n\n\nclass HostContainerTest(unittest.TestCase):\n    def get_hosts(self):\n        \"\"\" Use local hosts. \"\"\"\n        class H:\n            h1 =  LocalHost1\n            h2 =  LocalHost2", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "           return command.startswith(TcSubCommand.LIST.value)\n\n        return [\n            command\n            for command in self.tc_command_output.command_list\n            if tc_command_filter(command)\n        ]\n\n    def get_command_history", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": " assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    * @param creditPeriodId the Id of the Credit period\n     */\n    public List<Expense> getExpensesFromCreditPeriod(int creditPeriodId) {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses =", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "   private CalendarController<MonthCalendarConfiguration, Calendar> monthController;\n\n    private CalendarController<MonthCalendarConfiguration, Calendar> monthController;\n    private MonthDayDecoratorFactory monthDayDecoratorFactory;\n\n    private MonthDayDecoratorFactory monthDayDecoratorFactory;\n", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "   my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(30) == [0] * 30\n\n\nclass TestGaussNoise(object):\n\n  def test_no_input(", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "               isinstance(t2, RecordMeta)\n            ):\n                t1.__instance__ = Record[field_refs(backref, t2.__items__)]\n                unify(t1, t2, backref)\n            else:\n                raise\n\n    elif isinstance(", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "       host,\n        region_id,\n        client_id,\n        account_id,\n        token,\n        refresh_token,\n        login_data,\n        blink_version=__version__,\n        debug=False,\n        debug_file=\"blinkpy.", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\texcept Exception as e:\n\t\t\tcol = index.column()\n\t\t\trow = index.row()\n\t\t\tprint(\"DocumentModel::flags\")\n\t\t\tprint(str", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "     self._log.exception('Exception serializing message.')\n      self._SendErrorMessage(msg.properties, ex)\n\n  def AsyncProcessResponse(self, sink_stack, context, stream, msg):\n    buf = BytesIO()\n    headers = {}\n\n    dead", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       // assertThat(out.toString(), startsWith(\"Runtime:\"));\n        // assertThat(out.toString(), contains(\"[remotely-observed-thread]\"));\n    }\n\n    @Test\n    public void jmxRemoteConnectViaCliWithThreadDumpNext", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       return new DrumStoreEntry<>(data, DrumOperation.APPEND_UPDATE);\n    }\n\n    private static DrumStoreEntry<String, String> createNewData(String auxiliaryData, DrumOperation op, String... val) {\n        InMemoryEntry<String,", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       return new RoxanaPropertiesMockBuilder().build();\n    }\n\n    private ResponseProcessorManager getResponseProcessorManagerForTest() {\n        return new ResponseProcessorManager(this.getRoxanaProperties(), this.getTranslator());\n    }\n\n    private RoxanaProperties", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self._SendMessage(self._ping_msg, self._ping_ar)\n\n\nclass SocketTransportSinkProvider(SocketTransportSink):\n  \"\"\"A SinkProvider that uses a socket to connect to a remote server.\"\"\"\n  def __init__(self, socket, service,", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "     assert freq2lag(v) == lag2freq(freq2lag(v))\n\n\nclass TestCached(object):\n  def test_cached_is_immutable(self):\n    f = cached(lambda x: x*2)\n    assert f", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "\n\n    @commands.group(pass_context=True)\n    async def config(self, ctx):\n        \"\"\"\n        Configuration management for Clembot\n        \"\"\"\n        if ctx.invoked_subcommand is None:\n            return await ctx.send(embed=Embeds", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   return numeric_equal(operands) if operands else numeric_not_equal(operands)\n\n\n###\n# Equality operator (==)\n@method('eq', bp=30)\n@method('ne', bp=30)\ndef led_equality", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setText(getResources().getString(R.string.welcome_string));\n\n        return header;\n    }\n\n    private void selectGroupItem(int groupPosition, long id) {\n        // Se maneja el evento por grupo...\n        int childPosition", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "           // Start the chat activity\n            Intent intent = new Intent(getActivity(), ChatActivity.class);\n            intent.putExtra(ChatActivity.USER_MAIL, selfUser.getMail());\n            intent.putExtra(ChatActivity.USER_ID, selfUser.get", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n\n        Assert.assertNotNull(response);\n        Assert.assertEquals(\"SUCCESS\", response.getTradeType());\n        Assert.assertNotNull(response.getOutTradeNo());\n        Assert", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "       List<Parameter> parameters = creator.create(KEY, STRING_PARAMETER_NAME_01, RANDOM_STRING_PARAMETER_VALUE_01);\n\n        assertNotNull(parameters);\n        assertEquals(1, parameters.size());\n        assert", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "\t\treturn readOperand().asCodeInt(d1);\n\t}\n\n    public SmallInteger readSmallIntValue(int d1) throws IOException {\n\t\tint d2 = in.read1();\n\t\treturn new SmallInteger(d1,d2);\n   ", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "\n        self.instance_types = instances.InstanceTypes(self)\n\n        self.quotas = quotas.Quotas(self)\n        self.root_history = root.RootHistory(self)\n        self.management = management.Management(self)\n        self.m", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "       if (Integer.parseInt(m.videoSetFrameRate.getText()) > 0)// set minimum\r\n        // to 1\r\n        {\r\n            // set frame rate\r\n            videoFrameRate = Integer.parseInt(m.videoSetFrameRate.getText());\r\n        }\r", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "           self._probe = probe\n        else:\n            self._probe = _probe_adjacency_list(**kwargs)\n        # Load a store.\n        self._store = SpikeDetektStore(tempdir=self._tempdir)\n        #", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "   @Override\n    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        final URI uri = Transports.buildPingUri(context", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "     self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def compute_conditions(self):\n    \"\"\"\n      Computes the constraints associated with each ``N_CONDITION`` node\n      in the CFG. This is lazily computed", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       if (isRunning) {\n            return;\n        }\n        isRunning = true;\n        if (getActivity() == null) {\n            return;\n        }\n        init();\n    }\n\n    @Override\n    public void onStop() {\n        super.on", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": " public void visit(final Column column) {\n    result.append(column.getName());\n  }\n\n  public void visit(final ExpSeq expSeq) throws QueryException {\n    final String baseVariableName = getVariableName(expSeq.getLhsValue(), null);\n   ", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tString input = new File(basePath + \"/input/survey/survey_01.xml\").getAbsolutePath();\n\t\t\tString output = new File(basePath + \"/output/survey/survey_01.xforms\").getAbsolutePath();", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "           self.assertEqual(\n                np.array([0, 0, 1, 1, 1, 1]),\n                DiscreteDistribution([[0, 0, 1, 1, 1, 1]]).draw(5),\n            )\n       ", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "       state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(VpaidState", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptString(final StringTag tag, final String value) {\n\t\tif (tag == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (tag.getType() == StringTag.Type.DECIMAL) {\n\t\t\tacceptDecimal", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "       self.assertEqual(\"Harvey\", replace_blank_name(name=u\"\\u0906\\u092a\\u0915\\u093e\", language=\"English\"))\n\n    def test_replace_blank_name_gujarati(self", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       expect(systemUnderTestMock.failWithParameter(GIVEN_STRING))\n                                .andReturn(true);\n                        mocksControl.replay();\n\n                        // WHEN\n                        boolean actualResult = givenSut(systemUnderTestMock)\n                                .", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "   def show(self, with_trans=False):\n        re, tr = '', ''\n        if self.ReprName != '':\n            re = '%s ' % self.ReprName\n        if self.is_transparent():\n            pass\n        elif not self._show", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "\n\n        # if the model is abstract, don't bind it\n        if model.Meta.abstract:\n            return\n\n        # don't create tables if we're skipping table setup\n        if skip_table_setup:\n            return\n\n        # make sure the model", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "       return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def enviar_dados_venda_cfe(\n            self,\n            chave_cfe,\n            dados_venda,\n            *args,\n", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "   engine.bind(\"foo\")\n\n    raise TypeError(\"Expected a model, got <class 'foo'>\")\n\n\ndef test_bind_multiple(engine):\n    \"\"\"Can't bind more than 1 model at once\"\"\"\nNext line of code:\n    engine.bind", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "   assert u6.dimensions == mass\n    assert u6.base_value == 1.0\n\n    # nonzero MKS conversion factor\n    u7 = Unit(\"kg/s**2\")\n    assert u7.dimensions == energy\n    assert u7.base_", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "\n\n    ['Verify instance command references --no, returns paths, explicit ns',\n     ['references', 'TST_Person.name=\"Mike\"', '--namespace', 'root/cimv2', '--no'],\n     {'stdout': ['\"root/cimv", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       loadModules();\n    }\n\n    private void initializeCurrencies() {\n        CurrencyRegistryModule.register(currencyEconService);\n    }\n\n    private void initializeFiles() {\n        currencyEconService = new CurrencyEconService(currencyManager);\n       ", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       \"\"\"\n        ckresult(\n            getattr(_dll, \"FMOD_Sound_GetTag\")(\n                self._sptr, index, byref(tag)\n            )\n        )\n\"\"\"\n        tag = c_void_p()\n        ckresult", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   @Override\n                    public void startNewOrderActivity(Account account) {\n                        startActivity(NewOrderActivity.newIntent(MainActivity.this, account.getId()));\n                    }\n\n                    @Override\n                    public void startSettingsActivity() {\n                        start", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "\n        resource = ThermometerResource(aircraft.instruments.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"],", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "   column = User.id\n    value = \"foo\"\n    expected_ref = \":v0\"\n    expected_action = actions.set({\"N\": \"foo\"})\n    expected_values = {\":v0\": expected_action.value}\n\n    ref, action =", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "\t\t\tif (downloadAction == 1) {\r\n\t\t\t\tif (url.contains(\"beatmap\")) {\r\n\t\t\t\t\tOsuBeatmap beatmap = null;\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tbeatmap = o", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "   if request.user.is_authenticated:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   @NonNull\n    Call<EmojiResponse> getEmoji(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of gifs to use in gif searching.\n     * Clicking on these gifs can perform searches with the", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "               of(mConnectionSuccessListener).ifPresent(ConnectionSuccessListener::error);\n                wifiLog(\"ERROR CONNECTING: \" + connectionErrorCode.name());\n        }\n    };\n\n    @NonNull\n    private final WifiStateReceiver mWifiStateReceiver =", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "           LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "\n        for (Card card : stack.getArchivedCards()) {\n            card.addListener(this);\n        }\n\n\n        for (Card card : stack.getCards()) {\n            card.addListener(this);\n        }\n    }\n\n    private void", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "def segment_vad(\n    vad_path: str,\n    segmentation_options: Dict[str, Union[float, bool]] = None,\n    use_energy: bool = True,\n    energy_threshold: float = 5.5,\n    energy_", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "   private final Vms vms;\n    private final Deployments deployments;\n    private final Jobs jobs;\n    private final Errands errands;\n    \n    private final SpringInfo springInfo;\n    private final SpringReleases springReleases;\n    private final SpringErrands", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       self._call_fmod(\n            \"FMOD_Sound_GetTag\",\n            index,\n            c_char_p(name),\n            c_int(1),\n            byref(tag)\n        )\n        return tag\n\n    def set_tag(", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "               section.end_of_message = True\n\n            )\n        else:\n            section.end_of_message = False\n        section.end_of_message = True\n        bit_writer.set_uint(\n            bufr_message.length.value,\n            buf", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "       form = ReportAbuseForm(request.POST)\n        moderator = request.user\n        site = get_current_site(request)\n\n        form = ReportAbuseForm(request.POST)\n        moderator = request.user\n        site = get_current_site(", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   @Override\n    public void print() {\n        this.print();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void print(final String paramMessage) {\n        this.print(paramMessage, System.out);\n", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "       // checking if the application is in a valid state\n        if (!factory.isValid())\n        {\n        \tfinalize(1);\n        }\nNext line of code:\n        // calling the main method of the facade\n        factory.main(args);\n    \t} catch", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.record(\n\t\t\t\ttropo.say(\"How are you today?\"),\n\t\t\t\ttropo.say(\"I am doing fine, thank you.\"),\n\t\t\t\ttropo.say(\"I am doing good, thank you.\"", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "           listaDeRespostas.getPropriedades().getNenvios() == 0) {\n            //Não é possível salvar resposta com nenhuma resposta.\n            return;\n        }\n        \n\t    if (arquivo == null) {\n", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onReceive(byte[] response) {\n\t\t\t\tProgramManager.getInstance().parseTrack(response);\n\t\t\t}\n\t\t});\n        \n        adapter = new PageViewPagerAdapter<ProgramTrack>(MainActivity.this);\n        adapter.setViews(Program", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   @Inject\n    FsmPlayerImperial player;\n\n    @Inject\n    StateFactory stateFactory;\n\n    @Inject\n    PlayerUIController controller;\n\n    @Inject\n    PlayerAdLogicController componentController;\n\n    @Inject\n    AdRetriever ad", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tappEvent.removeObserver(stage) ;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tlogger.info(\"Starting drive uploader\") ;\n\t\t\t\n\t\t\t// initialize the drive\n\t\t\tclient = new Drive", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "   String name = adapterName(type);\n    JavaFile javaFile = JavaFile.builder(processingEnv.getElementUtils(),\n        getPackage(type).getQualifiedName(), sourceVersion)\n        .addPackage(getPackage(type))\n        .addAnnotation(Inject.class)\n", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "           new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n\r\n        /**\r\n         * 打开/关闭通知栏消息\r\n         * @param enable 打开/关闭\r\n         */\r", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": " assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == -1\n\n\ndef test_parameters_msgtype3():\n  '''\n ", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "   if suffix:\n        path = f'{path}{suffix}'\n    return path\n\n@method(function('path', nargs=(0, 1), sequence_types=('node()?', 'xs:string?')))\ndef evaluate_path_function_with_string", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "   t = Table()\n    t.data = [d.copy() for d in self.data]\n    t.keys = self.keys[:]\n    t.index = self.index.copy()\n\n    return t\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               _isTyping = true;\n            }\n        }\n    }\n\n    private void addMessage(ChatMessage message)\n    {\n        synchronized (_lockObject)\n        {\n            _pendingMessages.add(message);\n            if (message.getSource()", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\t\tEXOG_A.append(dmy_mediator)\n\n\t\t\tEXOG_B.append(dmy_mediator)\n\n\n\t\t\tdmy_covariates = None\n\t\t\tEXOG_A.append(dmy", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "       assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n        assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n        assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n       ", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               Calendar calendar = Calendar.getInstance();\n                int year = calendar.get(Calendar.YEAR);\n                int month = calendar.get(Calendar.MONTH) + 1;\n                int day = calendar.get(Calendar.DAY_OF_MONTH);\n                // 如果", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GyroscopeSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   private SetOtherFragment setOtherFragment;\n    private MomoFragment momoFragment;\n    private Toolbar toolbar;\n    private TabLayout tabLayout;\n\n    private Context context;\n\n    private boolean isRootDown;\n    private boolean isChameleonNavbar;\n   ", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "       self.link.link_setup()\n\n\n    def init_logging(self):\n        self.log = logging.getLogger('')\n        self.log.setLevel(logging.DEBUG)\n        self.log.addHandler(logging.StreamHandler())\n\n    def n", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "   assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "       return self._get_resource(Webhook, \"\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "       // TODO(widdows): This should be replaced with a call to\n        // getApplicationComponent().get(ActivityLightLevelManager.class).\n        // This will be a better way to manage the light level manager\n        // and its state.\n        daggerComponent.get(ActivityLight", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "           non_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_ther", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "           IE_list(IE_list([Str('Identity', Pt=Identity(), Len=1),\r\n                    ]), **kwargs),\r\n            Str('MSCm2', Pt=MSCm2(), Len=1),\r\n            Str('PLMNList', P", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "       TcClassParser(self.__con).parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n    def __parse_tc_qdisc_shaping_rule(self, device", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "       result, index = apply_fast_eq(left.values, right.values,\n                                      left.index, right.index)\n\n    else:\n        result, index = apply_fast_eq(left.values, right, left.index,\n                                      right.", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            try:\n                return func(*args, **kwargs)\n            except SwaggerMappingError:\n                raise validation_error(\n                    ResponseValidationError(\n                        'Invalid request: no swagger", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
