{"pred": "\t\t\t\t((Participant)m_Participants[i]).CloseAllGumps();\n\t\t\t}\n\t\t}\n\t\tpublic void SendOutside( Mobile participant )\n\t\t{\n\t\t\tif ( participant.Mobile != m_Initiator", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_u, e_v, **data.copy())\n\t\t\t\n\t\t\tY_ = Y.copy()\n\t\t\tY_.add_edge(e_u, e_v, **data.copy())\n\t\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       # Open the test file for reading\n        a = Sndfile(ofilename, 'r')\n        nframes = a.nframes\n        buffsize = 1024\n        buffsize = min(nframes, buffsize)\n        buff = a.read_frames", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "# Please complete the code given below.\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue style = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", style.getName());\n\t\t\t\t\twriter.addAttribute(\"value\", style.getValue());\n\t\t\t\t}\n\t\t\t\t\n\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "       for a in self.answers:\n            ret += a.hint + \"\\n\"\n        return ret\nclass _AnswerData(_QAData):\n    def ask_string(self):\n        return \"Answer: %s\" % self.answer\n    def hint_string(", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           s.print(\"Certificate chain length = \" + chain.length);\n            s.print(\"  first cert: \");\n            for (X509Certificate cert : chain) {\n                s.println(cert);\n            }\n            s.println(\"***\");\n        }", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           sp = new JESpace(name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    @Override\n    public void close() {\n        close();\n    }\n    public void abort (Transaction txn)", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfloat top = pos + GAP;\n\t\t\tfloat bottom = top + height;\n\t\t\tif (Shopkeeper.", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       # return self.handler(environ, start_response)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       mark = \"setRepeated('%s');\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_id):\n        mark = \"unsetRepeated('%s');", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "           return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            return result\n    def action_create_folder", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsTrue (Same (a, b.Union (a)), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, b.Union (a)), \"!ReferenceEquals1\");\n\t\t\t// note: can'", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       for trust_manager in self.trust_managers:\n            trustManager.getAcceptedIssuers()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n    /**\n     * Finds the forward to the domain admin page.\n     *\n     * @param mapping The action mapping with possible destinations.\n    ", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "\n```\n\nI'm not sure what's going on here. \n\nThe code is trying to create a datastream pipe. \n\nThe first function, `setup_datastream_pipe`, is trying to create a pipe and a datastream protocol. \n\nThe", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = (int)store.GetValue (iter, columnBool2);\n\t\t\t\t\tif (jumpID == 1) {\n\t\t\t\t\t\toldPersonWeight = (double)", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMED(new ConfigFile<UUID, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(UUID id, ConfigurationSection conf)\n", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new StringFieldEditor(FONT, \"Font\", getFieldEditorParent()));\n\t\t\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               base.OnTargetFinish(from);\n\n\n\n                if (m_Owner.SpellTarget != null)\n                {\n                    m_Owner.SpellTarget.VirtualArmorMod -= m_Owner.VirtualArmorMod;\n                    if (m_Owner.", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self.autoflush = True\n\n\nclass Session(object):\n    \"\"\"A :class:`.Session` object is a context manager for a SQLAlchemy\n    :class:`.Engine` or :class:`.Connection`.  It is created by\n    instantiating a :", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) {\n\t\t\tfinal String name = field.getType().getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) {\n\t\t\t\tnamed", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   like ``r'/foo/*'`` in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if not self.request.path.endswith(\"/\"):\n", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t\tView v = GetActiveView ();\n\t\t\tif (v != null) {\n\t\t\t\tv.Render (writer);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   args = parser.parse_args()\n    WigleDownloader(args.user, args.password, args.coordfile, args.outpath)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Possible", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds.extend(android_builds(version, builds))\n    else:\n        builds.extend(android_builds(version, builds))\n        if mobile:\n            builds.append({'os': 'os_android',\n                           'os_pretty': 'Android',", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null) {\n\t\t\tstateBeansList = StatusBL.loadByProjectTypeIssueTypeAssignments(projectID, issueTypeID);\n\t\t} else {\n\t\t\tstateBeansList = StatusBL.loadAll();\n\t", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                if (argument.Value.ValueKind == SyntaxKind.IdentifierName && argument.Value.GetType().IsByRef) {\n                    toReplace[argument] = SyntaxFactory.Argument(SyntaxFactory.Identifier(memberList.Last", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       self.assertEqual(0, self._update_partition_id(0).user_partition_id)\n        # Set to second group configuration.\nNext line of code:\n        self.assertEqual(1, self._update_partition_id(1).user_partition_id)", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           tmp.Add(GetFontBaseType(fontDescriptor, subsetPrefix, GetToUnicode(parms)));\n            tmp.Add(GetCIDFontType2(fontDescriptor, subsetPrefix, parms));\n            PdfDictionary dic = new PdfDictionary(PdfName.FON", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\t// add this cell to the graph\n\t\t\t\t\t\tif (cgn == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// create", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<Bitmap>(callable);\n        task.addListener(new FutureTaskListener<Bitmap>() {\n          @Override public void onSuccess(Bitmap bitmap) {\n            bitmapReference = new SoftReference<Bitmap>(bitmap);\n            task = null;\n", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   prerequisite = NavigateToSibling('EditTags')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles, sequences);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               ScriptManager sm = ScriptManager.GetCurrent(Page);\n                sm.RegisterScriptControl(this);\n            }\n            base.Render(writer);\n        }\n        protected override void OnLoad(EventArgs e)\n        {\n            base.OnLoad(e);\n            if (!", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tNBTTagList list = compound.getCompoundList(\"Enchantments", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return \"Effect{\" +\n            \"probability=\" + probability +\n            \", scopes=\" + (scopes == null ? \"null\" : scopes) +\n            \"}\";\n    }\n}\n/**\n * The scope of an effect.\n *\n * @author Tux", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'admin',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "\n\ndef test_circular_reference_deltas_2():\n    self.circular_reference_deltas_2(Document, Document)\n    self.circular_reference_deltas_2(Document, DynamicDocument)\n    self.circular_reference_", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (!_tempIgnoredPaths.Contains(path))\n                {\n                    toScan.Add(path);\n                }\n            }\n            foreach (var path in ignored)\n            {\n                toScan.Remove(path);\n            }\n            foreach (var path in", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform(remappingFunction));\n", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       resbrains = pdt.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\n            objcommentslist.append({'depth':0,'object': contobj,'prev_id':None", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t\t}\n\t\tinternal byte m_X;\n\t\tinternal byte m_Y;\n\t\tinternal sbyte m_Z;\n\t\tinternal byte m_Hue;\n\t\tinternal byte m_Patch;", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   channelUri = String.Format(\"sip:regionID@{0}\", m_freeSwitchRealm);\n                    parcelVoiceInfo = new LLSDParcelVoiceInfoResponse(\n                        String.Format(\"sip:regionID@{0}\", m_", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tMessageBox.Show(\"Invalid Date\", \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriods.Update(PayPeriodCur);\n\t\t\tDialogResult=DialogResult.", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column_", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   # FIXME This code is shared amoung other logic.auth files and should be\n    # somewhere better\n    model = context['model']\n    # Check if this is a package, and if so, ignore the groups.\n    if 'package_id' in data_dict:", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tint parentOutcome = outcomes[parentIndex];\n\t\t\t\t// assigning outcome\n\t\t\t\texample.setValue(predictionAttribute, parentOutcome);\n\t\t\t\t// calculating confidences\n\t\t\t\tdouble parentConfidence = Math.pow", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new[] { new SearchResults() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = codePoint << 10;\n            codePoint += string.charAt(offset++);\n         }\n         if ('\\uDC00' <= codePoint && codePoint <= '\\uDFFF' && offset < strlen) {\nNext line of code:\n           ", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "       return AccessionNumberUtil.matchExistingStudyFormName(accessionNumber, studyFormName, existingRequired);\n\n        // existingRequired is false => can use the existing accessionNumber\n        if (!existingRequired) {\n          return ValidationResults.SUCCESS;\n       ", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != ModData.Manifest", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(((ims.core.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionListVoBean)beans[x]).build", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'date':\n    date()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'donate':\n    donate()\nelif prnum == '':\n    xbmc", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  return extraParams, pD, plotName\n  #Get plotname\n  plotName = pD[ 'plotName' ]\n  del( pD[ 'plot", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (Info.BuildingLimits == null || Info.BuildingLimits.Count == 0)\n\t\t\t\treturn;\n\t\t\tvar rallyPoints = Info.BuildingLimits.Where(x => x.Value > 0).To", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       // Update the plan with the new plan\n        // We need to copy all of the data from the plan to the statement\n        // This is a bit of a pain since we have to update all of the\n        // partitioning information as well.\n        m_currentPlan = plan;\n       ", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(141, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = parity;\n\t\t\tdcb.DataBits = data_bits;\n\t\t\tdcb.StopBits = bits;\n\t\t\tdcb.f", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=admin)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n    def test_user_with_cobrand", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    _keep_tempdir = args.keep_tempdir\n    #print \"args is\", args\n    unittest.main()\n\n\nif __name__ == '__main__':\n    main()\n\n\n# pylint:", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tnewListIndex = newList.index(self.newAPList[currentListIndex])\n\t\t\t\tif newListIndex == -1:\n\t\t\t\t\tnewList.append(self.newAPList[currentListIndex])\n\t\t\t\t\tnew", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               return new RectangleF(x * fontX, y * fontY, fontX, fontY);\n            }\n        }\n        \n        /** Gets the barcode as an image.\n        * @param font the font to use\n        * @param fontSize the font size\n", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return ArrayUtils.toPrimitive(results);\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-185.23, +360.0, 73.123)\n        # TODO: we should really test the results of the interpolation\n        # against a known result.\n        sample_points = [\n            (\"", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetText(currPacket.Frame.ToText());\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\nNext line of code:\n", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "           set { _numValues = value; }\n        }\n    }\n}\n\n\n// End of file.\n\n// Copyright (C) 2006-2019 Esper Team. All rights reserved.\n// http://esper.codehaus.org\n//", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           // \n            // DummySolutionExplorer\n            // \n            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   def nullFunction( self, functionName, dll=None, resultType=ctypes.c_int, argTypes=(), doc=None, argNames=(), extension=None, deprecated=False ):\n    def wrapFunction( self, func ):\n        \"\"\"Wrap a function with", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           baos.write(emptyStreams.length());\n            baos.write(emptyStreams);\n            header.write(baos.toByteArray());\n        }\n    }\n    private void writeFileEmptyFiles(final DataOutput header) throws IOException {\n        boolean hasEmpty", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   alphaLevel = (int) ((double) alphaLevel + (double) rampDelay);\n                }\n                if (rampDelay > 0)\n                    alphaLevel = (int) ((double) alphaLevel + (double) rampDelay);\n                if (alphaLevel >", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_removable_if_max", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "               if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, can", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       f.writelines(['F) ', str(oversamp), '\t\t\t# PSF oversampling '\\\n                      ' factor\\n'])\n        f.writelines(['G) ', str(mag), '\t\t\t# Mag. threshold\\n'])\n        f.", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x02:\n                    /* C", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self.course_key.make_usage_key(\n            'course', 'v1', self.course_key.make_usage_key('course_run', self.run)\n        )\n    def _create_course(self):\n        \"\"\"\n        Create the course", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tfor(int i=0; i<splitNumber.length; i++){\n\t\t\tif(splitNumber[i].equals(\"0\")){\n\t\t\t\tsplitNumber[i]=\"\";\n\t\t\t}\n\t\t\tchance*=Integer.parseInt(splitNumber", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "   return 0, \"Meter \" + name + \" deleted\"\ndef download_request(module, name, apiid, apikey, cert_type):\n    cert_id = get_meter_id(module, name, apiid, apikey)\n    if cert_id is", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(9, 128);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           parent.alertError(parent, \"Failed to import message: \" + e.getMessage());\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(messageBrowser, messageWriter, fileTextField.getText(), subfoldersCheck", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tif (value instanceof Integer) {\n\t\t       \t\t\t\tlayer = ((Integer)value).intValue();\n\t\t       \t\t\t}\n\t\t       \t\t}\n\t\t    \t}\n    \t\t}\n    \t\treturn layer;", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null && currentSession.isOpened()) {\n            final GraphUser user = currentSession.getUser();\n            if (user != null) {\n                updateUI();\n            }\n        }\n\n\n\n    }\n    private void updateUI() {\n", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (int i = 0; i < emotions.length; i++) {\n\t\t\tsum += emotions[i].strength;\n\t\t}\n\t\tfor (int i = 0; i < emotions.length; i++) {\n\t\t\tem", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n            }\n            ],\n            self.build.stages_to_list())\n    def test_add_stage(self):\n        \"\"\"Test adding a stage\"\"\"\n        self.build.add_stage", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   phi2Rad = (e1/2)*sin(phi1)\n    phi2 = phi2Rad*_rad2deg\n    thetaRad = (1-eccSquared/2)*(cos(phi1)-cos(phi2))\n    theta", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       report = ReportUserForm(request.POST, instance=user)\n        if report.is_valid():\n            report.save()\n            messages.success(request, \"Report submitted successfully!\")\n            return HttpResponseRedirect(reverse('profile-user', args=[user.username]))\n", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @property\n    def next_url(self):\n        \"\"\"See `LaunchpadFormView`.\"\"\"\n        if self.context.active:\n            if len(self.errors) > 0:\n                return None\n            return canonical_url(self.context)\n        else", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t}\n#endif\n\t\tpublic static KPTranslation Load(string strFileName)\n\t\t{\n\t\t", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "               new_positional_tags_list.append((regex, flag))\n            return new_positional_tags_list\n    def compile_tag_regex(positional_tags):\n        if not positional_tags:\n            return positional_tags\n        else:\n            new", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\nNext line of code:\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\tready_pipe = dbus.service.BusName(\"org.freedesktop.secrets\",\n\t                                  replace_existing=True)\n\n\nclass SecretItem(dbus.service.Object):\n\tdef __init__(self, collection, path, label, secret", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "               this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);\n                this.AddRes(index, typeof(SwitchItem), 1073464, 1, 1", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "   if exc is None:\n        exc = sys.exc_info()[1]\n    self.app.do_teardown_request(exc)\n    self.app.teardown_request()\n    _request_ctx_stack.pop()\n    if self", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ################################################################################################################################\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       dx = (angles[0] * ray_trafo.range.meshgrid[1] +\n              angles[1] * ray_trafo.range.meshgrid[2])\n    elif ndim == 3:\n        # Note: For 3d, we", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "   def _buildRE(self, regx):\n        \"\"\" Return the Proxyfied RE string \"\"\"\n        if self.isEnabled():\n            regx = re.sub('//1', self.option, regx).replace('&', '&amp;')\n        return regx", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn type.ToString (fmt) + \" \" + unit.ToString (fmt);\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn ToString (Thread.CurrentThread.CurrentCulture);\n\t\t}\n\t}\n}\n\n", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\t\t\t\t\t\tAssert.That(((JObject)obj.Properties[0].Value).Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\t\t\t\t\t\tAssert.That(((JObject)obj.Properties[0].Value", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int w = 0; w < width; w++) {\n                    Topic node1 = getVertexTopic(w + \" \" + h, topicmap, optionsValues);\n                    Topic node2 = getVertexTopic(w + \" \" + (h + ", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   i1 = iso.Isoelastics([ds.get_path()])\n    data = i1.get(col1=\"volume\",\n                  col2=\"deform\",\n                  channel_width=20,\n                  flow_rate=0.04", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       \n        final String filename = args[0];\n        \n        final String namespace = args[1];\n        \n        final String timestamp = args[2];\n        \n        final String base = args[3];\n        \n        final String suffix = args[4];\n        \n        final", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "   def test_lowest_spotprice_with_multiple_subscriptions(self):\n        \"\"\"We should find the lowest spotprice for a given zone or return None.\"\"\"\n        history = [ {u'Timestamp': datetime.datetime(2015, 12, 3", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should download and update Yarta.\n\t * \n\t * When the function returns true Yarta will be updated.\n\t * \n\t * @return true/", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteVertexArrays(1, out vao);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteFramebuffers(1, out frameBuffer);\n\t\t\tOpenGL.CheckGLError();\n\t\t", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       or :py:obj:`None` if singular.\n        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._project_cov_mat_inverse(\n            self.x_data_cov_mat_inverse, self.y_data_cov_", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                 adminUser = getEucalyptusAdmin();\n                }\n              } catch (AuthException e) { // In case the account is deleted, transfer the ownership to eucalyptus admin\n                LOG.warn(\"Account ID \" + walrusObject.getOwnerId() +", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "\t\t\tadd { _selectedFolderChanged += value; }\n\t\t\tremove { _selectedFolderChanged -= value; }\n        }\n        public event EventHandler Initialized\n        {\nNext line of code:\n\t\t\tadd { _intialized += value; }\n\t\t", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       try {\n            ImportVmTemplateCommand command = new ImportVmTemplateCommand(createParameters());\n            command.setIsImportAsNewEntity(isImportAsNewEntity);\n            command.setVmTemplateName(name);\n            CanDoActionTestUtils.runAndAssertCanDo", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.TopAttach = ((uint)(1));\n\t\t\tw10.BottomAttach = ((uint)(2));\n\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw10.", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "           environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\\n                self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        if self.totalstatus is not None:\n            environ['%sTOTAL", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t\t// The following line is not valid C#\n\t\t\t//return new ConstructorBuilder(mb, CallingConventions.Standard, Type.EmptyTypes);\n\t\t}\n\t\tpublic ConstructorBuilder DefineConstructor(", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return new Builder(prototype);\n    }\n\n    protected override Builder ThisBuilder {\n      get { return this; }\n    }\n    public Builder MergeFrom(pb::IMessage other) {\n      if (other is SendInvitationRequest) return MergeFrom((", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                   vertices[x] = getVertex(getQuadIndex(i, x));\n            }\n        }\n    }\n    /**\n     * Returns the index of quad <code>i</code> in this QuadMesh.\n     * \n     * @param i\n", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (showDateData.equals(\"true\")) {\n            result.add(\"date created\");\n        }\n        showDateData = property(\"categoryDateModified\", \"search\", \"\");\nNext line of code:\n        if (showDateData.equals(\"true\")) {\n            result", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds (0.1f);\n\t\t\tif (dynamicHeight)\n\t\t\t{\n\t\t\t\ttextRect.sizeDelta = displayTextRect.sizeDelta;\n\t\t\t\tdisplayText.text = inputText.text;\n", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       base.OnSizeChanged(e);\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnMouseClick(MouseEventArgs e)\n    {\n      if (m_autoHeight)\n      {\nNext line", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "               lastUser = r[\"CreatedBy\"].ToString();\n                }\n                else if (lastUser != string.Empty)\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            // send email to each user\n            foreach (string user in Users)\n           ", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\nNext line of code:\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           if (CriteriaCodesUsed.Count > 1)\n            {\n                VerificationResult = new TScreenVerificationResult(new TVerificationResult(this, ErrorCodes.GetErrorInfo(\n                    PetraErrorCodes.ERR_MULTIPLE_DIS", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n#endif\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\treturn Enabled && CopyCustom;\n\t\t}\n\t\t#endregion\n\t\t#region Internal / Private Methods\n\t\tinternal void OnImageBoxSelected(object sender, ItemEventArgs<ImageBox> e)\n\t\t{\n\t\t\tIImageBox image", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tdataDir = value;\n\t\t\t}\n\t\t\t}\n\t\t\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (!bugAnnotation.isValid()) {\n                System.err.println(\"Invalid bug annotation: \" + bugAnnotation.toString());\n                System.err.println(\"  \" + bugAnnotation.getSourceLineAnnotation());\n                i.remove();\n            }\n        }\n    }\n", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\tpublic override void GetProperties( ObjectPropertyList list )\n\t{\n\t\tbase.GetProperties( list );\n\t\tif ( this is Meat )\n\t\t{\n\t\t\tlist.Add( 1041510, new string[ 1 ] { \"", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Menu.GetBool(\"LaneClearQ\") && Q.IsReady())\n                ", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param fill", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        space = re.compile(r'  +')\n        fc = space.split(fb)\n        pollen = {}\n        for line in fc:\n            if line.startswith('Warnung'):\n", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(field_def['rules']['marc'], field_model_def['rules']['marc'])\n        self.assertEquals(field_def['rules']['marc']['function'],\n                          field_model_def['rules']['marc']['function'])\n        self.", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new object[] {\"E1\", \"10\"});\n                result = env.CompileExecuteFAF(\"select * from MyInfraW where f1=10 and f2='E1'\", path);\n                EPAssertionUtil.AssertPropsPerRow(\n                   ", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "       c = self.copy()\n        return c.__imul__(other)\n\n    def __truediv__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n       ", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "view = request.website.get_template(id_or_xml_id)\n\nI want to replace this line with something like:\nview = request.website.get_template(id_or_xml_id, values=values)\n\nI have tried this:\nview = request", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = createHTMLView(c, text);\n        }\n        if (value != null && oldValue != null) {\n            oldValue.setView(null);\n        }\n        c.putClientProperty(propertyKey, value);\n    }\n    private static String propertyKey", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, contents=content)\n    assert not s.name_is_non_test\n    assert not s.name_is_manual\n    assert not s.name_is_visual\n    assert not s.name_is_multi_global\n    assert s.", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.sqlLoader = namedQueryReference;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmapping.sqlLoader = namedQueryReference + mapping.sqlLoader;\n\t\t\t}\n\t\t}\n\t\tpublic void Loader(", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tforeach ( PlayerState ps in m_Members )\n\t\t\t{\n\t\t\t\tps.Serialize( writer );\n\t\t\t}\n\t\t\tFactionItem", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       invocationQueue.removeFirst();\n    }\n    private void popInvocationAndGraphs(int n) {\n        assert n >= 0;\n        for (int i = 0; i < n; i++) {\n            popInvocation();\n        }\n        assert graphQueue.", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValuePhiNode phi = getCachedPhi(value, value.stamp());\n                    for (int i = 1; i < states.size(); i++) {\n                        ValuePhiNode otherPhi = states.get(i).getC", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleConnectionEvent */\n    public void handleConnection", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonWallMapGump(from, this));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic EodonianWallMap(Serial serial) : base(serial)\n\t\t{\n\t\t}\n\t", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "\n    BibrecBibrec = \"BibrecBibrec\".format(idx)\n    globals()[BibrecBibrec] = type(BibrecBibrec,\n                                   (db.Model, BibrecBibxxxMixin), {})\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "       \"\"\"\n        if domain not in self._domains:\n            raise BackendError('Backend does not serve domain %s.' % domain)\n        user = '%s@%s' % (username, domain)\n        log.debug('Create user: %s (%s)',", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath)\n    def find(self, st, by='msgid'):\n        \"\"\"\n        Find entry which msgid (or property identified by the *", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n      return res\n    else:\n      gLogger.info( \"%d problematic files for transformation %s were found\" % ( len( res['", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tString path = uri.getPath();\n\t\t\tif(path == null) {\n\t\t\t\tif(method.equals(\"GET\"))\n\t\t\t\t\tpath = \"/\";\n\t\t\t\telse\n\t\t\t\t\tpath = \"/index.cgi\";", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n        msg = yield self.run_fake_single_build(gsp, buildResult)\n        result = makeReviewResult(msg, (GERRIT_LABEL_VERI", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.type = 'text'\n    self.category.text = 'Less: &lt;'\n    self.assert_(self.category.type == 'text')\n", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "               Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> r = r1;\n            if (r2 != null) {\n                r = r2;\n                r.putAll(r1);\n            }\n           ", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "\ndef register():\n    bpy.types.MATERIAL_MT_strand_presets.bl_label = \"Strand Presets\"\n    bpy.types.MATERIAL_MT_options.bl_label = \"Options\"\n    bpy.types.", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_IRQEnabled = map16.IRQEnabled;\n", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           _jMnuRoot.add(getOpenDocumentMenuItem(\"Open...\", oActionListener));\n        }\n        private JMenuItem getOpenDocumentMenuItem(String _sTitle, ActionListener _oActionListener){\n            JMenuItem oMenuItem = new JMenuItem(_sTitle);\n            oMenuItem", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Blue Bears]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Red Bears]\n\t\tAdd(\"Party", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn SizeHeightToFitWithMin (min, min);\n\t\t}\n\t\tpublic int SizeHeightToFitWithMin (int min, int min2)\n\t\t{\nNext line of code:\n\t\t\treturn SizeHeightToFitWithMin (min", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "       return self.tweet_id\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "from sphinx.highlighting import lexers\nlexers['php'] = PhpLexer\n# Add a custom highlighting option\ndef setup(app):\n    app.add_config_value('php_highlight', 'True', 'env')\n\n# Enable the HTML extension", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                ORDER BY sdate, stime ''', (i,))\n    row = cursor.fetchone()\n    print \"row is: \", row\n    cursor.execute('''SELECT sdate, stime, edate, etime, duration, src_callsign, max_altitude", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       conn.table(\"projects\").get(project_id).set(\"last_snapshot\", timestamp)\n    # Close connection to the database\n    conn.close()\n    # Now that we've set the last_snapshot field of each project, we should update\n    # the last_", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"Oh, so you want to learn the Complicity skill?<br/>I've heard that skill is hard to learn.<br/>Why do you want to learn it?\");\n\t\t\t\tbreak;\n\t\t\tcase \"campfire\":\n\t\t\t\t", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\tname\t- aname/ename/gname\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead =", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "   def add_host(self, host_data):\n\n    def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n\n    def add_host(self, host_data):\n        self.host_", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               super.onPostExecute(uri);\n            }\n        }\n    }\n}\n", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary.keys()) > 0):\n        print(\"primary.xml contains additional packages:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name, pkg", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "       ext_outputs = self._mutate_outputs(self.distribution.has_ext_modules(),\n                                           'build_ext', 'build_lib',\n                                           self.install_dir)\n        inputs.extend(ext_outputs)\n        return inputs\n", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(entity, disassembledValues[j], session, entity);\n\t\t\t", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '-d', log_name,\n        '-o', 'stdout', 'stderr',\n        '-q', '1',\n        '-t', '1',\n        '-T', '0',\n        '-u', '0',\n        '-a', '1',\n        '-c", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new EventViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        //[RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n\t\t[RolesRequired(\"Admin\",\"Save", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                       var circle = (Circle) obj;\n                        return string.Format(\"({0},{1},{2},{3})\", circle.X, circle.Y, circle.Width, circle.Height);\n                    }\n                    return string.Format(\"{0}\", obj);\n               ", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "if __name__ == \"__main__\":\n    FileserveCom(\n        \"Fileserve.com\",\n        \"Fileserve.com\",\n        \"Fileserve.com\",\n        \"Fileserve.com\",\n        \"Fileserve.com\",\n        \"Fileserve.com\",", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count > 0)\n\t\t\t\treturn path.Last();\n\t\t\telse\n\t\t\t\treturn null;\n\t\t}\n\t\tCPos? GetSearchFromLocation(Actor self)\n\t\t{\n\t\t\tvar search", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder();\n        // TODO: Add your code here\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           for (; stateIndex < MAXIMUM_ORDER; stateIndex++)\n            {\n                states[stateIndex] = PpmState.ZERO;\n                if (context.Suffix == PpmContext.ZERO)\n                {\n                    goto NoLoop;", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Short VR.\n        /// </summary>\n        public static readonly DicomVr SSvr = new DicomVr(\"SS\", false, false, true,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add (tFull[3]);\n\t\t}\n\t\tstring [] sessionValues = new string[sessionValuesArray.Count];\n\t\tsessionValuesArray.CopyTo(sessionValues, 0);\n\t\t\n\t\t//this will be much better doing", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "\n        o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 10)\n        self.assertEquals(b'abcdefghij\\x00\\x00\\x00\\x00\\x00\\", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 32", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   ax.plot(cr['combined'][app][VC]['durations'], csi_95.upper_bound)\nNext line of code:\n    ax.plot(cr['combined'][app][VC]['durations'], csi_95.lower_bound", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   self._testUIDGIDSwitch(1, 0, 0, 1, [], [1, 0])\n\nThe above code, along with the rest of the file, will be ignored.\n\n\nclass Tests(unittest.TestCase):\n    \"\"\"\n    Test", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x + controlSize - 1, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[0])\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[0])\n  winner, _inferenceResult, _dist, _", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(kind, offset / kind.width.numberOfBytes, value);\n    }\n    @HOSTED_ONLY\n    public boolean isArrayLayout() {\n        return true;\n    }\n    @HOSTED_ONLY\n    public boolean isArrayLayout(", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            // resolve relative path\n            string assemblyFile = FileUtils.CombinePaths(Project.ProjectDirectory, relativePath);\n            Log(Level.Debug, \"Resolved", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   string = string.format(*args, **kwargs)\n    return string\ndef get_next_line(prompt='', visible=True, input='', limit=None):\n    \"\"\"\n    Prompt for input (independent of Python version)\n    prompt (string): The prompt to", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       i21 = i26 + i16 - 1;\n        i23 = i28 + i16 - 1;\n        i20 = i22 + i16 - 1;\n        i22 = i22 + i16 -", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic override int GetHashCode() {\n\t\t\treturn this.name.GetHashCode();\n\t\t}\n\t\t\n", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                   CollisionObjects = new[] { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Lucian\n            #region Lulu\n            Spells.Add(\n                new Sp", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentTenantId()).thenReturn(\"test.tenant\");\n\t}\n}\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       proc = subprocess.Popen(\n            ['/sbin/modinfo', '-d', 'somemodule'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            close_", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (PropertiesService.Instance != null)\n\t\t\t\tPropertiesService.Instance.PropertiesChanged += PropertiesService_PropertiesChanged;\n\t\t\tif (ResourceService.Instance != null)\n\t\t\t\tResourceService.Instance.ResourceChanged += ResourceService_ResourceChanged;\n", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\tinternal abstract void SetIndex (Index index);\n\t\tinternal abstract void SetConstraintCollection (ConstraintCollection collection);\n\t\tinternal abstract void SetTable (DataTable table);\n\t}\n}\n\n//\n// System.Data.ConstraintCollection.cs\n//\n//\n// Copyright", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.verticalLayout_2.addWidget(self.settings_ui_groupbox)\n\n\n        # ----------------------------------------------------------------------------------------------------------------------------------------------------\n        # ----------------------------------------------------------------------------------------------------------------------------------------------------\n        # ----------------------------------------------------------------------------------------------------------------------------------------------------", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               return false;\n            }\n            String stationId = wxs.getString( wxs.getColumnIndex( Awos1.STATION_ID ) );\n            Cursor awos = result[ 1 ];\n            if ( awos == null || !awos.moveToFirst()", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tQueryStatistics continentStats = stats.GetQueryStatistics(\n\t\t\t\t\t\t\"from Continent where Id = ?\");\n\t\t\t\tAssert.AreEqual(1, continentStats.ExecutionCount, \"unexpected execution count\");\n\t\t\t\t// but", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum ^ uiByteValue) | (uiByteValue << 8);\n            }\n            return (ushort)(uiCRCITTSum >> 8);\n        }\n        private void generate_crc_table()\n", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn shootingSpeed;\n\t}\n\tpublic boolean isShooting() {\n\t\treturn shooting;\n\t}\n\tpublic int getShootingCooldown() {\n\t\treturn shootingCooldown;\n\t}\n\tpublic int getShootingDelay() {", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "       }\n        return new IHyperlinkDetector[] { \n                new CeylonJavaBackendHyperlinkDetector(controller), \n                new CeylonNativeHeaderHyperlinkDetector(controller), \n                new CeylonJavascriptBackendHyperlinkDet", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.l.addWidget(self.drawingModeWidget)\n        self.l.addWidget(Object3DPropertiesAspectWidget(self))\n        self.l.addWidget(Object3DPropertiesAspectWidget(self))\n        self.l.addWidget(Object3", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\t\tcase 3: // Target location\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\t\tshould", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        Object convertedObj = selectConverter.convert(valueChoice);\n                        if (convertedObj.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tsb.append(\"\"+i+\"->\"+j+\" \\t\"+fractionWithAmount[i][j][0] +\"\\t\"+fractionWithAmount[i][j][1] +\"\\t\"+fractionWithAmount[i][j][2] +\"\\t\"+f", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                           foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                                int", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic string TaskName {\nNext line of code:\n\t\t\tget { throw new", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final int ownerGroupMode = 0700;\n        final int groupId = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n        final int groupMode = 0700;\n        final int ownerId = ownerId;\n        final int owner", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v * (viewport.ToVector2 () / v);\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 scale)\n\t\t{\nNext line of code:\n\t\t\treturn v * (", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\tConsole.WriteLine(\"dpslamServer/Send(\" + PortNumber.ToString() + \")/Client \" + i.ToString() + \" has been disconnected\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n        /// <summary>\n        /// dis", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           switch (type) {\n                case Step:\n                    convertToStepBucketList(list);\n                    break;\n                case Activity:\n                    convertToActivityBucketList(list);\n                    break;\n                default:\n                    break;\n            }", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " PrintLongLine('                               %s%d<ReturnType%s>(object,'\n                ' %s%d%s) {' % (parent_class, exec_count, exec_type_str,\n                                 function_name, bind_count, method_types))\n  if", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   return range_json(filename, items)\n    \"\"\"\n    response = HttpResponse(mimetype='application/json')\n    response['Content-Disposition'] = (\n        u'attachment; filename=\"{0}.json\"'.format(filename)\n    )\n    writer =", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n        }\n        \n        //\n        // Test the rewrite.\n        //\n        final ASTSearchOpt", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       return super(UserDetailView, self).post(request, *args, **kwargs)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return UnitHelper.ComputePublicKeyToken(this.PublicKey); }\n    }\n    /// <summary>\n    /// The version of the referenced assembly.\n    /// </summary>\n    public Version Version {\n      get { return this.ResolvedAssembly.Version; }", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           var r1 = new DenseVector(input.Count);\n            var r2 = new DenseVector(input.Count);\n            var u1 = new DenseVector(input.Count);\n            var u2 = new DenseVector(input.Count);\n            var u3", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\tApfloat median = sortedNumbers[left];\n\t\t} else {\nNext line of code:\n\t\t\tApfloat median = ApfloatMath.divide(sortedNumbers[left], ApfloatMath.divide(sortedNumbers[right], ApfloatMath.divide(sorted", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "               sample_count[v, j] += 1\n                reference_set_map[v] = j\n            v = parent[v]\n    for (left, right), edges_out, edges_in in ts.edge_diffs():\n        for edge in edges_in:", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       mapping = json.loads(mapping_json)\n        result['mapping'] = mapping\n        result['csv_mapping'] = csv_mapping\n        return result\n    def _test_csv_mapping_data(self, sortinghat):\n        \"\"\"Test whether the mappings in the CSV are", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\torderManager.IssueOrder(Order.Command(\"add-bot \" + slot.", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "               return base.ToString();\n\t\t\t}\n\t\t    return base.ToString();\n\t\t}\n\t\tpublic override bool Equals(object obj)\n\t\t{\n\t\t\tif (obj == null || GetType() != obj.GetType())\n\t\t\t{", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + padding_bytes + self.data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           cluster.RectangularBoundary.CheckConsistency();\n            foreach (var node in cluster.Nodes)\n                node.CheckConsistency();\n        }\n#endif\n    }\n}\n\n\n\n#if TEST_MSAGL\nnamespace Microsoft.Msagl", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tif (m_maxSlopeRadians < 0)\n\t\tm_maxSlopeRadians = 0;\n\tif (m_maxSlopeRadians > 90)\n\t\tm_maxSlopeRadians = 90;\n", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (ExpressionTree init : initializers) {\n            if (canBeLeaked(init)) {\n                checker.report(Result.failure(\"unique.leaked\"), init);\n            }\n        }\n        return super.visitNewArray(node, p);\n   ", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound != null)\n\t\t\t{\n\t\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\t\tif (nbttagcompound1 !=", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t\t_returnType = new ClassItem(Context, typeAttribute.Value);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates a method node.\n\t\t/// </summary", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\tmyTrackBar.Width = 80;\n\t\t\t", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\twhen(classType.isClass()).thenReturn(false);\nNext line of code:\n\t\t\twhen(classType.castToClass()).thenReturn(classType);\nNext line of code:\n\t\t\twhen(classType.isInitialized()).thenReturn(true", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isImplicit != other.isImplicit)\n\t\t\treturn false;\n\t\tif (this.accessPath.getArrayTaintType() != other.accessPath.getArrayTaintType())\n\t\t\treturn false;\n\t\treturn true;", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideRExtent[end][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this left constituent stretch far enough to reach the right constituent?\n              continue", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "               ['rsync', '--archive', '--files-from=-', '--no-clobber',\n                    'src', 'dst'],\n                shell=False, env=None,\n                stdout=PIPE, stderr=PIPE, stdin=PIPE,\n               ", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.R", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a parameter with a color value.\n\t *\n\t * @param   name    Name of the parameter.", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( (this.isDeleted() == aThat.isDeleted()) &&\n\t\t\t\t(this.getContactDate().equals(aThat.getContactDate())) &&\n\t\t\t\t(this.getContactLocation().equals(aThat.getContactLocation())) &&", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "   print((\"Number of rejected timesteps : %s\" %LSolv.num_rejections))\n    print((\"Number of rejected timesteps jump : %s\" %LSolv.num_rejections_jump))\n    print((\"Number of rejected timesteps", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       if cdata is not None:\n            return\n    if isinstance(node.op, AdvancedSubtensor1):\n        cdata = node.op.get_constant_idx(node.inputs, allow_partial=True,\n                                         only_process_constants=True", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   self.fields['groups'].required = True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "   return QueryEvents(**kw)\n\n        else:\n            def wrap(query, **kw):\n                if not retval:\n                    fn(query, **kw)\n                    return query\n                else:\n                    return fn(query, **kw)\n        return wrap", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "           self.runtime.add_block_as_child_node(self.show_tag_list, xml_object)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       for key in data_model_changes:\n            if key[0] == 'axes_names':\n                continue\n            global_changes.append(ArrayValueChange(to_global(key), old_value, new_value))\n        return global_changes\n\n\n\n\n", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class != null && type == null)\n\t\t\t{\n\t\t\t\tif (Method != null || Field != null || Sig != null)\n\t\t\t\t{\n\t\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 13;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t//", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"test/mail/syncmail.1\",\n                                   \"test/mail/sync", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new HashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, Collection<String>> datum : csvData.entrySet()) {\n", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\treturn super.onWanded(player, wand);\n\t}\n\t@Override\n\tpublic boolean onWandUse(EntityPlayer player, ItemStack wand, BlockPos pos) {\nNext line of code:\n\t\treturn super.onWandUse(player, wand,", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n}\n\n\n\n\n", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "if are_equal:\n    logger.info(\"Document %s: Upgraded successfully\" % str(recid))\nelse:\n    logger.error(\"Document %s: Problem when upgrading: %s\" % (str(recid), str(are_equal)))\n    logger.", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tif(tvComputerCluster.SelectedNode!=null)\n\t\t\t\ttvComputerCluster.SelectedNode=tvComputerCluster.SelectedNode.Parent;\n\t\t\t\n\t\t\t\n\t\t\tthis.tvComputerCluster.Nodes[0", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date exDate : exceptionDates) {\n      exDateList.add(exDate);\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Gets the date at which it occur the specified hour in the specified", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo() { Component = sourceComponent, MemberName = sourceProperty };\n\t\tsourceEventBinding.DataTarget = new dfComponentMemberInfo() { Component = targetComponent, MemberName = targetProperty };\n\t\tsourceEventBinding.SourceEventName", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class,\n                    containerName, this);\n            Status result = switchManager.addSpanPort(jsonData);\n            if (result.isSuccess()) {\n                resultBean.", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCore = new CoreImages();\n\t\t}\n\t\tpublic final class CoreImages implements java.io.Serializable\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n\n\n        int i = 0;\n        while (i < size) {\n            i++;\n        }\n        return i;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "\n                la = LinkAnnotation()\n                la.subject = man_obj.uuid  # the subordinate is the subject\n                la.subject_type = man_obj.item_type\n                la.project_uuid = man_obj.project_uuid\n                la.source_id =", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .shrinktofit = \").Append(ShrinkToFit)\n                .Append(\"\\n\");\n            buffer.Append(\"          .mergecells = \").Append(MergeCells)\n                .Append(\"\\n\");\n            buffer.Append(\"", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = ((int) (extraToJis [value])) |\n\t\t\t\t\t\t(((int) (extraToJis [value + 1])) << 8", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "   if   obj.mnemonic==\"LD_A\"  : dst = env.A[a]\n    elif obj.mnemonic==\"LD_B\"  : dst = env.E[a]\n    elif obj.mnemonic==\"LD_BU\" : dst = env.", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.getInputStream();\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tpropertiesMap.load(stream);\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tclose = false;\n\t", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE || this == SPECTATOR;\n        }\n        /**\n         * Returns true if this is the SPECTATOR game type\n         */\n        public boolean isSpectator()\n        {\n            return this == SPECTATOR", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");\nNext line of code:\n\t\t\tSecurityIdentifier groupSid = new SecurityIdentifier (\"BA\");\nNext line of code:\n\t\t\tSecurityIdentifier everyoneSid = new SecurityIdentifier (\"WD\");\nNext line of code", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "       if error:\n            print_w(\"[fingerprint] Submission failed: \" + error)\n        # emit progress\n        self.__idle(self.__progress_cb,\n                float(self.__queue.qsize()) / len(releases))\n    def run(self", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "\n        if (PhotonEditor.Current.RpcList.Count > 0)\n        {\n            foreach (Rpc rpc in PhotonEditor.Current.RpcList)\n            {\n                if (!rpc.IsEnabled)\n                {\n                    continue;\n", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       full_subj.setText(Html.fromHtml(message.subject));\n        full_from_to.setText(message.from);\n        full_date.setText(message.date);\n        full_msgid.setText(message.msgid);\n        full_repto.", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           op_cc = np.linalg.inv(self.symmetry.op_scc[s]).round().astype(int)\n            op_cc = np.dot(op_cc, np.linalg.inv(self.symmetry.op_s", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygsTyp", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tfor (int i = 0; i < block.Body.Count; i++) {\n\t\t\t\t\tILNode child = block.Body[i];\n\t\t\t\t\tif (child.Match(ILCode.Br, out prevChildAsBB) || child", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (Owner.IsRagdoll) {\n\t\tif (Owner.IsDead) {\n\t\t    return;\n\t\t}\n\t\tOwner.IsRagdoll = false;\n\t\tOwner.IsDead = false;\n\t\tOwner.", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def fix_region_id(self):\n        for reg_list in  [self.polygon_region_ids, self.segment_region_ids, self.node_region_ids]:\n            for i in range(0, len(reg_list)):\n                if reg_", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "           out[outOff + 3] = (byte)(num >> 24);\n            out[outOff + 2] = (byte)(num >> 16);\n            out[outOff + 1] = (byte)(num >> 8);\n            out[outOff", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new SimpleRegexValueGetter( objectVariables,\n                this, objectVariables.keySet().toArray( new String[ 0 ] ) ) );\n        }\n        protected boolean filter( Node node,\n            Node parent,\n            PatternNode pattern )\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "       elif key == 'VALEUR':\n            slice_json['valeur'] = transform_values_holder_xml_json_to_json(value[0])\n        else:\n            slice_json[key] = value\n    if comments:\n        slice_json['comment", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_CLOSE_FRAME_SELECTED)));\n           }\n        }\n        public void mouseExited(MouseEvent e) {\n          if (SwingUtilities.isLeftMouse", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "   import random\n    import numpy\n    import datetime\n    import time\n    import matplotlib.pyplot as plt\n    import matplotlib.animation as animation\n    import numpy as np\n    import matplotlib.dates as mdates\n    import matplotlib.ticker as ticker\n    import matplotlib.cm as", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n   ", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table1.TABLE_NAME, new String[] {Db.Table1.ID_GROUP, Db.Table1.ID_GROUP_NAME, Db.Table1.ID_CATEGORY, Db.Table1.ID_CATEGORY_NAME", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               else if (m_meth == AllocMethod.CoTaskMem)\n                {\n                    Marshal.FreeCoTaskMem(m_ptr);\n                }\n            }\n        }\n        #endregion\n    }\n}\n\n\n\n\n\n\n\n\n\n", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "# The default Django authentication backend is the \"ModelBackend\", which\n# means that Django will try to authenticate users based on their username and\n# password.\n# However, if you want to use a custom authentication backend, you can do so\n# by adding a new entry to the AUTHENT", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t\tqueue[0].Cancel(numberToCancel);\n\t\t}\n\t\tprotected void FinishProduction()\n\t\t{\nNext line of code:\n\t\t\t", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "       infoText += \" file\" if numberOfFiles==1 else \" files\"\n        infoText += \"<br>\"\n        \n        infoText += str(numberOfHiddenFiles) \n        infoText += \" hidden file\" if numberOfHiddenFiles==1 else \" hidden files\"\n        info", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_m4.sub(r'%\\w+', r'%%\\1', code)\n        self.outputs[0].write(code)\n    def set_inputs(self, inputs):\n        \"The task input is a string\"\n        self.", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result of PlanExecutorServer!\")\n        return result\n        #return result\n        #result = self._planningExecutorClient.get_result()\n        #rospy.", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t- 2 * chemical[ 0 ][ idx + reactorExtent - 2 ] + chemical[ 0 ][ idx + reactorExtent - 1 ]\n\t\t\t\t\t\t\t\t\t- chemical[ 0 ][ idx", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n            default:\n                throw JsonException.$(position, \"Invalid type\");\n        }\n    }\n    @Override\n    public boolean isArray", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.obj_", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic SqlType[] SqlTypes\n\t\t{\n\t\t\tget { throw new NotImplementedException(); }\n\t\t}\n\t\tpublic System.Type ReturnedType\n\t\t{\n\t\t", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "\n\ndef main():\n    \"\"\"Main module function\"\"\"\n    argument_spec = ce_argument_spec()\n    argument_spec.update(dict(\n        key_id=dict(type='str', required=True),\n        auth_mode=dict(type='str', choices", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           check_node(component.location, editing_user, after_create, editing_user, editing_user, after_create, editing_user)\n        # Change the component, then check that there now are changes\n        component.display_name = 'Changed Display Name'\n        editing_", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        digest.update((byte) (start));\n        digest.update((byte) (length));\n        for (int i = 0; i < length; i++) {\n            digest.", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict)\ndef mkcomparison(dict):\nNext line of code:\n    return aetypes.Comparison(dict)\ndef mklogical(dict):\nNext line of code:\n    return aetypes.Logical(dict)\ndef", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           var sample = GetSample(api, sampleDirection);\n            if (sample != null)\n            {\n                // If the sample is a request or response, use the type of the sample.\n                // Otherwise, use the type of the sample object.\n                var sampleType = sample.Get", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "               value = entry.get_active_text()\n            if self.editable == 'top':\n                if not self.set_value():\n                    return\n                self.editable = 'bottom'\n            else:\n                if not self.set_value():\n                    return", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n    /**\n     * A priority orderer that is the highest priority for all beans that implement\n     * {@link", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           f.readline()\n        except EOFError:\n            f.close()\n        else:\n            f = None\n    if f is not None:\n        if f.readline() == \"\":\n            f.close()\n    else:\n        f = None\n   ", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.IUnknown)] object pUnkValue\n            );\n    }\n    [ComImport, System.Security.SuppressUnmanagedCodeSecurity,\n    Guid(\"0519079A-4105-42", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       var sp = Principals.getCurrentSecurablePrincipal();\n        return spm.addPrincipalToPrincipal( sp, directedAclKeys );\n        // TODO: addPrincipalToPrincipal\n    }\n    @Timed\n    @Override\n    @PostMapping(", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       child_elements = element.findall('./child_element')\n        for child_element in child_elements:\n            if not self.verify_element(child_element):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   node.ownerDocument = None\n    node.ownerDocument = newOwnerDocument\n    node.ownerDocument.setUserDataHandler(operation, node)\n    return clone\ndef _nssplit(qname):\n    \"\"\"\n    Split a qualified name into a namespace URI and local name.", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.Name, endOffset))\n\t\t\t\tkeyLocator.appendComponent(new Name.Component\n\t\t\t\t  (new Blob(decoder.readBlobTlv(TlvTypeCodes", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n\n        //Updates the bots\n        for(int i = 0; i < bots.size();", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( new EbGameJoinPlayer() );\n        hide();\n      }\n   ", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"Got 400 status from %s\" % url)\n    else:\n        filename = get_filename(r.headers)\n        log.debug(\"Saving %s as %s\", url, filename)\n        with open(filename, \"wb\")", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tif (response.HasErrors)\n\t\t\t\t{\n\t\t\t\t\tfailureReason = response.Errors.First().Message;\n\t\t\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   \"\"\"\n    if len(reaction.metabolites) > 1:\n        raise ValueError(\n            \"Reaction contains more than one metabolite component.\"\n        )\n    \"\"\"\n    c_weight = [\n        met.weight * met.elements.get(\"C", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return super(UnitManager, self).get_for_path(pootle_path, user)\n    def get_for_editor(self, editor, user):\n        \"\"\"Returns units that fall below the given editor.\n        :param editor: The editor who is accessing the units", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='StateCategory',\n            fields=[\n                ('id', models", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "   self.logger.debug(\"Switch {} ARP request: {}\".format(self.name, str(poxpkt.payload)))\n    self.logger.debug(\"Switch {} ARP request: {}\".format(self.name, str(poxpkt.payload)))\n    self.logger", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (m_IgnoreChanges)\n      return;\n    m_RecentItems.add(item);\n    writeProps();\n    notifyRecentItemListenersOfAdd(item);\n  }\n  /**\n   * Removes the item from the internal list.\n  ", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.Faction != target.Faction || src.Faction != target.HomeFaction || src.Faction != target.Allegiance)\n                return false;\n            return true;\n        }\n        public static void OnUse(Mobile src)\n        {\n           ", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       if (maxTradePeriodDate == null && halfTradePeriodDate == null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a != null) a.next = p.down;\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic BitArray FirstAny(Node p) {\n\t\tBitArray fs = First0(p, new BitArray(Symbol.terminals", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tmReadDone.Set();\n\t\t\tmReadDone.Reset();\n\t\t\t// read data\n\t\t\tHIDImports.HidD_Read(this.mHandle.DangerousGetHandle(), buff, (uint)buff.Length);\n\t\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object o", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t\telse\n\t\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           for (k++; i < N1 + N2 + N3; i++, k += 3)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\nNext line of code:\n            for (k++; i < N1", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       rate.create()\n        rate.delete()\n        rate.update({'description': 'description updated'})\n        rate.update({'description': 'description updated'})\n        rate.update({'description': 'description updated'})\n        rate.update({'description': 'description", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tIntPtr destData = shadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, destData, length );\n\t\t\t\tshadowBuffer", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "self.session.open(SatFindersSetup, frontend_data=self.frontendData)\n\nSo I guess that it is not possible to open a SatfindersSetup without a frontend_data.\n\nComment: I've tried to remove the line \"self.session.", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           tcpAcceptFilters.add(TcpAddress.TcpAddressMask.valueOf(filterStr));\n        }\n        throw new IllegalArgumentException(\"Unknown option \" + option);\n    }\n    public String toString()\n    {\n        return \"options=\" +\n                \" send", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               // Decode the (sub)image row-by-row\n                for (int i = 0; i < bytesPerRow; i++) {\n                    fout.Write(curr[i]);\n                }\n                // Copy the row to the output stream\n                prior = curr.", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "\n        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface(':1.23'))\n        s.set", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "output += str(m_product) + \"\\n\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "               \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n            AssertParseError(\n                \"1:1: Message type \\\"proto", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void clear() {\n\t\tinitialize( true );\n\t\tmap.clear();\n\t\tdirty();\n\t}\n\t@Override\n\t", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member bidding on an item\n\t\t/// </summary>\n\t", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "   return {'attendance_action': action_message}\n\n\nclass HrEmployeeAttendance(models.Model):\n    _inherit = \"hr.employee.attendance\"\n    _description = \"Employee Attendance\"\n    employee_id = fields.Many2one('hr.employee", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = form.grdResults().getRows().newRow();\n\t\tgrdResultsRow row = parentRow.getRows().newRow();\n\t\t\n\t\tif (parentRow.getColTestName() == null)\n\t\t{\n\t", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// Position of the upper left", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       if not self.terminator.doing_layout:\n            self.terminator.last_active_window = self.uuid\n        # FIXME: Cause the terminal titlebars to update here\n        return(maker.new_tab(self, cwd, profile, debugtab", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( \"_\"+Guid.NewGuid().ToString( \"N\" ), managedType, marshalAttribute, arraySize ) );\n                }\n                else {\n                    throw new UnknowTypeNameException( fragment );\n                }\n            }", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn this.IsEnum || base_type != null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t\t}\n\t\t}\n\t\tpublic bool IsPointer {\n\t\t\tget { return base_type != null && base_type.", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               return null;\n            }\n        }\n        #endregion\n        #region private\n        private void Evidence_ModelLookup(object sender, ModelLookupArgs args)\n        {\n            if (models.ContainsKey(args.Key))\n            {\n                XmlDocument model", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "   self.protocol = protocol\n    self.ssl_version = _openssl_versions[protocol]\n    self.ssl_cipher_list = _openssl_versions[protocol][0]\n    self.ssl_cipher_list_string = _openssl_versions[protocol][", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.scrolledwindow4 = new global::Gtk.ScrolledWindow ();\n\t\t\tthis.scrolledwindow4.CanFocus = true;\n\t\t\tthis.scrolledwindow4.Name = \"scrolledwindow4\";\n\t\t\tthis.scrolledwindow", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "           notebooks[\"board\"].set_current_page(new_num)\n        headbook.set_tab_reorderable(True)\n        headbook.set_tab_reorderable_callback(page_reordered)\n    else:\n        headbook.set_re", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_1),\n    \"Move-Tab-to-previous\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_2),\n", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn this.persistenceUnitName + \":\" + this.persistenceProviderClassName;\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n    // TODO: Implement this method\n  }\n  \n  public boolean isFileReadOnly(IFileEditorInput fileEditorInput)\n  {\n    return false;\n  }\n  \n  public boolean isFileOpen()\n  {\n    return false;", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(831, 656);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(7", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       if (sb != null)\n        {\n            sb.append(string.substring(i));\n        }\n        return sb.toString();\n    }\n}\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC4231_TC2_Legacy ()\n", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    current_sum += 4;\n\t    \nNext line of code:\n\t    sum += current_sum;\n\t    \nNext line of code:\n\t    current_align += 4;\n\t    \nNext line of code:\n\t    current_sum += 4", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "     return null;\n      else\n        return java.GetValue(\"Path\");\n    }\n    private static String GetJdkHome(String javaHome)\n    {\n      String javaHomeJdk = null;\n      String javaHomeJre = null;\n      String jdkHome =", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               comment = l\n        if comment is not None:\n            return [comment, l]\n        else:\n            return None\n    def find_env(self, name):\n        comment = None\n        for l in self.lines:\n            if re.match(r'%s", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "       modifier.vertex_group = modifier_json['vertex_group']\n\n\nclass MeshModifierVERTEX_WEIGHT_TOPOLOGY(MeshModifierCommon):\n    @classmethod\n    def _to_json_spec(cls, mod", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           double likelihood = 0;\n            for(int i = 0; i < rankCounts.length; ++i)\n            {\n                double bucketRank = rankCounts[i];\n                if(bucketRank > 0)\n                    likelihood += bucketR", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.contains(1));\n        assertEquals(2, neighbors", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   parser(self.choice, cap=self.cap)\n    parser(self.choice)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 162);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'ordering': \"['ordering', 'page_id']\", 'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n           ", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               return false;\n            } else {\n                return false;\n            }\n        }\n        return false;\n    }\n    private boolean typesExists(String targetNamespace, String typeName) {\n        boolean alreadyProcessed = false;\n        if ((targetNamespace != null) && (", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       return self.write(cr, uid, ids, {'state':'validate'})\n    def holidays_first_validate_notificate(self, cr, uid, ids, context=None):\n        \"\"\"Send a notification to the user who validate the holidays\"\"\"\n", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets or sets the boolean value that determines whether the user can select multiple\n        /// items in the <see cref=\"IBOColSelector\"></see>.\n        /// </summary>\n       ", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return String.Format(\"MixerLine: {0} {1}\", Name, ShortName);\n            return String.Format(\"MixerLine: {0}\", Name);\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = (ims.core.admin.domain.objects.CareContext)domainFactory.getDomainObject(valueObject.getCareContext().getClass(), valueObject.getCareContext().getID());\n\t\t}\n\t\tdomainObject.setCare", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           [\"cargo\", \"build\", \"--quiet\"],\n            env=env,\n            verbose=verbose)\n            env['OPENSSL_LIB_DIR'] = path.join(self.android_support_dir(), \"openssl-1.0.1k\")\n", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tdouble pnEst = predictPositives ? estP : estN;\n\t\t\tif (function.equals(WRACC)) {\n\t\t\t\treturn cov * (pnRel / (p + n) -", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashDiffs(gitStash.Name, gitItemStatuses);\n            }\n            Stashed.IsLoading = false;\n            Stashed.IsVisible = true;\n            Stashed.Focus();\n            Stashed.SelectPreviousVisibleItem();\n           ", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   lattice.Drift(length=0.1)\n    lattice.Drift(length=0.2)\n    lattice.Drift(length=0.3)\n    lattice.Drift(length=0.4)\n    lattice.Drift(length=0.5)", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       return this.match((AuthScope)o) == 0;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode() {\n        return LangUtils.hashCode(this.scheme)", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n    [System", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic String getCSeriennrChargennr() {\n\t\treturn cSeriennrChargennr;\n\t}\n\tpublic void setCSeriennrCh", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \nNext line of code:\n\t\t\t\t\tE", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "   self.cmd_token.append(mosi)\n    self.cmd_token_bits.append(self.cmd_token_bits[5 - ptype][0])\n    self.is_acmd = self.is_acmd or (ptype == 'BITS')\n", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "           if (!(in_grouping_b(g_v, 97, 259))) {\n              break lab0;\n            }\n            // gopast, line 200\n            golab2:\n            while (true) {\n              lab2:", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               if (cls != null)\n                    o = cls.newInstance();\n            } catch (Exception ex) {\n                System.out.println(\"ex: \"+ex);\n            }\n            if (o != null) {\n                ChannelData cd = channelMap.get(channel", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   return result\n    def _get_key_usage(self):\n        try:\n            current_key_ext = self.cert.get_extension(\n                x509.ExtensionType.KeyUsage,\n                x509.KeyUsageFlags.digital_signature", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tfor (Slots::iterator i = s.begin(); i != s.end(); ++i) {\n\t\t\t\t\tif (i->first != NULL_PTR) {\n\t\t\t\t\t\tstill_there = true;\n\t\t\t\t\t", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   return [X, X]\ndef do_utf8(sm):\n    global ForbiddenRange\n    state_list = sm.states.items()\n    for state_index, state in state_list:\n        # Get the 'transition_list', i.e. a list", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tExpect(28);\n\t\t\tsym.attrPos = new Position(t.pos, t.pos, t.col);\n\t\t} else if (StartOf(29)) {\n\t\t\tGet();\n\t\t\tExpect(30);\n", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc['product_qty'] = line.product_uom_qty\n            edi_doc['product_id'] = line.product_id.id\n            edi_doc['product_uom_id'] = line.product_uom.id\n", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "       Hashtable<String, String> serviceProperties = new Hashtable<String, String>();\n        serviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n        return new ServiceDescription(\"_openhab-server._tcp.local.\", \"openHAB\", http", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               nameMap.put(name, new ArrayList<>());\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testPermissions_virtualNode() throws Exception\n    {\n        // virtual nodes should adhere", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))\n        for device in devices:\n            assert device.subsystem == 'input'\n            assert device.asbool('ID_INPUT_MOUSE')\n            assert device.sys_", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           if (m_Keys.Count > 0)\n            {\n                ItemID = m_Keys[0].ItemID;\n            }\n            else\n            {\n                ItemID = 0;\n            }\n        }\n    }\n}\n\n\n\n\n\n\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> it = devices.iterator(); it.hasNext();) {\n            String device = it.next();\n            // DRS 20181103 - Added ip address to HDHR tuners\n            String ipAddress = ipAddressMap.get(", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "\n    if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS)", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length > 0) {\n        String regex = split[0];\n        String type = split[1];\n        Set<String> overwritableTypes = Generics.newHashSet();\n        if (split.length > 2) {\n          overwritable", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           # or try a full search using the search path\n            try:\n                # FIXME: not sure why we need to append the suffix to the path.\n                # it's probably a bug in the latex scanner.\n                sub_path = os.path.join(source", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   def features(self, query):\n        # ...\n        return None\n    def features_at_point(self, point):\n        # ...\n        return None\n    def wkb_features(cls, keys, features):\n        # ...\n        return None\n    def wkt", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "   @property\n    def interval(self):\n        if self.want.interval is None:\n            return None\n        if 1 > int(self.want.interval) > 86400:\n            raise F5ModuleError(\n                \"Interval value must be", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   def fill(self):\n        if not self.playbook_input_parameters.fill([\n            (\"var\", \"value\", \"type\"),\n            (\"var\", \"value\", \"type\"),\n            (\"var\", \"value\", \"type\"),\n        ]):\n            return False\n       ", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           notifyListeners(new EventObject(this), EventStatusType.ERROR,\n                    getClass().toString() + \", getClassByName(), \"\n                    + \"class (\" + className + \"/\" + classPath + \") not found.\", null);\n        }\n        return result;", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           {\"id\": \"dummy\", \"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           embedManifestDllAction.execute(target, source, env)\n        else:\n            print \"Unable to find %s\" % manifestSrc\n            return 0\n    return 0\ndef embedManifestExeCheck(target, source, env):\n    \"\"\"Function", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           execute(getSelectedResources(), new SubProgressMonitor(new ProgressMonitorJobsDialog(getShell(), true), 1000));\n            // 1FV0B3Y: ITPUI:ALL - sub progress monitors granularity issues\n            errorStatus[0", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tif (!super.init(smi, sdi)) return false;\n\t\t\n\t\treturn true;\n\t}\n\t\n\tpublic boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException\n\t{\n\t\tmeta=(A", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   assert f('+5..', last) == (d(2014,1,30, 22,21), now)\n    assert f('-5..', last) == (d(2014,1,31, 19,47", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           //WalkingRange\n            string swalkingrange = swalkingrange;\n            if (swalkingrange.Contains(\"s\") || swalkingrange.Contains(\"m\") || swalkingrange.Contains(\"h\"))\n                swalkingrange = swalkingrange.", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "\n# ================================================================================\n# Main\n# ================================================================================\nif __name__ == \"__main__\":\n    import argparse\n    parser = argparse.ArgumentParser(\n        description=\"Run test cases for suspend and resume guest.\")", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       rc.get(10, TimeUnit.SECONDS);\n\n        service.submit(pub);\n        service.shutdown();\n        service.awaitTermination(30, TimeUnit.SECONDS);\n    }\n    @Test\n    public void testSub", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().onSend", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tvar compressedSize = 0;\n\t\t\tvar bytes = new byte[4];\n\t\t\twhile (value > 0x7F) {\n\t\t\t\tvar mask = (value & 0x7F) | 0x80;\n\t", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.notify(descr)\n        self.fm.notify(\"Extracting to: \" + cwd.path)\n        self.fm.execute_command(['tar', 'xf', '--extract-only', '--', '--no-overwrite'], au_flags", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t\tobjCOMTest.ConstructorFlag = true;\n\t\t\tobjCOMTest.Id = 3;\n\t\t\tAssert.AreEqual (3, objCOMTest.Id, \"#A04\");\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       repo = self._setup(da, Action.ACCEPTED, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 3)\n        avs = AppVersion.objects.all()\n        flagdata = flags4appversions(avs", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "               userstate.texture = cmd.parameters[\"texture\"]\n            if \"color\" in cmd.parameters:\n                userstate.color = cmd.parameters[\"color\"]\n            if \"voice\" in cmd.parameters:\n                userstate.voice = cmd.parameters[\"voice\"]\n           ", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new ChangeLeaderEvent(group, player));\n        }\n    }\n    public static void changeLeader(Player player, Player newLeader)", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "       if formatter == \"Null\":\n            formatter = \"Terminal\"\n        if formatter == \"Terminal\":\n            formatter = \"Terminal256\"\n        if formatter == \"Terminal256\":\n            formatter = \"Html\"\n        if form", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column, tree_model, tree_iter = self._setup_column(1, True)\n        tree_model.add_map(tree_iter, self._create_store_map(1, True, 15, 2))\n        column.quantity_renderer.set", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t} while (parent != null && parent instanceof Grid);\n\treturn super.doStartTag();\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               XmlNode n = element.SelectSingleNode(\"Dialog\");\n                if (n != null)\n                    Dialog.LoadXML(n);\n                XmlNode n = element.SelectSingleNode(\"Frames\");\n                if (n != null)\n                    FramesLoaded = Convert.To", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                       m_key[i] = new ExodusActivation();\n                    else if (m_Peerless == PeerlessList.MelisandeFelucca)\n                        m_key[i] = new MelisandeFeluccaActivation();\n", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tif (beans != null)\n\t\t{\n\t\t\tjava.util.Iterator iter = beans.iterator();\n\t\t\twhile (iter.hasNext())\n\t\t\t{\n\t\t\t\tcoll.add(((ims.careuk.vo.beans.Change", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "               Version.Version1,\nNext line of code:\n                Version.Version2,\nNext line of code:\n                Version.Version3,\nNext line of code:\n                Version.Version4,\nNext line of code:\n                Version.Version5,\nNext line of code:", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pb = kdf.ComputeHash(pbMsg, pbSalt, pbKey, pbAssoc);\n\t\t\tif(!MemUtil.ArraysEqual(pb, pbExpc))\n\t\t\t\tthrow new SecurityException(\"Argon", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (boolean) (requestManaExact(stack, player, cost, remove) / multiplier);\n\t}\n\t/**\n\t * Requests mana from items in a given player's inventory. This version also\n\t * checks for IManaDiscountArmor items", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "from django.conf.global_settings import *\n\n# django-debug-toolbar\nDEBUG_TOOLBAR_CONFIG = {\n    'DISABLE_PANEL': False,\n    'SHOW_TOOLBAR_CALLBACK': True,\n    'SH", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\"but Lights contains {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       return true;\n    }\n    @Override\n    public int hashCode() {\n        final int PRIME = 31;\n        int result = super.hashCode();\n        result = ((PRIME * result) + ((this.state == null) ? 0 : this", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.callId = p.readInt();\n            dc.callerId = p.readString();\n            dc.number = p.readString();\n            dc.type = DriverCall.typeFromCLCC(p.readInt());\n            dc.call", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isApplicationData()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.get", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                newVertices[x + y * xSizeP] = new Vector3(leftBottomCorner.x, leftBottomCorner.y, 1f);\n                newNormals[", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tresult = client.call(\"add\", testInt1);\n\t\t\t\n\t\t\tLog.i(TAG, \"DoConnectionTest() called add method with result \" + result);\n\t\t\t\n\t\t\trawResult = result;\n\t\t\t\n\t\t\t", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\nNext line of code:\n\t\t\t\treturn new int[0];\n\t\t\t}\n", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"object not found\");\n        }\n        else {\nNext line of code:\n            out.writeBoolean(true);\n            out.writeObject(found.object);\n        }\n        out.flush();\n        out", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                      16 + (~stactics_display_buffer.read(i) & 0x0f),\n                       16,\n                        0, 0,\n                        pixel_x, pixel_y,\n                        Machine.visible_area, TRANSPAR", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                       .IsValid() &&\n                                        minionPrediction.CastPosition.To2D()\nNext line of code:\n                                        .IsValid() &&\n                                        minionPrediction.Hitchance != HitChance.Impossible)\n                                {\n", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       final LinkedList<Node> path = new LinkedList<>();\n        path.add(x);\n        for (Node b : graph.getAdjacentNodes(y)) {\n            if (graph.isAncestorOf(b, x)) {\n                path.addLast(", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   var element=pop[i] as Drawable;\n                    if (element != null)\n                        return element;\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descendants", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       return (this.attachmentFile == null && other.attachmentFile == null)\n            || this.attachmentFile.matches(other.attachmentFile);\n    }\n    \n    @Override\n    public boolean isNew() {\n        return false;\n    }\n    public", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (m_Item.Map == mobiles[i].Map && SpellHelper.ValidIndirectTarget(m_Item.From, mobiles[i]))\n                        {\n                            if (m_Item.From.CanBeHarmful(mobiles[i],", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Where(kv => CanSee(user, kv.Value)).ForEach(kv => MessageTo(user, kv.Key, formatted));\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Join(PlayerMobile user,", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n}\n  @Override\n  public ComponentInstLight getComponentInstLight(String componentId, String userId) {\nNext line of code:\n    return mock.getComponentInstLight(componentId", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "\n                            files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final ZipFilesDialog dialog = new ZipFilesDialog(mActivity);\n                    dialog.setOnZipFilesDialogListener(new Zip", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n        this.channel.close();\n    }\n    public boolean g() {\n        return !this.o && !this.p;\n    }\n    public boolean h() {\n        return this.o || this.p;\n    }\n    public void b(EnumProtocolDirection", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               z_arr[p_index, kk, 0] = per\n                z_arr[p_index, kk, 1] = z_dict[z_key][per]\n                z_arr[p_index, kk, 2] = z_dict", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    } else {\n      String name = String.join(\", \", recipients.toArray(new Recipient[recipients.size()]));\nNext line of code:\n      return context.getString(resourceMany, name);\n", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in iteritems(type_paths):\n                for test in tests:\n                    tests[test] = test_cls(tests_root,\n                                           path,\n                                           obj[\"paths\"][path],\n                                           obj[\"items\"][test_", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compiledScript != null) {\n            try {\n                compiledScript.remove();\n            } catch (Throwable e) {\n                errorsInScript = e;\n                throw e;\n            }\n        }\n    }\n    private Binding createBindingForCompilation() {", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "   for i in range(energy.size):\n      grad_Etf = grad[i].flatten()\n      grad_Etf = grad_Etf.reshape(-1,3)\n      transformed_grad.append(grad_Etf)   \n      transformed_grad = np", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (caseInsensitive)\n\t\t{\n\t\t\treturn this.getText().toLowerCase().compareTo(((OrderInvestigationForStatusChangeVo)obj).getText().toLowerCase());\n\t\t}\n\t\telse\n\t\t{\n\t\t\t", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertTrue(found.contains(stacks[0]));\n        assertTrue(found.contains(stacks[2]));\n        assertTrue(found.contains(stacks[3]));\n        assertFalse(found.contains(stacks[1]));\n    }\n   ", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       crawlParameters.add(new Parameter(pf, \"depth\", depth));\n        //EXCLUSION REGEX\nNext line of code:\n        crawlParameters.add(new Parameter(pf, \"exclusion-regex\", exclusionRegexp));\n        //INCLUSION", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tswitch (kind)\n\t\t\t{\n\t\t\t\tcase LNodeKind.Block:\n\t\t\t\t\tif (candidate.Block == pattern.Block)\n\t\t\t\t\t\treturn true;\n\t\t\t\t\telse\n\t\t\t\t", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   if (colisionList.Count > 0)\n                    {\n                        extendedWillHit += colisionList.Count;\n                        extendedFarmLocation = objAiBase.Position;\n                    }\n                }\n                int shortenWillHit = Minion", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tform.contextMenus = new ims.framework.ContextMenus();\n\t}\n\tprotected void setFormInformation(ims.framework.FormInfo formInfo)\n\t{\n\t\tsuper.setFormInformation(formInfo);\n\t}\n\tpublic ims.framework.", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   return re.search(pattern, frozen_output) is not None\ndef create_prereqs_cache_dir():\n    \"\"\"Create the directory for storing the hashes, if it doesn't exist already.\"\"\"\n    create_prereqs_cache_dir()\n", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'subs': [(1, 1, 1), (2, 2, 2), (3, 3, 3)]\n        })\n        f = Form(r)\n        with Form(f, view='test_testing_utilities.o2m_parent", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert change_index(Sum(x**2, (x, a, b)), (a, b, c)) == \\\n        Sum(x**2, (x, a, c))\n    assert change_index(Sum(x**2, (x, a, b)), (", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tUnityEngine.WWW self=(UnityEngine.WWW)checkSelf(l);\n\t\t\tSystem.String a1;\n\t\t\tcheckType(l,2,out a1);\n\t\t\tvar ret=self.UnEscapeURL(", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else if (action == NotifyCollectionChangedAction.Remove)\n            {\nNext line of code:\n                this.InitializeAdd(action, null, startingIndex);\n            }\n            else\n", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            InputStream is = new ByteArrayInputStream(writer.toString().getBytes());\n            Document testDocument = parser.parse(is);\n            writer.close();\n            is.close", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                case Param.CampusName:\n                    c.CampusName = Token2Csv();\n                    break;\n                case Param.CampusType:\n                    c.C", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"width: {0}\", ide.width);\nConsole.WriteLine (\"height: {0}\", ide.height);\nConsole.WriteLine (\"colorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"reserved: {0}\", ide.reserved);\nConsole.WriteLine (\"", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               JSR.prev = l;\n            }\n        }\n        // for each block in the control flow graph\n        for (Label l = next; l != null; l = l.next) {\n            if (l.inSubroutine(id)) {\n                // this block", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition.select(position);\n\t\t}\n\t\t\n\t\tprivate Position getPosition() {return comboLabelPosition.getSelection();}\n\t\tprivate void setPosition(Position position) {\nNext line of code:\n\t\t\tcomboLabelPosition", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self.assertEqual( int(currImageValue), int(lastImage", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "   if srv_token is not None:\n        self.transport._set_K_H(self.g, self.p, self.f, mic_token)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           tree.setEnabled(disableTreeSelection);\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                          (self.employee_id, from_date, to_date, code))\n                res = self.cr.fetchone()[0]\n                return res or (0.0, 0.0)\n\"\"\"            def sum(self, code, from_date, to", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       dVdzdOm.append(np.log(np.sum(np.array([cosmo.dVdzdOm(m) for m in marr])**2.))/cosmo.E0(zi))\n        #Number of Msun objects/Mpc^3", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       if (font != null) {\n            d.width = font.getSize() * 1.5;\n        }\n        return d;\n    }\n    \n    @Override\n    protected void addNotationArguments() {\n        super.addNotationArguments();\n        add", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       self.cal_p2(ref_p=None,phi=phi,flag=flag)\n        self.share_face_init(self.flag)\n        self.container=np.zeros((1,18))[0:0]\n        self.container[0", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Visibility = window.Visibility == Visibility.Visible ? Visibility.Hidden : Visibility.Visible;\n\t\t}\n\t\tprivate void ShowOrHide(Window window, bool visible)\n\t\t{\n\t\t\tif (window == null)\n\t\t\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "                   for n in xrange(params[0]['nbins'])\n                ]\n            if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                    / float(params[1]['nbins'])\n", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           protocol.getStorage().deleteMessageArchive(query.getReference());\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\",", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tret.add(rsp.getBytes());\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected void parseLog24(Application app, ArrayList<byte[]> l) {\n\t\tfor (byte[] raw : l) {\n\t\t\tfinal byte", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "       return self.desc\n\n", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tsupport = null;\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "   def __call__(self, environ, start_response):\n        \"\"\"Process incoming WSGI request.\n        Ref: :pep:`3333`\n        Args:\n            environ (Mapping): a dict containing WSGI environment variables\n            start_response (callable):", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tfrom random import random\n\t\tfrom numpy import array\n\t\tfrom numpy import linalg\n\t\tfrom numpy import mean\n\t\tfrom numpy import cov\n\t\tfrom numpy import log\n\t\tfrom numpy import logspace\n\t\tfrom numpy import exp\n\t\tfrom numpy import", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(chance) < res.baseChance)\n                res = EnhanceResult.Failure;\n        }\n        public static void CheckResult(ref EnhanceResult res, int chance, int bonus)\n        {\n            if (res != Enh", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           entries[entry_name] = rdltypes.UserEnum(\n                entry_value, entry_name, displayname, desc\n            )\n        return rdltypes.UserEnum(\n            entries, type_name\n        )\n    #---------------------------------------------------------------------------\n    def", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"No modules found!\");\n                    this.Close();\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Unable to locate FOG Service\");\n                this.Close();\n            }\n        }\n        private void btnSave_", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n       ", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               for(int tri = 0; tri < this.trianglesUsed[textureHash]; tri++)\n                {\n                    if(this.trianglePoint >= 3 * this.trianglesUsed[textureHash])\n                        throw new IllegalStateException(\"missing endTri", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   exposedHeaders = exposedHeaders.split(', ')\nNext line of code:\n    if header not in exposedHeaders:\nNext line of code:\n        exposedHeaders = exposedHeaders + [header]\nNext line of code:\n    response['Access-Control-Expose-Headers'] = exposedHeaders", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if(d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                        // We do not need to close the driver, we just remove\n                        // it from the", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "       var = (var,)\n    return var\ndef _get_shape(area_extent, shape, upper_left_extent, center, radius, resolution, units, p, crs):\n    \"\"\"Get shape from area_extent, shape, upper_left_extent", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.setRewardList(REWARDS)\nQUEST.onTalk = Quest.onTalk\nQUEST.onKill = Quest.onKill\nQUEST.onEvent = Quest.onEvent\nQUEST.onStateChange = Quest.onStateChange\n", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tint num2 = (int)Math.Floor(((double)nullable.Value - (double)num * 60 * 60) / 60);\n\t\t\t\t\tstring empty = new string(new char[] { ' ', ':',", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           Program = GL.GenProgram();\n            Attributes = new AttributeCollection(this);\n            Attributes.AddRange(Shader.GetAttributes());\n            VertexDataSize = Attributes.Aggregate(GetAttributeSize).Sum();\n            VertexDataStride = (int)", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       self._model = self\n\n    def __str__(self):\n        return self.name\n    def __repr__(self):\n        return self.name\n    def __eq__(self, other):\n        if not isinstance(other, Model):\n            return False\n        return", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor (int i=0; i<beans.size(); i++)\n\t\t{\n\t\t\tcoll.add((TumourGroupListVo)beans.get(i));\n\t\t}\n\t\treturn coll;\n\t}\n}\n\n\n\n\n\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcurrent.x=lines[selectedLine].x;\n\t\t\t\tcurrent.y=lines[selectedLine].y;\n\t\t\t\tcurrent.width=lines[selectedLine].width;\n\t\t\t\tcurrent.height=lines[selectedLine].height;\n", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       new LayoutAnimationController(set, 0.25f);\n        controller.setDuration(50);\n        controller.setInterpolator(new AccelerateInterpolator(1.5f));\n\n\n        set.setDuration(100);\n        set.", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.FieldKey == ARow.FieldKey)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey + 1;\n                    break;\n                }\n            }\n            // set the key for the new row\n            A", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t\tfor (int i = 0; i < length; ++i)\n\t\t\t{\n\t\t\t\tscoresSol[i] = this.predict(pssm, i);\n\t\t\t}\n\t\t\t\n\t\tdouble[] scores = new double[length", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
