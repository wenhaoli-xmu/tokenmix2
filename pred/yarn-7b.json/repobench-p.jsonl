{"pred": "   private final transient KadConfiguration config;\n    private final transient KadSerializer<JKademliaStorageEntry> serializer;\n    private final transient KadConfiguration config;\n\n    private final transient KademliaRoutingTable routingTable;\n    private final trans", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       // mParameterListView = (ViewGroup) mActivity.findViewById(parameterListViewId);\n\n        mParameterListAdapter = new EffectParameterListAdapter(activity);\n        mParameterListView.setAdapter(mParameterListAdapter);\n\n        // Add the default effect\n        mEffects.add", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "\nclass Encryption1(Encryption):  # noqa: D101\n    input_widths = [8]\n    output_widths = [8]\n\n    @classmethod\n    def eval(cls, *pt):\n        return tuple([pt[0] +", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "       private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n\n    public EffectManager(Activity activity, SpectaculumView spectaculumView) {\n        mActivity = activity;\n        mSpectaculumView = spectaculumView;\n        mEffects", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "       commandProcessor.addHandler(\n                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n    }\n\n    private void queueEvent(Event event) {\n        this.eventQueue.add(event);\n", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    * 1. 获得任务配置\n     * 2. 获得Runner任务\n     * 3. 获得RunnerLog\n     * 4. 获得任务异常\n     * 5. 获得Croner任务", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tintegrityCheck.check(args.path(), passphrase, args.checkFileIntegrity());\n\t\t} catch (AbortCheckException e) {\n\t\t\tprint(e.getMessage());\n\t\t\treturn;\n\t\t} catch (IOException e) {\n", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "\n            // save device to storage\n            DeviceTask.getInstance().saveDevice(deviceToBeRegistered);\n\n            // save regId to storage\n            DeviceTask.getInstance().saveRegistrationId(regId);\n\n            // notify the activity that the device was registered\n            DeviceTask.", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   SignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);\n\n    assertEquals(new U2fSignRequest(ACCOUNT_NAME, APP_ID_SIGN, SIGN_REQUEST_DATA, SESSION_", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "           self.uaA.acctA = self.uaA.acctO\n            self.uaA.acctO = None\n        self.uaA.conn_cbs = (self.aConn,)\n        self.uaA.disc_cbs = (", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "   def __init__(self, uri, **kwargs):\n    def __init__(self, uri, **kwargs):\n    def __init__(self, uri, **kwargs):\n    def __init__(self, uri, **kwargs):\n    def __init__(self, uri, **kwargs):", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": " def __finalize__(self):\n    self.__finalize()\nNext line of code:\n  def __finalize__(self):\n    self.__finalize()\nNext line of code:\n  def __finalize__(self):\n    self.__finalize()\nNext line of code", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               intent.setDataAndType(Uri.parse(url), \"video/x-flv\");\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    public static void playVideo(TDActivity activity, TwitchChunks chunks) {\n        if", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       Log.d(\"SettingsActivity: \", \"postLocationInformation(): latitude: \" + latitude +\n                \", longitude: \" + longitude);\n        String latitudeStr = String.valueOf(latitude);\n        String longitudeStr = String.valueOf(longitude);\n        String[] locationData = new String", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "       # pylint: disable=missing-function-docstring\n        self.assertTrue(all(isinstance(self.network, Network)\n                           for self.network in self.net.values()))\n\n    def test_valid_network(self):\n        ''' Valid network.", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "   def __new__(cls, *args, **kwargs):\n        init_called = True\n        return super().__new__(cls, *args, **kwargs)\n\n    engine.bind(User, __new__=init_called)\n\n    user = User(id=\"user_", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "\n\n@method(infix('&', bp=72))\ndef evaluate_simple_and_operator(self, context=None):\n    return self.string_value(self.get_argument(context)) if self.get_argument(context) else 'false'\n\n", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HSBAdjustTransformation(0xff000000).setHSB(0xff000000).setSaturation(0xff000000).setBrightness(0xff000000),", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "\n    private static final ButterKnife.Action<View> HIDE = (view, index) -> view.setVisibility(View.GONE);\n    private static final ButterKnife.Action<View> SHOW = (view, index) -> view.setVisibility(", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "               writeResponse(instance, correlationId);\n\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, ADD_NOTIFICATION_LISTENER, correlationId", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "       await wild.insert()\n\nclembot/exts/wild/wild.py\nclass Wild:\n\n    by_id = dict()\n    by_message = dict()\n\n    def __init__(self, bot, wild_id, guild_id, rep", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "   if c['vocab_def']:\n        dictionary = Dictionary(c['vocab_def'])\n    else:\n        dictionary = None\n    # Load data\n    if c['vocab_text']:\n        vocab_text = Vocabulary(", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": " assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.amplitude == 50.\n", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "               new ParticipantSendTask(getActivity(), participant){\n                    @Override\n                    protected void onPreExecute() {\n                        super.onPreExecute();\n                        mSwipeRefreshLayout.setRefreshing(true);\n                    }\n\n                    @", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "       assert self.redlock.locked()\n        assert not self.redlock.locked()\n\n    def test_release(self):\n        self.redlock.acquire()\n        assert self.redlock.locked()\n        self.redlock.release()\n        assert not self", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "       cone_settings = ConeSettings(self._sptr, \"threed_cone_settings\")\n\n    def set_cone_orientation(self, cone_orientation):\n        \"\"\"Set the cone orientation.\n\n        :param float cone_orientation: The cone orientation.\n", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "   def __init__(self, calg=CompressionAlgorithm.Uncompressed):\n        self._calg = calg\n\n    def __len__(self):\n        return self._calg.compress(self.data)\n\n    def __repr__(self):\n       ", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "   if not cellShapeThreshold is None:\n        cellSize = findCellSize(imgshape, detectCellShapeParameter = detectCellShapeParameter, verbose = verbose, out = out, **parameter);\n        print \"Found %s cells!\" % cellSize.shape[0];\n    \n   ", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "       } else if (accuracy == Accuracy.GREAT) {\n            Assets.perfectTapSound.play(Gdx.g.getAccuracy() * Gdx.g.getAccuracy() * Gdx.g.getAccuracy() *", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "           while (transactionIterator.hasNext()) {\n                transactionIterator.next();\r\n            }\n            System.out.println(print);\r\n        }\r\n    }\r\n}\n", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "               } else if (query.queryType == RequestType.GROUPBY) {\n                    Either<String, Tuple2<List<String>, List<String>>> dataSourceDescRes = coordinator.aboutDataSource(stmnt.dataSource, reqHeaders);\n                    if (data", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "                   UsageEncryption.OSY,\n                    OperationMode.CBC,\n                    EncryptionAlgorithmCoded.TWOKEY3DES,\n                    HashAlgorithm(\n                        AlgorithmParameterName.IVC,\n                        AlgorithmParameterIVValue.random,\n", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                           setupCombExpCheck(root, i);\n                        }\n                    }\n                }\n            } else { // USE_SUBEXP_CALL\n                if (env.combExpMaxRegNum > 0) {\n                    for (int i=1;", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "   url(r'^job-details$', JobDetailView.as_view(), name=\"job-details\"),\n    url(r'^job-logs$', JobsLogsView.as_view(), name=\"jobs-logs\"),\n    url(r'^jobs-", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\n\t\tString notEnoughData;\n\t\t\n\t\tpublic ResourceData (Meter m, EnumMap<SRSLevel, String> tags, EnumMap<SRSLevel, Integer> colors) {\n\t\t\tthis.meter = m;\n\t\t\t", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "       self._storage_type = storage_type\n        return self\n\n    @staticmethod\n    def _read_field(field):\n        if field[0] == 3:\n            # Push notification, Node cluster changed\n            # TODO: UNTESTED CODE!!!\n           ", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   public <$Result> Then<$SystemUnderTest, $Result> then(CheckedConsumer<$Result> thenStepAboutResult,\n            CheckedConsumer<$SystemUnderTest> thenStepAboutSystemUnderTest) {\n        return thenStepFactory.buildThen(preparation,", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": " }\n\n  private String await(String... args) throws IosDeviceException {\n    return await(\n        idevice.info(\n            \"-u\",\n            \"-s\",\n            \"-f\",\n            \"-i\",\n            \"-e\",\n            \"-n\",\n            \"-", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\tif (LauncherApp.getCategoryManager().getCurCategory().equals(CategoryManager.HISTORY)) {\n\t\t\ttextColor = Color.WHITE;\n\t\t} else {\n\t\t\ttextColor = Color.WHITE;\n\t\t}\n\t}\n", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessageBuilder message = XmlUtil.fromXml(xml);\n\t\tif (message.isTextMessage()) {\n\t\t\treturn talk(message.asTextMessage().ToUserName, message.asTextMessage().Content);\n\t\t}\n\t\tif (message.isImageMessage", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   with open(os.path.join(file_path, '_info_', 'file_info.json'), 'w') as f:\n        f.write(file_info)\n    with open(os.path.join(file_path, '_info_', 'file_info", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "   @channel_checks.raid_report_enabled()\n    async def cmd_raidcity(self, ctx, city):\n        \"\"\"\n        **!raid-city <city>** - returns the city name of the raid party\n        \"\"\"\n\n        raid_party = Ra", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertTrue(isinstance(date_string_to_date(\"25-11-2015\"), datetime))\nNext line of code:\n        self.assertTrue(isinstance(date_string_to_date(\"11-12-2012", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       config_actor = ConfigActor(config_file)\n        config_actor.start()\nNext line of code:\n        drone_data_socket.connect(SocketNames.CONFIG_COMMANDS.value)\n\n        # setup the database actor\n        database_actor =", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           if (TextUtil.isNull(picture.getComment_author().trim())) {\n                                ToastHelper.Short(ConstantString.COMMENT_FAILED);\n                                return;\n                            }\n                            String commentUrl = picture.getPics()[0", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\twrite_tm_filetype(opts.tmifile[0],\n\t\t\t\t\t\timage_array = outdata,\n\t\t\t\t\t\tmasking_array = masking_array,\n\t\t\t\t\t\tmaskname = maskname,", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "               StreamSyncAdapter.class,\n                StreamsFragment.class,\n                StreamContentProvider.class,\n                StreamsFragment.class,\n                OhmletsFragment.class,\n                OhmletsSearchFragment.class,\n                StreamContentProvider.class,\n                StreamSyncAdapter.", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "               PubKeyAlgorithm.ECDH: ECDSASignature,\n                PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ElGamal: ECDSASignature,\n                PubKeyAlgorithm.ElGam", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "   elif context is None:\n        raise self.missing_context()\n\n\n@method(nullary('::'))\ndef select_name_shortcut(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    elif isinstance(", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "     'no_members': Counter\n      'servers': Source\n      'downed': Source\n      'downed_count': Counter\n      'downed_size': Counter\n      'downed_age': Counter\n      'downed_count_since_last_", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "       nc._send_message_with_protocol(\n        NetstringProtocol(protocol, nc))\n\n    def test_send_message_with_protocol_bad_length(self):\n        \"\"\"\n        Ensure the correct exception is raised if the length of the message\n        is", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       assertTrue(\"is statement\", qe instanceof StatementExecution);\n        assertTrue(\"is statement\", qe instanceof StatementExecution);\n        assertTrue(\"is statement\", qe instanceof StatementExecution);\n        assertTrue(\"is statement\", qe instanceof StatementExecution);\n        assertTrue(\"", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "\n        Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testBatchSuccess() {\n        StatementBatchExecution se = new Statement", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "               continue\n            \n            # Create the request\n            yield device.createLinkADRRequest(scheduled)\n            \n            # Send the request\n            yield device.sendLinkADRRequest(self.band, self.config.adrmargin)\n        \n        self.adrprocessing =", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "   procs.append(FmllrRescoreFunction(args))\n            for p in procs:\n                p.start()\n                for result in tqdm.tqdm(p.get_results()):\n                    sum_errors += result[2]\n                   ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#\n# 0x000000000: not present\n# 0x000000001: reserved\n# 0x000000002: 16-bit address\n# 0x0000", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       DatabaseManager.INSTANCE.setAccessToken(null);\n        super.onStart();\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        chatInfo = inflater.inflate(R.layout.chat_", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "   parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\n    parameter = DataElementGroupField(type=ParameterTwostepTAN7)\n\n\nclass HITANS8(H", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "   if self.img_handle is None:\n\n\n        jd = jd2Date(self.current_time)\n        json_dict['reference_time'] = jd\n\n\n\n        # Save reference Alt/Az\n        azim, elev = raDec2AltAz", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "       mPublicRoomsList = new ArrayList<PublicRoom>();\n        mPublicRoomsList = new ArrayList<PublicRoom>(ViewedRoomTracker.getPublicRoomsList(this));\n\n    }\n\n    private void refreshRoomList() {Next line of code:", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "       self.guild_metadata = GuildMetadata(bot, ctx.guild)\n\n    @group(name='bingo')\n    async def bingo(self, ctx):\n\n        if ctx.invoked_subcommand is not None:\n            if ctx.invoked_", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "       chim_detect = ChimeraDetector(raw_bp_graphs[ID_LARGEST], phylogeny)\n\n    #running breakpoint graph\n    for stage in run_stages:\n        if not chim_detect:\n            chim_detect", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new BlockChangeListener(this), this);\n        plugins.registerEvents(new BlockBurnEvent(this), this);\n        plugins.registerEvents(new BlockBreakEvent(this), this", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                   stopMiPush();\n                    startMiPush();\n                }\n                Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            default:\n                Log.e(MYTAG, \"不使用任何推", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<String>(STRING));\n        registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new MarshalledResponseHandler<Query", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "\n    public PersonalVulnsWindow(boolean showHighlights) {\n        super(\"PersonalVulns\", showHighlights);\n        initComponents();\n    }\n\n    public PersonalVulnsWindow(boolean showHighlights, boolean showHostnames) {\n        super", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "   private void createMetricChartPanel(\n            int metric,\n            DatasetGenerator datasetGenerator,\n            List<GCStatsChartPanel> list) {\n        ChangingCategoryDatasetWithTTG dataset =\n                datasetGenerator.newCategoryDatasetWithTTG(metric, false);\n", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       try {\n            if (packet.isAckRequested()) {\n                ackManager.onAck(client, packet);\n            } else if (packet.getType() == PacketType.MESSAGE) {\n                namespacesHub.onEvent(client,", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "     lMS.addTrack(new VideoTrack(lMS.nativeStream,\n          appRtcClient.videoConstraints()));\n    }\n      Log.d(TAG, \"Created local video source: \" + lMS.toString());\n    }\n\n    {\n      logAndToast", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "           contentValues.put(JobStorage.COLUMN_LAST_RUN, -1L);\n            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, -1L);\n            contentValues.put(JobStorage.COLUMN_BACKOFF_POL", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "\n\n    private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n    private CheckBoxPreferenceHideMenuBar preferenceHideMenuBar;\n    private CheckBoxPreferenceHideAutoCompleteButton preferenceHideAuto", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "\n    logger.info(CORE_LOG_PREFIX + \"coopy init..\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "   docker_config.add_volume_mappings(self.config.volume_mappings)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "   for (String sectionURL : SectionURLs) {\n      List<Board> results = LoadFavoriteBoardsInFolder(String.format(\"%s/\", SMTHApplication.getAppContext().getString(R.string.app_name)));\n      if (results.size() > ", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "       if (DatabaseManager.INSTANCE.isDBInitialized()) {\n            Log.d(\"SearchContactFragment\", \"DB initialized\");\n            new SearchUserTask(this, searchSpinner.getSelectedItem().toString());\n        }\n    }\n\n    @Override\n    public View onCreate", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\t\tif (writeTML) {\r\n\t\t\tString tml = model.getTML();\r\n\t\t\tif (tml != null) {\r\n\t\t\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\t\tsb.append(\"public class \").append(model.get", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       self.assertTrue(self.simulator_data_client.send_simulator_data())\nhuginn/fdm.py\nclass Velocities(object):\n    \"\"\"The Velocities class is a wrapper around the JSBSim objects that contains\n    the values of the", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "           this.httpMessage.getRes().setContentAsString(textareaMessage.getText());\n        }\n        this.httpMessage.getRes().setContentAsString(\"\");\n        this.httpMessage.getRes().setComment(textareaMessage.getText());\n        this.httpMessage.get", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "   assert simple_table_status(description) == expected_status\n\n\n@pytest.mark.parametrize(\"table_status, gsi_status, expected_status\", [\n    (\"ACTIVE\", \"ACTIVE\", ready),\n    (\"ACTIVE\", None, ready),", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "\n    def _load_file(self, fileobj):\n        self._header = ID3Header(fileobj)\n        self.version = self._header.version\n        self._header.size = self.size\n        self._header.data_offset = self.offset\n        self", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\n      return null;\n    }\r\n\r\n    visitProxOp(new VisitOrd3(n), query);\r\n    return null;\r\n  }\r\n\r\n  /**\r\n", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EdgeTransformation().setDistance(2),\n                    new EmbossTransformation().setBumpHeight(1),\n                    new LevelsTransformation(),\n                    new RGBAdjustTransformation(0.3f, 0.3f, 0.3f", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "\n        try:\n            self._header[0]\n            self._header[1]\n            self._header[2]\n            self._header[3]\n            self._header[4]\n            self._header[5]\n            self._header[6]\n            self._", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "   api = BMUNITSEARCH(args.apikey)\n    if not api.get_data(**{'FromDate': args.fromdate or date.today(),\n                           'ToDate': args.todate or date.today(),\n                           'FromTime': args", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\t\titems.add( new GalleryAlbum( proxy ) );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy );\n\t\t\t} // if-else\n\t\t\titems.add( item );\n\t\t} // for\n\n", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   dump_key(engine, user)\n\n    assert dump_key(engine, user) == user_key\n\n\ndef test_extract_key(engine):\n    user = User(id=\"foo\", email=\"foo@bar.com\")\n    user_key = {\"id\":", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "       new ConsoleProgress(System.out,\n        new ProgressMonitorFactory().newMonitor(\"CustomConsoleExample\", 100L),\n        new ProgressBar(5, BAR_EQUALS), new Percentage(50), new Status(\"Completed\")),\n        new", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\t\treturn new FormFor(resource, fields);\n\t}\n\n}\n", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "           event = Event(e, self)\n            events.append(event)\n        return events\n\n    def get_event(self, event_id):\n        data = self.call_api(\"events/%s\" % event_id)\n        return Event(data, self)\n", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "       Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n    ", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           if (Preferences.get(this).isPremiumRequestEnabled()) {\r\n                try {\r\n                    if (mExitTransition != null) {\r\n                        mExitTransition.exit(this);\r\n                    } else {\r\n                        mExitTransition = new ExitActivityTrans", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": " private static final Pattern BOOST_EXTRACTOR = Pattern.compile(\"^(.*?)\\\\^(\\\\d+(?:\\\\.\\\\d+)?)$\");\r\n  private final static Logger logger = Logger.getLogger(QsolToQueryVisitor.class.getPackage().getName());\n ", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\tif not ARG_CHECKER.check(args,mode='converting'):\n\t\t\texit(0)\n\n\n\n\t\tif not os.path.isfile(args.phenotype):\n\t\t\traise ValueError('There is no phenotype", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "   self.beginning_datetime = filenameToDatetime(self.vid_path)\n\n    self.beginning_datetime = filenameToDatetime(self.vid_path)\n\n    self.beginning_datetime = filenameToDatetime(self.vid_path)\n\n   ", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "   ilms.LegendrePoly3D(zrange=0.0, laser_wavelength=0.45, zslab=-29.3,\n        alpha=1.17, polar_angle=0., pxsize=0.125,", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);\n\t\t\tPacketFoodGroup.resetCount();\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "\n        comments = Comment.objects.filter(post=post).order_by('-net_votes')\n        comments = chain(comments, comments.filter(deleted=False))\n        comments = sorted(comments, key=attrgetter('net_votes'), reverse=True)", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\t\tISelection selection = selectionLayer.getSelection();\n\t\t\t\t\t\tif (selection instanceof IStructuredSelection) {\n\t\t\t\t\t\t\tIStructuredSelection structuredSelection = (IStructuredSelection) selection;\n\t\t\t\t", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "       def keyclass_int(self, val):\n            self._keyclass = val\n\n    def __init__(self):\n        super(RevocationKey, self).__init__()\n        self.keyclass = 0\n\n    def __bytearray__(self):\n       ", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "       if isinstance(item, ProcessingInstruction):\n            yield item\n\n\n@method('processing-instruction')\ndef is_pi_kind_test(self):\n    return self.parser.next_token.symbol == 'processing-instruction'\n\n\n@method(", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "   return '%'.join(puffles_as2_str)\r\n    #This line:\r\n    return '%'.join(puffles_as2_str)\r\n    #This line:\r\n    return '%'.join(puffles_as2_str)\r\n    #", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "   P.set_tile(tile)\n    H.set_tile(tile)\n    I.set_tile(tile)\n    im.set_image(P, H, I)\n\nmake_image_0()\nim.draw()\n\n", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "   # platepar.rotation_from_horiz = rotationWrtHorizon(platepar)\n\n\n    # Recompute the rotation wrt horizon\nNext line of code:\n    # platepar.rotation_from_horiz = rotationWrtHorizon(platepar)\n", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLUMN_END_MS, 100_000L);Next line of code:\n        contentValues.put(JobStorage.COLUMN_FLEX_MS, 200_000L);Next line of code", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       FragmentObservable.getInstance().register(this);\n        super.onStart();\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        FragmentObservable.getInstance().register(this);\n    }\n\n    @Override\n    public", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "       model = Progress\n        fields = ['component', 'year', 'fiscal_year', 'value', 'remarks']\n\n\nclass AreaTypeFilter(django_filters.FilterSet):\n    code = django_filters.CharFilter(lookup_expr='icontains')\n   ", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           fab.collapse();\n        }\n    }\n\n    @UiThread\n    protected void showButton() {\n        if (fab.getVisibility() == GONE) {\n            fab.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "           @Override\n            protected void onSuccess(final Channel value, final Completable<? super Void> result) throws Exception {\n                context.handleSuccess(result);\n            }\n\n            @Override\n            protected void onFailure(final Throwable cause, final Completable<? super Void> result", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "\n        new RegisterFragment().registerDialog(new User(email, password, 0));\n\n        Log.d(this.getClass().getSimpleName(), \"User registration successful: \" + success);\n        Log.d(this.getClass().getSimpleName(), \"User name: \"", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "   private final RoadPoint source, target;\n    private final Map<RoadPoint, Double> neighbors;\n    private final Map<RoadPoint, Double> distances;\n    private final Map<RoadPoint, Double> azimuths;\n\n    private final Map<Road", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "\n    private final List<String> mDataList;\n    private final List<Integer> mChildList;\n    private final List<Integer> mCheckedList;\n    private final List<String> mUrlList;\n    private final List<FilterType> mTypeList;\n    private", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": " assert isinstance(args.gps_sv[0].getMessage(), ZeroOneMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All Ones message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "\n    def _render_gradient_fill(self):\n        fill = self.style.fill\n        tris = self.triangles\n        self.svg.n_tris += len(tris) / 3\n        g = None\n        if isinstance(fill, str):", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(\"[\")) {\n\t\t\t\t\tString[] lines = data.split(\"[\\\\[\\\\]\");\n\t\t\t\t\tfor (String line: lines) {\n\t\t\t\t\t\tif (line.startsWith(\"[\"))", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "               if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "\n        self.beg_alt = self.beg_vect[1]\n        self.end_alt = self.end_vect[1]\n\n        # Compute the great circle (in radians)\n        self.gc = greatCircle(self.beg_alt,", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(ctx.ID().getText());\n\t\tMMethod m = new MMethod(s);\n\t\tfor (ParseTree t : fheads) {\n\t\t\tm.addArg(new MArg(t));\n", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "\n    boolean add(SelectorNode node);\n\n    boolean add(MediaQueryNode node);\n\n    boolean add(SelectorSegmentNode node);\n\n    boolean add(ExpressionPhraseNode node);\n\n    boolean add(ExpressionGroupNode node);\n\n    boolean add(FunctionNode", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "   public OpenAPIProcessor(ProcessingEnvironment processingEnvironment, Elements elementUtils, Types typeUtils, Messager messager) {\n        super(processingEnvironment, elementUtils, typeUtils, messager);\n        this.elementUtils = elementUtils;\n        this.typeUtils = typeUtils;\n", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "\n        bind(GerritCheckoutProvider.class);\n        bind(GerritHttpAuthDataProvider.class);\n\n        bind(GerritDiffModule.class);\n        bind(GerritActionsModule.class);\n        bind(GerritUiModule.class", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                   long zxid = parseLong(zxid.substring(2),16);\r\n                    int zxidInt = parseInt(zxid.substring(2),16);\r\n                    long zxidLong = zxidInt;\r\n                    snapFile =", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "       if filter_type is FilterType.Unassigned:\n            entries = [e for e in entries if e.has_unassigned_split]\n\n    def _create_pane(self, pane_type, account=None, parsing_date_format=None):\n", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "\n        ('Start Of Frame (Baseline DCT)', 'SOF0'),\n        ('Start Of Frame (Extended Sequential DCT)', 'S0F1'),\n        ('Start Of Frame (Progressive DCT)', 'SOF2'),\n        ('Start Of Frame", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\tsearchList.setVisibility(View.GONE);\n\t\t\t\t\t\treturn Observable.empty();\n\t\t\t\t\t})\n\t\t\t\t\t.subscribe(empty -> {\n\t\t\t\t\t\tsearchList.setVisibility(View.G", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "   # 2. add a background\n    bkg = np.zeros_like(POS)\n    bkg[:,:,:,0] = 0.005\n    bkg[:,:,:,1] = 0.005\n    bkg", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "       result, index = apply_fast_and(left.values, right.values,\n                                      left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and(left.values, right), left.index)", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                   String request = RequestFragment.sSelectedRequests.get(i).getName();\r\n                    if (request == null) continue;\r\n                    stringBuilder.append(String.format(\"Requested: %s\", request));\r\n                    if (Preferences.get(mContext.get", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "           instance,\n            (int, float, Decimal, datetime.datetime, Duration, AbstractDateTime)\n        )\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        if issubclass(subclass, bool):\n            return False\n        return is", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "           return SearchMenuPage(self._createSearchHistory(context))\nde/generia/kodi/plugin/frontend/zdf/search/SearchHistory.py\nclass SearchHistory(object):\n    entries = []\n    storeFile = None\n    searchHistorySize = None\n    ", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "               if pattern.bank is not None and not checkFileExistence(pattern.bank):\n                    errmsg += \"Rietveld.validate():  pattern.bank = %s does not exist.\\n\"%(pattern.bank)\n\n\n        return rvalue, errmsg\n\n", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "   serializer_class = PlanSerializer\n\n\nclass GoalViewSet(ModelViewSet):\n    queryset = Goal.objects.all()\n    serializer_class = GoalSerializer\n\n\nclass TargetViewSet(ModelViewSet):\n    queryset = Target.objects.", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "   private StarItemAdapter starItemAdapter;\nNext line of code:\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\nNext line of code:\n    private RepoContentTask repoContentTask;\nNext line of code:\n    private List<ContentItem>", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tFile outputForFOFile = new File(basePathDDI2FO, FilenameUtils.removeExtension(FilenameUtils.removeExtension(getFormName(inputFile),\n\t\t\t\tConstants.CLEANED_EXTENSION));\n\t\tlogger.debug(\"Output folder", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       // Send the request\n                        try {\n                            new UserLoginTask(activity, this.getClass()).execute(\n                                    emailTmp,\n                                    R.string.registration_password_title,\n                                    R.string.registration_password_", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "   url(r'^$', PipelinesView.as_view(), name=\"pipelines\"),\n    url(r'^new$', staff_member_required(AddPackageCIPipeline.as_view()),\n        name=\"add-ci-pipeline\"),\n    url(r", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, BandBitEncoder)\n  assert encoder.bandIndexes[0] == NormalRateConfig.GPS", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "   tg = textgrid.openTextgrid(tgAsDict, duplicateNamesMode=\"rename\")\n\n    return tg._getIntervalsInInterval(tgAsDict)\n\n\ndef read_tg_as_dict(fn):\n    \"\"\"\n    Read a text", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "       procs.append(KaldiProcessWorker(i, return_queue, function, error_dict, stopped))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "       dataset = UAV123(root_dir, version=version)\n        self._check_dataset(dataset)\n\n    def test_lasot(self):\n        root_dir = os.path.join(self.data_dir, 'LaSOT')\n        dataset", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "   boolean isSet(String tag);\n    boolean isSet(ObjectTag tag);\n    boolean isSet(GroupTag tag);\n    boolean isSet(DecimalTag tag);\n    boolean isSet(BooleanTag tag);\n    boolean isSet(IntTag tag);\n    boolean isSet(", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "           yield self._create_chunk(chunk_idx, bounds)\n\n    def _create_chunk(self, chunk_idx, bounds):\n        \"\"\"Create a chunk.\"\"\"\n        # chunk_idx: 0, 1, 2, ...\n        # bounds: [s_", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAndQueryNode andQueryNode, Void param) {\n\t\t\tAlvisIRAndQueryNode queryNode = new AlvisIRAndQueryNode();\n\t\t\tExpansionResult result = new ExpansionResult();\n\t\t\tfor (Al", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate final ByteArrayOutputStream mergedParameters;\n\tprivate final ByteArrayOutputStream mergedParameters2;\n\n\tprivate final String inputFolder;\n\tprivate final String outputFolder;\n\tprivate final String subFolder;\n\tprivate final String inputFile;\n\tprivate final String inputFile2;\n\t", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (GET_ATTRIBUTE ^ RESPONSE_MASK), new MarshalledResponseHandler<Object>(Object.class));Next line of code:\n        registry.put((byte) (GET_ATTRIBUTES ^ RESPON", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "\n\n                        LogDB.logWithUrl(id+\"#\"+hash,url,lang);\n                        String[] words = Utils.removePuntuation(content);\n                        for (String word : words) {\n                            //check if this word already exists in the map\n                ", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "\n    def _render_descriptor_helper(self, descriptor, indent):\n        if isinstance(descriptor, AssociatedFieldNode):\n            lines.append('{}{} {}'.format(indent, descriptor, descriptor.name))\n            if descriptor.X == ", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "       help=\"network latency time [millisecond].\",\n    )\n\n    group.add_argument(\n        \"--delay-distribution\",\n        dest=\"latency_distribution\",\n        choices=DELAY_DISTRIBUTIONS,\n        default=DELAY_DI", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "       return Contact.objects.filter(phone_number=self.phone_number)\n\n\n    def get_all_contacts(self):\n        return self.get_contacts()\n\n    def get_contacts_with_language(self, language):\n        return self.", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   PCollection<GCPProject> liveProjects =\n        pipeline.apply(\"Read live GCP resources\",\n            Read.from(new LiveProjectSource(org)));\n\n    // Tag the state objects to indicate they're from the live API and not a checked-in repo.\n    P", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       self.generator = SimilarPathGenerator()\n\n    def test_tail_matches(self):\n        self.assertTrue(self.generator.get_tail_pattern(\n            \"http://example.com/\", tail=\"\\\\l\").match(\n            \"http://example.com/", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "       conditions.append(Condition(**{\n            \"column\": column,\n            \"operation\": operation,\n            \"values\": values,\n        }))\n    if \"or\" in operations:\n        conditions.append(Condition(**{\n            \"column\": column,\n            \"operation", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "       for i in range(9):\n            for j in range(9):\n                print(get_square_idx(i, j))\n\n    def test_get_square_outside(self):\n        assert get_square_idx(4, 4) == (4,", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "   private final ICompilationUnit testClassWithoutSuperclass;\nNext line of code:\n    private final ICompilationUnit testClassWithoutSuperclassWithoutAnnotations;\nNext line of code:\n    private final ICompilationUnit testClassWithoutSuperclassWithAnnotations", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "   self.next_sink.Open()\n\n    self._varz.Set(\n      sink_properties.Endpoint,\n      sink_properties.ServiceInterface,\n      sink_properties.Label,\n      sink_properties.Channel)\n    )\n\n  def AsyncProcessRequest", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate static final String BLOCK_TYPE_HEADER = \"header\";\nNext line of code:\n\tprivate static final String BLOCK_TYPE_FOOTER = \"footer\";\nNext line of code:\n\tprivate static final String BLOCK_TYPE_METHODS = \"methods", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "       () -> {\n          var files = new ArrayList<>();\n          var result = new CmdLine();\n          var line = result.line(\"javadoc\");\n          files.add(line);\n          return result;\n        });\n\n    files.add(JavadocOption.", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "       return RespostaSAT.analisar(retorno)\n\n    def enviar_dados_venda(self, dados_venda):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.enviar", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new AnswerCallWithSpeakerAction(this), AnswerCallWithSpeakerAction.ANSWER_WITH_SPEAKER_ACTION_ID);\n        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "   if gopts.event_log:\n      git_trace2_event_log.Write(gopts.event_log)\n\n    if gopts.trace_python:\n      SetTrace(True)\n\n    if gopts.time:\n      t = time.time()", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "\n    @Provides @Singleton\n    String provideBoardName(Board board) {\n        return board.name;\n    }\n\n    @Provides @Singleton\n    String provideBoardTitle(Board board) {\n        return board.title;\n    }\n\n   ", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "\n        Assert.assertThat(ds, totalQueryCount(2));\n\n        verify(ds).getQueryExecutions();\n    }\n\n    @Test\n    public void testTotalCountForBatch() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExec", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "       return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       verifiers.put(\"Local Files Exist Verifier\", new LocalFilesExistVerifierImpl(batch));\n        verifiers.put(\"Remote Files Exist Verifier\", new RemoteFilesExistVerifierImpl(batch));\n        verifiers.put(\"Valid Schema Name Verifier\",", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           showProgress(false);\n            new AlertDialog.Builder(this)\n                    .setTitle(R.string.error_title_login_failed)\n                    .setMessage(R.string.error_title_login_failed_message)\n                    .setPositiveButton", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "    * @throws DrupalFetchException if there's an error during the request.\n     */\n    DrupalUser login(String username, String password) throws DrupalFetchException, DrupalLoginException;\n\n    /**\n     * Logs out the currently logged in user (via user", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "       self.textInput.textChanged.connect(self.textReady)\n\n    def textReady(self):\n        self.textInput.clear()\n        self.textInput.setText(self.history.next())\n\n    def changeTheme(self, theme):\n        self.", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "           (r'/status', StatusHandler),\n            (r'/authorsranklist', AuthorsRanklistHandler),\n            (r'/crawleronline', CrawlerOnlineHandler),\n            (r'/problem', ProblemHandler),\n            (r'/problem", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tprotected ExpansionResult expandAtom(List<MatchExplanation> explanations) {\n\t\t\treturn expandAtom(explanations, phraseQueryNode.getField(), phraseQueryNode.getSlop());\n\t\t}\n\n\t\tprivate ExpansionResult expandAtom", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "               throw new ProtTestInternalException(\"Unknown criterion : \" + criterion);\n        }\n\n        informationCriterion.addObserver(this);\n\n        return informationCriterion;\n    }\n\n    /* (non-Javadoc)\n     * @see es", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(e1, e2, ty1, ty2)\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"Turn a simply typed expression into a Fst.\n    \n    Arguments:\n    - `expr`: an expression", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "   void inject(AudioBookManager audioBookManager);\n    void inject(AudioBookManagerModule module);\n    void inject(AudioBookPlayerModule module);\n    void inject(AudioBookPlayback audioBookPlayback);\n    void inject(EventBus eventBus);\n    void inject(Kios", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "\n    public ChartCategoryFragment() {\n\n    }\n\n    public static ChartCategoryFragment newInstance(int activeCreditCardId) {\n\n        Bundle args = new Bundle();\n        args.putInt(Constants.ACTIVE_CC_ID, activeCreditCardId);\n\n", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   response = Response(request)\n\n    with pytest.raises(ResponseValidationError):\n        response.json()\n\n\ndef test_response_content_type_none_raises_5xx():\nNext line of code:\n    response = Response(request)\n\n   ", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t@Override\n\tpublic void enterRule(ParseTreeListener listener) {\n\t\tif ( listener instanceof AtomicalConsole ) {\n\t\t\tAtomicalConsole _localctx = (AtomicalConsole) listener;\n\t\t\t_localctx.setRuleIndex(0);\n", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "           except TextGridParseError as e:\n                self.return_dict[\"parse_error_files\"].append(e)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "\n    from huginn.rest import (AltimeterResource,\n                           AttitudeIndicatorResource,\n                           ControlsResource,\n                           FlightControlsResource,\n                           GyroscopeResource,\n                           HeadingIndicatorResource,\n                           InitialConditionResource,\n                           Ori", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "\n        self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueFPS())\n\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsiDeg())\n\n       ", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "   '--iq, --include-qualifiers Include qualifiers in the returned',\n    '--no, --names-only Retrieve only the object paths (names).',\n    '--verbose, --verbose-output Print all output.',\n    CMD_OPTION", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tprivate SubmissionList submissionList;\n\t@Resource\n\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate RuleServices ruleServices;\n\t@Resource\n\tprivate NewsServices newsServices;\n\t@Resource\n\tprivate", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                       if(t instanceof InvalidOperationException){\n                            InvalidOperationException e = (InvalidOperationException) t;\n                            if(e.getErrorCode() == InvalidOperationException.INVALID_OPERATION_TYPE){\n                                presenter.showError(e.getMessage());\n", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "                                      join_keyword=u'\\u0917\\u092f\\u0940')\n\n    def test_full_e2e_hindi_signup_and_cancel_flow(self):\n        logging.info(\"running e2e full", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": " protected Location lastLocation;\n  protected ILastLocationFinder lastLocationFinder;\n  protected Location lastBestLocation;\n  protected Location lastLocation;\n  protected ILastLocationFinder lastLocationFinder;\n  protected boolean lowBattery = false;\n  protected boolean mobileData", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "   adb = getADB(DYNAMIC_TOOL_DIR)\n\n    print \"avd_path:\", avd_path\n    print \"dup_name:\", dup_name\n    adb = avd_load_wait(adb)\n    if", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class RRC_header(Layer):\n    constructorList = [\n        Bit('length', Pt=0, BitLen=4, Repr='hum'),\n        Bit('type', BitLen=4, Dict=Cause_dict, Repr='hum'),\n        Bit('p", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\tif opts.vertexsrf:\n\t\tprint(\"Creating adjacency set\")\n\t\tif opts.vertexsrf[0] == opts.vertexsrf[1]:\n\t\t\tv_lh, faces_lh = nib.freesur", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "     throw new QueryGrammarException(\"Cannot apply '\" + exp.getOperator()\n          + \"' operation on an empty string\");\r\n    }\n    result.append(OPEN_BRACKET).append(exp.getOperator()).append(CLOSE_BRACKET);\n    if", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "     }\n      cacheService.storeCacheList(new CacheList(listName));\n    }\n  }\n\n  @FXML\n  public void deleteList(ActionEvent actionEvent) {\n    final Optional<String> listNameOption = Dialogs.\n        create().\n        title", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "   ]\n    def __init__(self, CallName='', ReprName='', **kwargs):\n        if CallName or not self.CallName:\n            self.CallName = CallName\n        if ReprName is None:\n            self.ReprName = ''\n        else", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                       TimeEntryOvertimeAggregation.class\n                )\n        );\n    }\n\n    public void setTasks(CollectionLoader<Task> tasksDl) {\n        this.tasksDl = tasksDl;\n    }\n\n    public void setTasks(CollectionLoader", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "           (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.ElGamal): ElGPub,\n            (True, PubKeyAlgorithm.ECDH): ECDHPub,\n            (True, PubKeyAlgorithm", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "   @property\n    def num_chans(self):\n        return ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n                                  self._expansion_num,\n                                  BoardInfo.NUMDACHANS)\n\n", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "       self.key_size = read_u16le(f)\n\n\nclass StrongRefSet(StrongRefSetProperty):\n    __slots__ = ('ref_classdef', 'objects')\n    def __init__(self, parent, pid, format, version=PRO", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "           user = create_inactive_user(email, full_name)\nNext line of code:\n            if user.is_active:\n                form = RequestInvitationForm(request.POST, request=request)\n                return redirect(form.cleaned_data['url'])\n\n", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "\n        draft = await self.fetch_draft_for_channel(ctx.guild.id, ctx.channel.id)\n\n        if draft:\n            await self.draft_interface.save_draft(draft)\n\n        await self.draft_interface.", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "           ex = Hitbtc('BCCBTC')\n        elif name == \"%s_BCC_ETH\" % constant.EX_HITBITC:\n            ex = Hitbtc('BCC_ETH')\n        elif name == \"%s_BCH_USD\"", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "           yield item\n\n    elif self.xsd_types is None:\n        for item in context.iter_children_or_self():\n            if item is not None:\n                self.add_xsd_type(item)\n                yield item\n\n    else:\n        # XSD", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "     Solutions solutions = helpExecuteQuery(ds, 10);\n      for (Map<String,RDFNode> s : solutions) {\n        logger.info(\"Read {} rows\", s.size());\n      }\n      Assert.assertEquals(10, solutions.size());\n", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\tresult.setIndex(index);\n\t\t\tresult.setTextExpander(textExpander);\n\t\t}\n\t\telse {\n\t\t\tresult.setIndex(index);\n\t\t\tresult.setTextExpander(textExpander);\n\t\t}", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                   stopMiPush();\n                }\n                //Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n        }\r\n\n        if(shouldInit()){\n            //注册MiPush\n            MiPushClient.get", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "   private final KadConfiguration config;\n\n    private int connectAttempts;\n\n    private final Receiver receiver;\n    private final KadConfiguration config;\n\n    private long connectStartTime;\n    private long connectEndTime;\n    private long connectStartTime;\n    private", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "       if tablefmt:\n            output.append(tabulate(rows, headers, tablefmt=tablefmt,\n                                   floatfmt=str(self.floatfmt),\n                                   numalign=numalign, stralign=stralign,\n                                   missingval=str(self", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "       return words_api(wordnik_api, token)\n\n\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate Connector connector;\n\t@Inject\n\tprivate ConnectorComments connectorComments;\n\t@Inject\n\tprivate ConnectorProjects connectorProjects;\n\n\t@Inject\n\tprivate HTMLDialog htmlDialog;\n\t@Inject\n\tprivate ConnectorI", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "       self.assertEqual(handle.name, None)\n        self.assertEqual(handle.handle, None)\n\n    def test_create_event_invalid_handle(self):\n        handle = CreateEvent(bManualReset=False, bInitialState=False)\n        self", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "       this.deployments = new SpringDeployments(restTemplate, root, tasks, errands, releases, stemcells);\n        this.jobs = new SpringJobs(restTemplate, root, tasks, deployments, releases, stemcells);\n        this.vms = new", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   Element annotatedElement = roundEnv.getElement(annotation);\n                    if (annotatedElement != null) {\n                        originatingElements.add(annotatedElement);\n                        return parserHolder.getPathParsers().stream();\n                    }\n                    return Collections", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "\n    protected Crawler(CrawlerConfig crawlerConfig) {\n        this.crawlerConfig = crawlerConfig;\n        initPageFetcher(crawlerConfig);\n        initPageDispatcher(crawlerConfig);\n        initPageHandler(crawlerConfig);\n", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           actionPopupGroup.add(new EditMongoDocumentAction(this));\n        }\n\n        PopupHandler.installPopupHandler(editTableView, actionPopupGroup, \"POPUP\", ActionManager.getInstance());\n    }\n\n    private Document buildMongoDocument()", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "   public GuiSettingsChannel(Channel channel) {\n        super(channel, \"server.channels\");\n        this.channel = channel;\n    }\n\n    public static class Channel implements IChannel {\n\n        public static final String CHANNEL_PATTERN = \"channel", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_SCREEN_SHOT_CODE:\n                return new BtnScreenSh", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "       form.setText(Messages.ConfigurationEditor_WebModuleEditorTitle);\r\n        _webAppTable = new Table(form.getShell(),SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI | SWT.VIRTUAL | SWT.", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       type = Type.factory(Object.Types.string, None)\n        self.assertEqual(\"string\", type.get_sample())\n\n    def test_type_get_sample__return_default_sample(self):\nNext line of code:\n        type = Type.factory(", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "       commandProcessor.addHandler(\n                new EventCommandHandler<>(CorrectionCommand.class, CorrectionEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStatusMessageCommand.class, SetStatusMessageEvent::from", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "       self._cluster_type = _cluster_type\n        return self\n\n    def get_cluster_name(self):\n        return self._cluster_name\n\n    def get_cluster_type(self):\n        return self._cluster_type\n\n    def get_cluster_location", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "\n    acc = Account.objects.get(service='flickr.com', ident=frob)\n\n\ndef signin_mlkshk(request):\n    if request.user.is_authenticated():\n        # If the account already existed (because some other user follows\n", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t\tfcpMessage = new FCPBadFileException(e);\n\t\t\t\t} catch(IOException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth IOException while inserting message\", e);\n\t\t\t\t\treturn false;\n\t", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "     except IndexError:\n        pass\n\n    # The current operator takes one from the stack\n    cond_op = bytecode[k][2]\n\n    while cond_op in NO_FALL_THROUGH:\n      if k == 0:\n        break\n     ", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "\n    public static final String TAG_ARGS_CREDIT_CARD = \"TAG_ARGS_CREDIT_CARD\";\n    public static final String TAG_ARGS_PREVIOUS_CREDIT_LIMIT = \"TAG_ARGS_PREV", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\n\n\n# class PlatformAdmin(admin.ModelAdmin):\n#     list_display = ('engine', 'subject', 'api", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\tpublic static void openCustomList(@NonNull CustomListWithCount customList) {\n\t\tif (customList.beerId != null)\n\t\t\tstartActivity(BeerActivity.start(this, customList.beerId));\n\t\telse if (customList.rating", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "   def parse(self, ping_result: str) -> PingStats:  # pragma: no cover\n    def parse_to_dict(self, ping_result: str) -> Dict[str, Union[str, int, float, IcmpReplies, None]]: ", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           //chat = new Chat();\r\n            //chat.setId(chatId);\r\n            //chat.setName(\"TestChat\");\r\n            //chat.setParticipants(new ArrayList<User>());\n            //chat.setLastMessage(new Message());\n            //chat.", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tpublic Player player;\n\tpublic List<Player> players = new ArrayList<>();\n\n\tpublic boolean isInGame;\n\tpublic boolean isLoading;\n\tpublic boolean isFullscreen;\n\tpublic boolean isRunning;\n\n\tpublic boolean isInGame() {\n\t\treturn isIn", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "   person = account_for_facebook_user(fb_user, person=person)\n\n    if request.user.is_anonymous():\n        # AGH\n        random_name = ''.join(choice(string.letters + string.digits) for i in range(2", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "       assertThat(qe, is(statement()));\n\n        assertThat(qe, isBatchStatement());\n        assertThat(qe, is(isBatchStatement()));\n\n        assertThat(qe, isPrepared());\n        assertThat(qe, isBatchPrep", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "     }\n    }\n\n    if (Utils.getXmlNodeValue(doc, TAG_SIZE) != null) {\n      log(\"server response is: \" + getFileNames() + \" \" + Utils.getXmlNodeValue(doc, TAG_SIZE) + \" \"", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "   merged_assembly_points = merge_assembly_points(assembly_points_by_ids=original_assembly_points_by_ids,\n                                                acyclic=args.c_merging_acyclic,\n                                                min_cw=args.c_merging", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "       GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        PitotTubeResource,\n        \"/aircraft/sensors/pit", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "                       fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n                        inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def send", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tshowConfirm(\n\t\t\t\t\t\t\tgetString(R.string.install_levels),\n\t\t\t\t\t\t\tgetString(R.string.install_levels_confirmation),\n\t\t\t\t\t\t\tnew Runnable() {\n", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "\n    protected final WeeklyCaptionProvider captionProvider;\n\n    /** The calendar's current view. */\n    private CalendarView currentView;\n\n    /**\n     * The calendar's content mode.\n     */\n    protected ContentMode contentMode = ContentMode.GRID;", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "       this.vms = new SpringVms(restTemplate, root, tasks, deployments);\n    }\n\n    public Observable<List<ReleaseSummary>> list() {\n        return releases.list();\n    }\n\n    public Observable<List<ReleaseSummary>> list(String deploymentName", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "     (issuer, keyId) ->\n        new DefaultPublicKeyLocator(\n            new IdentityServerDescriptorProvider(\n                \"https://foo.example.com/keys/key1\", \"https://foo.example.com/keys/key2\"),\n            new HmacSHA25", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n\n    protected int mLayoutId;\n    protected int mItemViewType;\n\n    protected int mItemViewLayoutId;", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "                   assertNotNull(client.getObject(containerName, fileName));\n                } catch (FilesException e) {\n                    assertTrue(e.getMessage(), e.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND);\n                }\n            }\n", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "\n                }\n            });\n\n            if (BuildConfig.DEBUG) {\n                Log.d(TAG, \"trackHistoryRepository.getLastInsertedHistoryItem() returned \" + trackHistoryRepository.getLastInsertedHistoryItem());\n            }\n        }\n    }\n\n    public", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "   @Pref\n    YarrnPrefs_;\n    @SystemService\n    DrawerLayout drawerLayout;\n    @SystemService\n    ActionBar actionBar;\n    @SystemService\n    FragmentManager fragmentManager;\n    @SystemService\n    FragmentTransaction fragmentTransaction;\n   ", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                       ((CandyBarMainActivity) mContext).selectPosition(3);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "       encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING, Default.ENCODING)\nNext line of code:\n        format_name = app_configs.get(ConfigKey.FORMAT_NAME, DEFAULT_FORMAT_NAME)\nNext line", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "       raise NotFound('Unable to find playlist item with key: %s' % item.key)\n\n    def _loadItems(self, data):\n        \"\"\" Load playlist items from Plex XML response. \"\"\"\n        self._items = []\n        self._section = None\n", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "       self.assertRaises(TypeError, _environment_to_string, u\"a=b\")\n\n\nclass TestTextToWchar(TestCase):\n    \"\"\"\n    Tests for :func:`pywincffi.kernel32.process.text_to_", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": " if gopts.editor:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               // 执行监听器\n                runnerListenerList.forEach(runnerTaskListener -> runnerTaskListener.onPostExecute(taskData));\n                // 发送任务日志\n                sendTaskRunnerLog(taskData);\n                return;\n            }", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       self.assertIsInstance(r, DetectSoft404)\n\n\n\nclass ContentSimhashSamplingTest(TestCase):\n\n    @async_test()\n    async def test_simhash_sampling(self):\n        s = ContentSimhashSampling()", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       stuName = split[1].replace(\"同学\", \"\");\n        //用户的性别\n        stuSex = split[2];\n        //用户的年级\n        stuYear = split[3];\n        //用户的�", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "   self.__device = device\n\n    self.__ifb_device = device\n    self.__logger = logger\n\n    self.__export_path = export_path\n\n    self.__ip_version = ip_version\n\n    self.__parse_filter_id = is_parse_filter", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "       except AttributeError:\n            pass\n        else:\n            state[\"inventory\"] = inv\n\n    def add_location_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try:\n            loc = obj.location     #", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "  * @return the query\r\n   */\r\n  public Query visit(BasicSearchType n, Query query) {\r\n    Query q = visit(n.f0, query);\n    if (logger.isLoggable(Level.FINE)) {\r\n      logger.fine(\"visit", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t}\n\n\tpublic ParameterizedGenerationService(PipelineGenerator pipelineGenerator, ValorizatorParameters valorizatorParameters, Validator validator, SchemaValidator schemaValidator) {\n\t\tthis.pipelineGenerator = pipeline", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "       if (dataDecoder.equals(\"UnicodeDecoder\")) {\r\n            decoder = new UnicodeDecoder();\r\n        } else if (dataDecoder.equals(\"DataDecoder\")) {\r\n            decoder = new DataDecoder();\r\n        } else {\r\n            throw new IllegalArgument", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "           self.time_manager.ntpd_root_dispersion = self.root_dispersion\n        except:\n            log.error(\"Failed to run ntpdate:\")\n            log.error(traceback.format_exc())\n            sys.exit(1)\n", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "\n        where.id(movieRowId);\n\n        // Test the basic content provider query\n        Cursor movieCursor = mContext.getContentResolver().query(\n                MovieColumns.CONTENT_URI,\n                null,\n                null,\n                null,\n                null\n        );", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "       DevisAccueilModifications(self.inscrit, self.current_cotisation[0], self.current_cotisation[1])\nNext line of code:\n        self.UpdatePage()\n\n    def EvtGenerationContrat(self, _):\n        self.Update", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "       self.assertEqual(node_children(self.elem),\n                         [self.elem, self.elem.text, self.elem.tail])\nNext line of code:\n        self.assertEqual(node_children(self.elem, True),\n                         [self.elem", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.main);\r\n\t\t\t\r\n\t\t\t\tsetMapType(MAP_TYPE_HYBRID);\r\n\t\t\t\tsetMyLocationEnabled(true);\r\n\t\t\t\tlocationManager = (LocationManager) getSystemService(Context.", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                   ", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "       ConfigCommandProcessor(\nNext line of code:\n            self.switch_configuration,\nNext line of code:\n                TerminalController(self.logger, \"cisco 2960#\"),\nNext line of code:\n                PipingProcessor(self.logger),\nNext line", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n  assert isinstance(config, NormalRateConfig)", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "       return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n\n        return RespostaEnviarDadosVenda.analisar(retorno)\n\n        return RespostaCancelarUltimaVenda.analisar(ret", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "   grid, predicted_values = _get_interaction_predicted_values(dbf, comps, phase_name, configuration, output)\n\n    # Build the data\n    data_dict = _get_sample_condition_dicts(calculate_dict, subl_d", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "\n    api.add_resource(ForcesResource, \"/fdm/forces\",\n                     resource_class_args=(fdm.fdmexec,))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "   def get_dictionary(self) -> Optional[PronunciationDictionaryMixin]:\n        \"\"\"\n        Get the dictionary used by the corpus\n\n        Returns\n        -------\n        :class:`~montreal_forced_aligner.dictionary.PronunciationDictionary`", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "\n    public static final String CARD_NUMBER = \"cardNumber\";\n    public static final String CARD_EXPIRATION_DATE = \"cardExpirationDate\";\n    public static final String CARD_TYPE = \"cardType\";\n    public static final String CARD_ALIAS", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\t\tpublic final NetUtil net = new NetUtil();\n\t\tpublic final StringUtil str = new StringUtil();\n\t\tpublic final TimeUtil time = new TimeUtil();\n\n\t}\n\n\tprivate static class Util_Holder {\n\t\tstatic final Logger log = LogUtil.getInstance", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       return (List<ServerConfiguration>) ((MongoConfiguration) MongoManager.getInstance(project).getState()).getState();\n        ^\n\n        The problem is that you're getting the state of the MongoConfiguration and you're using it to get the state of the MongoExplorerPanel.\n", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\tcontainer.header(Fluent.H1(\"Todo MVC\"), Fluent.Input(\"todoApp\", \"Search for todoapp\").classs(\"header-input\"));\n\n\t\t// Footer with Ul and InputNext line of code:\n\t\tcontainer.footer(Flu", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "\n                if(output == null) return;\n                if(!SET_CROP_OPTIONAL) {\n                    if(imageTaken!=null) {\n                        saveImage(output, getResources().getString(R.string.camera_file_name), getResources().getString(", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "\n        if (mFastScroller != null) {\n            mFastScroller.setShowBubble(mShowScrollerBubble);\n        }\n\n\n    }\n\n    public static final String ARG_SORT_ORDER = \"sort_order\";\n    public", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   search = Search(\n    Engine, model, index, key=key, filter=None, projection=\"all\", consistent=True, forward=False)\n    search.mode = \"query\"\n    query_iterator = query_on.query(search)\n\n    assert query_iterator.", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCActivitySet gcActivitySet,GCActivity gcActivity) {\n        assert gcTrace.size() == gcActivitySet.size();\n\n        assert gcActivitySet.size() == gcActivity.size();\n\n        for (int i = 0; i <", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "           '/properties':                 RestAppPropertys,\n\n        }\n        \n        # Setup the version\n        self.api.add_resource(RestApi, '/')\n        self.api.add_resource(RestApi, '/api/v' + str(self.version))", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "       self._df_manager.set_directory(directory)\n        self._df_manager.set_fileview_window(tree_view)\n        self._df_manager.set_directory_view_dialog(DropBoxViewDialog(directory, self._df_manager, parent=self", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "   MAX_CORRUPTION_RATE,\n    )\n    group.add_argument(\n        \"--reordering\",\n        dest=\"reordering_rate\",\n        default=0,\n        help=\"\"\"round trip packet reordering rate [%%]. the", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "   public ChatTray(Gui gui, ILayout layout) {\n        super(gui, layout);\n    }\nNext line of code:\n    public ChatTray(Gui gui, ILayout layout, ILayout overlay) {\n        super(gui, layout, overlay);", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "\n    public void dateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to event click items\n     */\n    public interface ItemClickListener {\n        /**\n         * Triggered when a item was clicked\n         *\n         * @param calendarItem\n", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "       self._db_type = db_type\n        return self\n\n    def set_user(self, user):\n        self._user = user\n        return self\n\n    def set_pass(self, pass):\n        self._pass = pass\n        return self\n\n    def", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "           break;\n            Namespace namespace = namespacesHub.get(packet.getNsp());\n            namespace.onPing(client);\n            break;\n        }\n\n        case OPEN: {\n            Namespace namespace = namespacesHub.get(packet.getN", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "\n    private StarItem starItem;\n\n    private StarTask starTask;\n    private RepoTask repoTask;\n    private CommitTask commitTask;\n    private StarContentTask starContentTask;\n    private StarItem starItem;\n    private StarItemAdapter starItemAdapter;\n", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\n\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\treturn new GenerationService(preprocessors, postprocessors);\n\t}\n\n\tprivate Preprocessor[] setPreProcessors(List<PreProcessor> preprocessors) {", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<GCPProject> projects =\n        pipeline.apply(\"Read projects\",\n            Read.from(new LiveProjectSource(org)));\n    // Convert the projects to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResourceState>> projectSt", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "   def __init__(self, **kwargs):\n        super().__init__()\n        self.Meta = kwargs.pop(\"Meta\", None)\n        self.Meta.pop(\"id\", None)\n        self.Meta.pop(\"range\", None)\n        self.Meta.pop", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "               self._def_reader = MeanPoolReadDefinitions(emb_def_dim, dim,\n                                                       dim, vocab, lookup,\n                                                       word_dropout_weighting='no_weighting',\n                                                       shortcut_unk_and_ex", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "   private boolean _initialized;\n\n    public ChatManager(ChatManagerCallback delegate)\n    {\n        _delegate = delegate;\n        _initialized = false;\n        _id = null;\n        _relayHost = null;\n    }\n\n    public void set", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   private int videoQuality;\n    private int videoThumbnailSize;\n    private int videoThumbnailWidth;\n    private int videoThumbnailHeight;\n    private String videoFile;\n    private ArrayList<CustomGallery> dataT;\n    private CustomGallery selectedVideo;\n   ", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),RotateInUpRight(RotateInUpRight.class),\n\n    RotateOut(RotateOut.class),RotateOutDownLeft(", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "           form.instance = self.object\n\n\nclass CrearUser(UserBase, CreateView):\n    template_name = 'relevamiento/crear_user.html'\n    success_url = \"/\"\n    success_message = \"Usuario creado con éxito.\"", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "   public static Fog convert(FogDescriptor descriptor) {\n\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Light\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    public static BaseLight convert(BaseLightDescriptor descriptor) {\n        BaseLight light", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\t\n\tpublic void writeFloatBlock(String path, float[][] data, int blockSizeX, int blockSizeY, long nbBlocksX, long nbBlocksY)\n\t{\n\t\tif(this.handle == null) new ErrorJSON(\"Please open the Loom", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "\n    ActorDetailsComponent plusActorDetailsComponent();\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n\n}\n\npackage com.rashwan.reactive", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t\tview.setProgress(vals.size());\n\t\t} catch (final SocketViewException e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Running this benchmark", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "   sync_stats_manager = SyncStatsManager()\n\n    def _get_manager_from_model(self, model):\n        \"\"\"\n        Get Manager from Model\n        :param model: model\n        :return:\n        \"\"\"\n        manager_class = getattr(self,", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\treturn createMostSuitableWrapper(city, endpointType, apiKey,\n\t\t\t\t\tdataParser, networkManager, cache, serviceDiscoveryInfo);\n\t\t} catch (IOException e) {\n\t\t\tthrow new APIWrapperException(e);\n\t", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "   planilla_de_relevamiento = PlanillaDeRelevamiento.objects.get(pk=request.GET.get(\"planilla_de_relevamiento\"))\n\n\n\n\n\n\n    return render(request, 'relevamiento/seleccionar_planilla_", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "     self._cstr = root\n    else:\n      cmp_id = root.data[1]\n      self._cstr = root.children[cmp_id]\n\n    self._root = None\n    return self\n\n  def __repr__(self):\n    return", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": " private ActionSupportHandler<TransferAction>       transferActionSupportHandler       = new ActionSupportHandler<TransferAction>(TransferAction.class);\n  private ActionSupportHandler<WaitAction>           waitActionSupportHandler           = new ActionSupportHandler<WaitAction>(WaitAction.class);\n ", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {\n\t\tif (Main.isDisabling()) {\n\t\t\treturn null;\n\t\t}\n\t\tPlayer player = Bukkit.getPlayer(this.getName());\n\t\tif (player", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [0])\n    assert_array_equal", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "   elif result == '':\n        raise self.error('FODF1310')\n    else:\n        raise self.error('FODF1310')\n\n\n@method(function('format-number', nargs=(2, 3),\n                 sequence_types=", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item is None:\n\t\t\t\treturn default_flags\n\t\texcept Exception as e:\n\t\t\tprint(\"HESJA\")\n\t\t\tprint(str(e))\n\t\t\treturn default_flags\n\n\t\t\tif model_", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "       array.items = [object1, object2, object3]\n\n        response = Hydrator(version1, versions, []).hydrate_object(object_dto, object1)\n        response = Hydrator(version2, versions, []).hyd", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "         //byte[] catBytes = PipeBundle.buildRingBuffers(new Pipe(new PipeConfig(0x15, 0x7, catBytes, new MessageSchemaDynamic(null)).initBuffers());\n          byte[] catBytes = PipeBundle.build", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": " to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (1, )))\n  to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNIT", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "               allOf(\n                        containsString(mappedRecords.stream().map(SinkRecord::getId).collect(Collectors.joining(\",\"))\n                )\n        );\n    }\n\n}\n", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "           (True, PubKeyAlgorithm.ECDH): ECDHPub,\n            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,\n            (True, PubKeyAlgorithm.OpaquePubKey): OpaquePubKey,\n            (True", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tJPEParserManager.getInstance().registerJPEParser(new KMLParser());\n\n\t\t// Registra los parsers de los formatos disponibles\n\t\tJPEParserManager", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                       res = ExtensionUtils.get(context);\n                        if (res == null) {\n                            context.put(ContextKeys.EXIT_STATUS, NO_RESULTS);\n                        }\n                    } catch (SQLException e) {\n                        context.put", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "   url(r'^users/list/$', users_list, name='users-list'),\n    url(r'^users/(?P<pk>[-\\w]+)/$', new_user, name='new_user'),\n    url(r'^users/(?P<pk", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                       }\n                    }\n                });\n                dialogFragment.show(getFragmentManager(), \"test\");\n            }\n        }\n\n        private void startLearnActivity() {\n            if (stack != null) {\n                Intent intent = new Intent(getActivity(), Learn", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_mentality_health);\n        initToolbar(this);\n        initSwipeRefreshLayout();\n        initRecyclerView();\n       ", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       obj.updateBuffImg()\n\n        obj.setSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)\n        obj.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))\n        obj.", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "       f = XDA(d1)\n\n        result = self.assertIsNone(self.find_preimage(f, d2, d3))\n        assert isinstance(result, tuple)\n        assert result[0] == 0\n        assert result[1] == ", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t}\n\t\n\tprivate static class ConstantTransformer implements NodeTransformer {\n\t\tprivate final DiscriminativeOracle oracle;\n\t\tprivate final List<Node> newConstantNodes;\n\t\t\n\t\tpublic ConstantTransformer(DiscriminativeOracle oracle, List<", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\t\n\t\t// Add the listeners\n\t\tgetServer().getPluginManager().registerEvents(new PluginBlockListener(), this);\n\t\tgetServer().getPluginManager().registerEvents(new PluginPlayerListener(), this);\n\t\t\n\t\t// Add the Gson\n", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "       Element el = doc.element(\"challenge\");\n        if (el == null) {\n            throw new IOException(\"Expected challenge element\");\n        }\n        String hash = el.elementText(\"hash\");\n        connection.setDigestHash(hash);\n        connection.sendChallenge", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "\n\nHight32 = HightCipher.get_Hight_instance(HightCipher.HightInstance.hight_32_64)\nChaskey32 = ChaskeyPi.get_Chaskey_instance(ChaskeyPi.", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "   private Playlists mPlaylists;\n\n    private Toolbar mToolbar;\n    private FastScroller mFastScroller;\n    private SongListAdapter mSongListAdapter;\n    private OnItemClickListener mOnItemClickListener;\n\n\n    public SongListFragment() {\n", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "       if(mSelectedEffect instanceof FlowAbsEffect) {\n            mSelectedEffect.removeListener(this);\n            mSelectedEffect = null;\n        }\n        mSelectedEffect = effect;\n        mSelectedEffect.addListener(this);\n        return true;\n    }\n\n", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "       Bit('ESM_Cause', Pt=2, BitLen=8, Dict=ESMCause_dict, Repr='hum'),\n        Bit('ESM_Cause_dict', Pt=0, BitLen=4, Repr='hum'),\n        Bit('", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "       }\n    };\n    private AlbumEditorDialog.OnEditionSuccessListener mOnEditionSuccessListener = new AlbumEditorDialog.OnEditionSuccessListener() {\n        @Override\n        public void onEditionSuccess() {\n\n        }\n    };\n\n\n    public Artist", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "       if not self.stopped.stop_check():\n\n            self.log_info(\n                f\"Parsing {self.num_jobs} jobs in {time.process_time() - begin_time} seconds\"\n            )\n            for i, job in enumerate(", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t@Override\n\tpublic boolean addRemittUser(UserDTO user) {\n\t\treturn UserManagement.addUser(getCurrentUserName(), user);\n\t}\n\n\t@POST\n\t@Path(\"listusers\")\n\t@Produces(\"application/json\")\n\t@Override", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "   Observable<ApiStatus> apiStatus(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns the HTTP headers for the given account.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"api-info\")\n    Observable<", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   public void visit(VmOptionLogMessage message) {\n      vmOptionsBuilder.put(message.name(), message.value());\n    }\n\n    @OverrideNext line of code:\n    public void visit(VmPropertiesLogMessage message) {\n      vmProperties = Optional.of", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   \"\"\"\n    Example from the ERB paper.\n\n    \"\"\"\n    # Original ERB paper\n    #\n    # ERB(freq, bandwidth)\n    #\n    # ERB(freq, bandwidth) is a callable that takes a Stream of floats\n", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "   offset = offset + len(dataset)\n\n\ndef read_sequence_item(fp, is_implicit_VR, is_little_endian, encoding, offset):\n    \"\"\"Return a Dataset instance or None if hit Sequence Delimiter\n\n    Parameters\n   ", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   try {\n      for (ICommentProcessor commentProcessor : this.commentProcessors) {\n        if (commentProcessor.getClass().isInstance(proxyBuilder.root)) {\n          commentProcessor.run(document, proxyBuilder.root);\n        }\n      }\n      for (I", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   protected void loadData(final int page) {\n        super.loadData(page);\n    }\n\n    @Override\n    protected String getCacheKey() {\n        return application.getString(R.string.ravelry_url) + String.format(\"/patterns/search.", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "   def __init__(self):\n        super(NotationData, self).__init__()\n        self._flags = NotationDataFlags.Unknown\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "       self.chum.addMessage(serverMsg)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "   _StringLike.__repr__ = lambda self: repr(self)\n    _StringLike.__str__ = lambda self: str(self)\n\n    def __repr__(self):\n        return repr(self.value)\n\n    def __str__(self):\n        return str", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date1", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "   _log.debug(\"Fitting formation energies with ridge regression\")\n    if ridge_alpha is None:\n        ridge_alpha = 1.0e-100\n    if not has_symbol(ridge_alpha, comps):\n        _log.warning(\"", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "   @Override\n    public void transit(@NonNull Input input) {\n        if (currentState != null) {\n            currentState.performWorkAndUpdatePlayerUI(this);\n        }\n\n        if (currentState == null) {\n            return;\n        }\n\n       ", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8 ||", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,\n                                  @Query(\"type\") String type,\n                                  @Query(\"timezone\") String utcOffset);\n\n    @GET(\"gifs?ids\")\n    Call", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "       stream = Stream(engine=self, model=model, stream_arn=model.Meta.stream[\"arn\"])\n\n    def delete(self, model_or_index, filter=None, condition=None, sync=None):\n        \"\"\"Delete one or more objects.\n\n        :", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "   self.log.info(\"confusion matrix:\")\n\n    for cm in self._confusion_matrix:\n        self.log.info(ConfusionMatrixFormatter(decimals=2, normalize=True).format(cm))\n\n    self.log.info(\"confusion", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tpublic void setRequest(HttpServletRequest request) {\n\t\tthis.request = request;\n\t}\n\t@Autowired\n\tprivate SubmissionServices submissionServices;\n\t@Autowired\n\tprivate ChallengeServices challengeServices;\n\t@Autowired\n\tprivate CountryServices countryServices;", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "\n    def query(self, *entities):\n        return Query(self, *entities)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "       def decoder(self) -> StandardRNN:\n        def decoder_initializer(self, scope: str = None, *scope_args, **scope_kwargs):\n            self.decoder_initial_state = StandardRNN.init_initial_state(self.representation", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "for slug in ZANATA_SLUGS:\n    all_platform_slugs.append(slug)\n\nall_platform_slugs = all_platform_slugs\n\nclass LanguageAdmin(admin.ModelAdmin):\n    search_fields = ('lang_set_slug',", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   @Override\n    public boolean add(SelectorGroupNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorSegmentNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(ExpressionGroup", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static Form formFor(Object resource, Object... fields) {\n\t\treturn new FormFor(resource);\n\t}\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h2", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       final String[][] table = new String[numberOfColumns][];\n        final int[] columnLengths = new int[numberOfColumns];\n        for (int i = 0; i < numberOfColumns; i++) {\n            columnLengths[i] = 0;\n       ", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "     for n in self.blocks:\n        n.visit(visitor)\n      for edge in visitor.edges:\n        if edge.kind == ControlFlow.E_LOOP:\n          loop_index = edge.source\n          loop = self.blocks[loop_", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.hasher, this.fhseed, this.hd, this.d);\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\t//tree", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "   def __init__(self, parser: XPath30Parser, nargs: int = None, **kwargs: Any) -> None:\n    #\n    # XPath 3.0 implementation - part 3 (functions)\n    #\n\n    def __init__(self, parser:", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                   else if (Event.EVENT_TYPE_STATE_ROOM_MEMBER.equals(event.type)) {\n                        RoomMember roomMember = JsonUtils.toRoomMember(event.content);\n                        String roomMemberName = roomMember.getDisplayName(m", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\t{\n\t\t// PostProcessing\n\t\t\n\t\tprivate XFORMSInsertEndPostprocessor xformsInsertEndPostprocessor = new XFORMSInsertEndPostprocessor();\n\t\t\n\t\tprivate XFORMSInsertGenericQuestionsPostprocessor xformsInsertGenericQuestionsPostprocessor =", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "       DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationEtatPresence(self, _):\n        site = self.GetSelectedSite()\n        date = str2date(self.presence_date", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "           H += crosstens(dot(crossmat(c - p), m * J_rot)) + dot(I, J_rot)\n\n        H += crosstens(dot(crossmat(c - p), m * J_rot)) + dot(I, J_", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "       if (getView() != null) {\n            getView().setVisibility(View.VISIBLE);\n        }\n    }\n\n    protected void displayPattern(final Pattern pattern) {Next line of code:\n        if (getView() != null) {\n            getView().", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "               new VirtualBalanceCommand(),new VirtualEconCommand(),new VirtualAddCommand(),new VirtualSetCommand(),new VirtualRemoveCommand(),new VirtualPayCommand(),new PayVirtualCommand());\n    }\n\n    public static void main(String[] args) {\n        PluginInfo info = new Plugin", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "   def _fit(self, symbols, datasets, phase_models=None, make_callables=True, **kwargs):\n        \"\"\"\n        Run the fit\n\n        Parameters\n        ----------\n        symbols : list of str\n        datasets : PickleableTinyDB\n       ", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "     return Const.fromValue(arg)\n    else:\n      return Undef(data=None)\n  elif op == LOAD_NAME:\n    return Undef(data=None)\n  elif op in UNARY_OPCODES:\n    if op == UNARY_NOT", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\t\tprivate final JsonObject entityConfigs = res.getJsonObject(\"entity-configs\");\n\tprivate final Physics physics = res.getPhysics();\n\n\tprivate final String basePath;\n\n\tpublic ClientMaster(String basePath) {\n\t\tthis.basePath = base", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMPERATURE:\n                    TempSensor", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic Long reference2() {\n\t\tAtomicLong aLong = new AtomicLong(0);\n\t\tfor (Long authorId : authorRepository.findAll().stream().map(Author::getId).collect(Collectors.toList())) {\n\t\t\taLong.add", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\n\tpublic SQLQuery getRootQuery() {\n\t\treturn rootQuery;\n\t}\n\t\n\tpublic void setRootQuery(SQLQuery rootQuery) {\n\t\tthis.rootQuery = rootQuery;\n\t}\n\t\n\tpublic ISchema getSchema() {\n\t\t", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "       if settings.ANDROID_DYNAMIC_ANALYZER == \"MobSF_REAL_DEVICE\":\n            download_logs(adb, download_dir)\n            try:\n                adb.kill_emulator()\n            except:\n               ", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "\n    /**\n     * Parse the specified input stream and return genotypes.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into genotypes\n     */\n    Genotype parseGenotypes(InputStream inputStream", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "               Symbol.typed(bar_type, 'bar'),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n\n\ndef test_record_with_kwargs():\n    inc_type = Func[[IntType],", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "\n        PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, isPrepared());\n        assertThat(pe, prepared());\n        assertThat(pe,", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\t\tself._properties_dock.set_item(selection[0])\nNext line of code:\n\t\tself._properties_dock.set_item(selection[0])\nNext line of code:\n\t\tself._properties_dock.set_item(selection[0", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                           return new NotFoundException(cause);\n                        default:\n                            return cause;\n                    }\n                }\n                return cause;\n            }\n        };\n\n        mAdapter = new RestAdapter.Builder()\n                .setErrorHandler(handlerError)\n               ", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(List.class, new DefaultIterableRenderer());\n\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\n\t\tregisterRenderer(IfToken.class, new DefaultIfRenderer());\n\t\tregisterRenderer(Token.class, new DefaultTokenRenderer());\n", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new UpperCaseFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute(elt, AlvisIRConstants.XML_SEARCH_LABEL_CASE_SENSITIVE, true)) {\n\t\t", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "   url(r'^(?P<ci_pipeline_id>[\\w\\-]+)/(?P<package_id>[\\w\\-]+)/(?P<branch>[\\w\\-]+)/$',\n        PipelineDetailView.as_view(), name=\"ci-pip", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                       if (bitmap != null) {\r\n                            intent.putExtra(Extras.EXTRA_IMAGE, bitmap);\r\n                        }\r\n                        if (Preferences.get(mContext).isCropWallpaper()) {\r\n                            intent.putExtra(Extras.EXT", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "   account = account_for_vimeo_id(access_token.get_token_secret(), person=person)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "               px_mag_corr = pyPointingDirection2PxMagCorrection(platepar, xe, ye, x_mean, y_mean, test_px_sum)\n\n\n                # Compute the area of the segment\n                # area = areaGeoPolygon", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   grid = gen_grid(data, options)\n    \n    # Initialize posterior\n    posterior = dict()\n    posterior['scale'] = np.zeros(grid['A'].shape)\n    posterior['slope'] = np.zeros(grid['B'].shape)\n   ", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           Board.this.availableMoves.dices.setDices(Board.this.dices.getDices());\n          }\n\n        if (MatchState.matchType < 2)\n          Board.this.availableMoves.dices.setDices(Board", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "       self.assertEqual(repr(etree_iter_paths(root, '//b1')),\n                         \"etree_iter_paths(root, '//b1')\")\n\n        self.assertEqual(repr(etree_iter_paths(root, '", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "       self.runner.add(ContentSimhashSampling(), with_child=True)\nNext line of code:\n        self.runner.add(RejectStatusCode(range(400, 410), range(500, 700)), with_child=", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "   cfe = CFeCancelamento(\n            chCanc='CFeCanc000000000000000000000000000000000000000000000", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "    * @throws PersonalGenomeClientException if the specified input stream cannot be parsed into user names\n     */\n    List<UserName> parseUserNames(InputStream inputStream) throws PersonalGenomeClientException;\n\n    /**\n     * Parse the specified input stream and return genotypes.\n", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           this.client.send(req);\n            // 5. Get response\n            try {\n                this.client.get();\n            } catch (IOException e) {\n                System.out.println(\"Failed to get signature response from MSSP.\");\n                e.printStackTrace();\n               ", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calcsheet\")\n\t\telif type(obj) is Proformer:\n\t\t\treturn get_icon(\"proformer\")\n\t\telif type(obj) is ProformerType:", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           RotationVectorSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type ==", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate TeamLeaders teamLeaders;\n\tprivate List<PlayerOverview> players;\n\tprivate List<TeamRosterResponse> teamRoster;\n\tprivate List<TeamScheduleResponse> teamSchedule;\n\tprivate List<TeamLeadersResponse> teamLead", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "       if (permissionRequestExecutor == null) {\n            AppliverySdk.Logger.log(\"PermissionRequestExecutor must be initialized before accessing network state\");\n            return;\n        }\n\n        if (!permissionRequestExecutor.isGranted(accessNetworkStatePermission)) {\n            askForPermission();", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "       # TODO | the above is the only way to get the correct index for the model\n        # TODO | we should have a way to get the index from the model itself\n\n        for key in key.values():\n            if key.name in table_index:\n                table_index[key", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "               self.print_key(key, fingerprint, description, created_at)\n\n    def print_key(self, key, fingerprint, description, created_at):\n        color = True\n        if key['is_public']:\n            color = False\n        art = draw", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, Component", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "       return RespostaExtrairLogs.analisar(retorno)\n    \"\"\"\n\n    def bloquear_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.bloquear_sat", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "       self.assertIsNone(node_document_uri(self.elem))\n\n    def test_node_nilled_function(self):\n        self.assertIsNone(node_nilled(self.elem))\n\n    def test_node_kind_function(self):\n", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n                case START_DATE_DESC:Next line of code:\n                    Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "   except Exception as e:\n        with open(dirty_path, \"w\"):\n            pass\n\n    def _trainer_initialization(self) -> None:\n        \"\"\"Initialize trainer\"\"\"\n        self.logger.info(f\"Initializing trainer for {", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "\n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient)\n    {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.sessionController = session", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   private final Tasks tasks;\n    private final Errands errands;\n    private final Vms vms;\n\n    public SpringDirectorClient(RestTemplate restTemplate, Info info, Releases releases, Stemcells stemcells, Deployments deployments, Tasks tasks,", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "\n    public void onFittingServiceStateUpdated(FittingConnectionManagerState state, FittingConnectionError error, String id, String audiologistName, Bitmap audiologistPicture, HiMuteStatus muteStatusLeft, HiMuteStatus muteStatusRight)\n    {\n\n    public void on", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand();\n    }\n\n    protected SvnCommand getBranchCommand()\n    {Next line of code:\n        return new SvnJavaBranchCommand();\n    }\n\n    protected SvnCommand getCheckInCommand()\n    {Next line of", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   public void onHover(GuiMouseEvent.MouseEvent event) {\n        if (event.getButton() == GuiMouseEvent.MouseEvent.MOUSE_BUTTON_LEFT) {\n            GuiSettingsScreen settings = GuiSettingsScreen.getSettingsScreen();\n           ", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "       DATA[looptest][0], EPSILON, FiniteDifferenceSchemes.FORWARD);\n        double[] d3Put = FiniteDifferenceFirstOrder.differentiate(callPut[looppc] ? new blackPut() : new blackCall(), ", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "           VotingModule.class,\n            ScoreboardModule.class,\n            PlayerFreezeModule.class,\n            DeathMessageModule.class,\n            WorldBorderModule.class,\n            ChatModule.class,\n            VotingModule.class,\n            ScoreboardModule.", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    * @see #newDownloadQueue(int, DownloadQueue.OnDownloadErrorListener)\n     */\n    public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     *", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " @Override\n  public void init(MutableConfig config) {\n    // TODO\n  }\n\n  @OverrideNext line of code:\n  @Override\n  public void configure(MutableConfig config) {\n    // TODO\n  }\n\n  @OverrideNext line of code:\n", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    * @throws JMingoParserException {@link JMingoParserException}\n     */\n    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {\n        if (element == null) {\n            throw new JMingoParserException(\"element is", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "\n\n", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "           left_foot_task = ContactTask(\n                self.robot, self.robot.left_foot, self.cur_stance.left_foot,\n                weight=swing_weight)\nNext line of code:\n            self.robot.ik.add(left_", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "\n    def test_basic(self):\n        for op in simple_op:\n            self.assertIsInstance(op, Operation)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\taOutput.writeInt16(SegmentMarker.APP2.CODE);\n\t\t\taOutput.writeInt16(2 + 5 + 1 + aJPEG.mICCProfile.getData().length);\n\t\t\taOutput.writeString", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "           JOptionPane.showMessageDialog(null,\n                    \"Sammellastschrift erfolgreich an Hibiscus gesendet: \"\n                            + sl.getSammelLastschriftId());\n\n            switch (type) {\n            case SAMMEL:\n                //", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "\n\n    from montreal_forced_aligner.alignment.pretrained import GeneratePronunciationsArguments\n\n    from montreal_forced_aligner.alignment.pretrained import generate_pronunciations_func\n\n    from montreal_forced", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       entityPlayer.addChatComponentMessage(new ChatComponentText(String.format(\"Added Lore [%s, %s]\", category, ident)));\n        LoreLoader.getLore(category, ident).autoplay = true;\n    }\n\n    private static", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "   public static final String RECURRING_QUERY_PREFIX = \"FROM Recurring r WHERE r.id = :id\";\n\n    public static final String RECURRING_QUERY_PREFIX = \"FROM Recurring r WHERE r.id = :id\";\n\n", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutUp(FadingOutUp.class),\n    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n\n    ZoomIn(ZoomIn.class),\n    ZoomInRight(ZoomIn", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode)\n        if check:\n            try:\n                problem.check_empirical_weight(verbose_level, filename)\n            except ExactWeightError:\n                problem.emp_weight = math.inf", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "       return H\n\n    def setUp(self):\n        \"\"\"\n        Create hosts container.\n        \"\"\"\n        self._hosts = self.get_hosts()\n\n    def test_host_container_init(self):\n        \"\"\"\n        Test initialisation.\n        \"\"\"\n       ", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "\n\n\n            if command.startswith(\"{:s} {:s}\".format(get_tc_base_command(subcommand), \"change\")):\n                return True\n\n        return [tc_command_filter(tc_command) for tc_command in self.__tc_command", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": " assert isinstance(encoder, GPSGLONASSL1BitEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    */\n    public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException, InvalidParameterException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n\n        Cursor cursor =  db.query(ExpenseManagerContract", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "   private MonthGridAdapter monthGridAdapter;\n\n    private OnDayChangeListener onDayChangeListener;\n    private OnMonthChangeListener onMonthChangeListener;\n    private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n    private ScrollManager scrollManager;\n\n    private boolean shouldProcess", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "   assert isinstance(white_noise(), Stream)\n\n\nclass TestGaussNoise(object):\n\n  def test_no_input(self):\nNext line of code:\n    assert isinstance(gauss_noise(), Stream)\n\n\nclass TestFadeIn", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "               isinstance(t2, RecordMeta)\n                and\n\n                isinstance(t2.__items__[0], (Keyword, Symbol))\n            ):\n                t1.__instance__ = Record[field_refs(backref, t2.__items__)]\n                unify(", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "       host=DEFAULT_URL,\n        login_data=None,\n        region_id=None,\n        client_id=None,\n        client_secret=None,\n        refresh_token=None,\n        login_attempts=None,\n        login_retry=", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\t\t\tif isinstance(model_item.data, KeyPoint):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\tif isinstance(model_item.data, Edge):\n\t\t\t\tdefault_flags = default_flags |", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": " def AsyncProcessResponse(self, sink_stack, context, stream, msg):\n", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       assertThat(out.toString(), equalTo(\"remotely-observed-thread\"));\n    }\n\n    @Test\n    public void jmxRemoteConnectViaCliWithAuth() throws Exception {\n        TestThread.JMXProcess process = disposer.register(Test", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       data.setBudget(val.length);\n        data.setOperation(DrumOperation.APPEND_UPDATE);\n\n        return data;\n    }\n\n    private static DrumStoreEntry<String, String> createNewData(Long key, DrumOperation op, Long", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       return new RoxanaPropertiesMockBuilder().build();\n    }\n\n    private ResponseProcessorManager getResponseProcessorManagerForTest() {\n        return new ResponseProcessorManagerImpl(this.getRoxanaProperties(), this.getTranslator());\n    }\n}\n", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self._SendMessage(self._BuildHeader(tag, MessageType.Tping, 0))\n\n  def _ReceivePingMessage(self, tag, msg):\n    \"\"\"Handles a Tping message from the remote server.\n\n    Args:\n      tag - The tag", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "     assert isinstance(freq2lag(v), INT_TYPES)\nNext line of code:\n      assert isinstance(lag2freq(v), INT_TYPES)\nNext line of code:\n      assert isinstance(almost_eq(v, 0", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "       self.dbi = bot.dbi\nNext line of code:\n        self.utilities = Utilities()\nNext line of code:\n        TimezoneSpellHelper.set_dictionary(list(pytz.all_timezones))\n\n\n    @group(name=\"", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   if operands[0] == operands[1]:\n        return True\n    return False\n\n\n@method('eq')\n@method('ne')\n@method('lt')\n@method('gt')\n@method('le')\n@method('ge')\ndef evaluate_value", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setText(getString(R.string.welcome_message));\n\n        return header;\n    }\n\n    private void initializeEvents() {\n        mEvents = new ArrayList<>();\n        mEventParents = new ArrayList<>();\n        mEvents.add(new Event(getString", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "           Log.d(this.getClass().getSimpleName(), \"Successful createChatTask\");\n            Log.d(this.getClass().getSimpleName(), \"Invoking \" + classToNotify.getSimpleName());\n            try {\n                classToNotify.notify(", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\nNext line of code:\n        Assert.assertEquals(1, response.getReturnCode());\nNext line of code:\n        Assert.assertEquals(1, response.getResultCode());\nNext line of code", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "       assertEquals(INTERPOLATION_PREFIX + KEY + INTERPOLATION_SUFFIX, creator.create(RANDOM_STRING_PARAMETER_VALUE_01, RANDOM_STRING_PARAMETER_VALUE_02, this.getUnitTest", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "   public int readSmallIntValue(int d1) throws IOException {\n\t\tint d2 = in.read1();\n\t\tint d3 = in.read1();\n\t\tint d4 = in.read1();\n\t\tint d5 = in.read1();", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "\n    def __init__(self, username=None, password=None, project_id=None,\n                 auth_url='',\n                 insecure=False, timeout=None, tenant_id=None,\n                 proxy_tenant_id=None, proxy_token=None,", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "           MacOsPingParser,\n            AlpineLinuxPingParser,\n            NullPingParser,\n)\n        for parser_class in parser_class_list:\n            try:\n                self.__parser = parser_class()\n                break\n            except (ParseError, ParseError", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "           Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate.getText()));//set\r\n            //minimum to whatever was selected in the video settings panel\r\n            Main.setDefaultVideoFrameRate(m.videoSetFrameRate.getText());//set\r\n           ", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "           self._probe = _probe_adjacency_list(probe)\n        else:\n            self._probe = _probe_adjacency_list(probe)\n        self._probe_thresholds = _probe_thresholds(self._", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "   @Override\n    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "     self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def analyze(self):\n    \"\"\"\n      Analyzes the bytecode and creates the underlying graphs.\n    \"\"\"\n    self.decl = None\n    self.entry = None\n   ", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       ObservableRegistry.getInstance().getObservable(QRData.class).register(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        return", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "   result.append(\" \").append(BETWEEN).append(\" \").append(column).append(\" \").append(OPEN_BRACKET);\n    visit(column);\n    result.append(\" \").append(BETWEEN).append(\" \").append(column).", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile file1 = new File(basePath + \"/\" + \"ddi-to-xforms.xml\");\n\t\t\tFile file2 = new File(basePath + \"/\" + \"ddi-to-xforms-cleaned.xml\");\n\t\t\tAssertions", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "           np.shape(Bernoulli(1, 2, seed=0).draw(3))\n            == (3, 2),\n        )\n\n    def test_draw_multivariate(self):\n        self.assertEqual(\nNext line of code:\n           ", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "       state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpad state\n        state = stateFactory.createState(VpaidState.class", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void dispatch(CharSequence value, TagValueConsumer consumer) {\n\t\tif (isValid(tag)) {\n\t\t\tconsumer.acceptString(this, value);\n\t\t} else {\n\t\t\tthrow new InvalidValueException(tag, value);\n\t\t", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "def determine_date_of_signup(row, date_of_signup, date_of_birth):\n    if not date_of_signup:\n        return None\n    else:\n        if \"y\" in date_of_signup:\n            return add_", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "   # check if we need to map padding bits\n    if rem and rem%8 == 0:\n        # add a new element with \"Rest\" name\n        self.append( RestOctets(done, rem, self.rest_name) )\n        # and call .map() again", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "       # Make sure we're looking at models\n        validate_is_model(model)\n        model.Meta.table_name = self._compute_table_name(model)\n\n    def describe_table(self, table_name):\n        \"\"\"Returns the table description from Dynam", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "\n        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\"\"\"\n\n    def bloquear_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "   with pytest.raises(TypeError):\n        engine.bind(object, \"test\")\n\n\ndef test_bind_model(engine):\n    \"\"\"Bind a model to the engine.\"\"\"\n    engine.bind(ComplexModel)\n    assert engine.Meta.models ==", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "\n    assert u6.dimensions == mass_sun_kg\n    assert u6.base_value == 1.0\n\n    # make sure we don't create a unit from a string that already exists\n    with_same_name = Unit(\"kg * m**2 * s", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "\n             '\"root/cimv2:TST_Person.name=\\\\\"Mike\\\\\"\"',\n\n                 'member',\n                 '=\"root/cimv2:TST_Person.name=\\\\\"Mike\\\\\"\"',\n\n                 'member',\n                 '", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       // Load all modules\n        List<String> mods = new ArrayList<>();\n        mods.add(\"sql\");\n        mods.add(\"loan\");\n        mods.add(\"virtual\");\n        mods.add(\"currency\");\n        for (String mod : mods)", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       if name == \"\":\n            name = None\n        else:\n            name = name.encode(\"ascii\")\n\n        tags = c_int()\n        self._call_fmod(\n            \"FMOD_Sound_GetTag\",\n            self._sptr,\n", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   public void showSnackBar(View parent, String displayMsg, int duration) {\n                        Snackbar.make(parent, displayMsg, duration).show();\n                    }\n\n                    @Override\n                    public void showSnackBar(View parent, String", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "\n        resource = ThermometerResource(aircraft.instruments.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"],", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "   ref, action = reference_tracker._value_ref(column, value)\n\n    assert ref == \":v0\"\n    assert action == expected_action\n    assert reference_tracker.attr_values == expected_values\n\n\ndef test_ref_value_path_nested", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "\t\t\t\tPlatform.runLater(new Runnable() {\r\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\r\n\t\t\t\t\t\t\tprogressDialog.close();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t});\r\n           ", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "           node_list = chain(nodes, post.user.userprofile.comments.all())\n        else:\n            node_list = chain(nodes, post.user.userprofile.comments.all())\n        paginator = Paginator(node_list, 10)\n", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   Call<EmojiResponse> getEmoji(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Search for gifs based on a query term\n     *\n     * @param serviceIds a {@link Map} of a collection of ids for better content delivery", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "               final String errorCode = connectionErrorCode.name();\n                of(mWifiStateListener).ifPresent(stateListener -> stateListener.isSuccess(false));\n                of(mConnectionWpsListener).ifPresent(connectionWpsListener -> connectionWpsListener.isSuccessful", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "           LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "       }\n        for (Stack stack : StackManager.get().getStackList()) {\n            addListenersToStack(stack);\n        }\n        for (Stack stack : StackManager.get().getArchivedStackList()) {\n            addListenersToStack(stack);\n", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "   for recording, utterances in self.run():\n    for recording, utt in self.run():\n    for recording, utt in self.run():\n    for recording, utt in self.run():\n    for recording, utt in self.run():\n    for recording,", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "\n    private final Deployments deployments;\n    private final Vms vms;\n    private final Tasks tasks;\n    private final Errands errands;\n    \n    public SpringDirectorClient(RestTemplate restTemplate, Info info, Releases releases, Stemcells stemcell", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       for i in range(self.num_tags):\n            try:\n                tag.name = name\n                tag.type = self.tag_types[i]\n                tag.datatype = self.tag_data_types[i]\n                tag.datalen = self.", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "               nbits_encoded\n            )\n        else:\n            nbits_encoded += self.process_section(bufr_message, bit_writer, section)\n\n        bufr_message.serialized_bytes = bit_writer.get_bytes()\n\n        if wire_template", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "       report_abuse_form = ReportAbuseForm(request.POST)\n        report_abuse_form = ReportAbuseForm(request.POST)\n        report_abuse_form = ReportAbuseForm(request.POST)\n        report_abuse_form = ReportAb", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   @OverrideNext line of code:\n    @OverrideNext line of code:\n    @OverrideNext line of code:\n    @OverrideNext line of code:\n    @OverrideNext line of code:\n    @OverrideNext line of code:\n    @OverrideNext line of code:\n   ", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "       ProtTestOptions options = factory.createProtTestArgumentParser(args).parse(args);\n\n        // Printing header\n        System.out.println(ProtTestFormattedOutput.space(94, '-'));\n        System.out.println(\"ProtTest \" +", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\t\n\t\ttropo.record(URL(request.getRequestURI()), true);\n\t}\n}\nsrc/main/java/com/voxeo/tropo/actions/Do.java\n@Deprecated\npublic static ChoicesAction choices(Key... keys", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "               listaDeRespostas.getPropriedades().getEstado() == \n                EstadoDaListaDeRespostas.SALVA) {\n            //Quando a lista esta salva e aberta, não pode ser aberta mais.\n            //Aqui, não precisa", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code, DataConnector dc) {\n\t\t\t\tmViewPager.setAdapter(adapter);\n\t\t\t}\n\t\t});\n    }\n}\nDeview/src/com/nhn/android/deview/ui/", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    StateFactory stateFactory;\n\n    @Mock\n    PlayerUIController playerController;\n\n    @Mock\n    PlayerAdLogicController componentController;\n\n    @Mock\n    AdInterface ad", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\tstage.close() ;\n\t\t\t}\n\t\t});\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error occurred while setting onCloseRequestProperty\", e);\n\t\t}\n\t\t\n\t\t// create an observer service\n\t", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "     if (packageName.endsWith(INJECT_ADAPTER_SUFFIX)) {\n        // The companion class is already generated.\n        return;\n      }\n\n    JavaFile file =\n        JavaFile.builder(\n            type.getQualifiedName().toString(),\n", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "           new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);}\r\n        /**\r\n         * 打开/关闭透传消息\r\n         * @param enable 打开/关闭\r\n         */\r\n        public static void", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": " assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n\n\ndef test_parameters_msgtype3():\n  '''\n  Zero+One+Two message test\n  '''\n  parser = prepareArgsParser()\n  params = [", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "   for child in elem:\n        if callable(child.tag):\n            if child.tag.__name__ != 'ProcessingInstruction':  # type: ignore[attr-defined]\n                break\n\n\n    if child.tag.startswith('{'):\n        name = node", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "\n    # Create the index and the ordered arrays\n    self.index = np.ones((len(data), length_last), dtype=np.uint8)\n\n    def get(self, key):\n        \"\"\"Returns the data for a key\"\"\"\n        if key not in self", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               TypingMessage m = (TypingMessage)message;\n\n                addMessage(new ChatMessage(ChatMessageSource.SYSTEM, ChatMessage.TEXT_TYPING));\n\n                _isTyping = true;\n            }\n            else\n            {\n               ", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\t\tTvalues_A = glm_cosinor(dmy_rightvar,\n\t\t\t\t\t\tEXOG,\n\t\t\t\t\t\tdmy_covariates=dmy_covariates,\n\t\t\t\t\t\toutput_fvalues", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "       assertThat(main.getName(), equalTo(\"main\"));\n        assertThat(main.getLock().getId(), equalTo(ThreadLock.class.getSimpleName()));\n        assertThat(main.getLock().getClassName(), equalTo(ThreadLock.class.getCanonicalName", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               //mTimeText.setText(mRecord.getRecordTime().toRecordTime());\n                break;\n\n            case R.id.record_weather:\n                // 选择天气\n                WeatherPicker weatherPicker = (WeatherPicker) this.findViewById", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GyroscopeSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   private SetOtherFragment setOtherFragment;\n\n    private ViewPager mViewPager;\n    private Toolbar toolbar;\n    private FloatingActionButton fabHook;\n\n    private Context mContext;\n    private XpNavBarSetting mXpNavBarSetting;\n    private boolean", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "       self.listener.launch_collector()\n\n        # XXX this is a hack for testing.  It should be replaced by a proper\n        # test harness.\n        if config.pcap_playback:\n            self.listener.live = True\n            self.listener.p", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "   assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "       return RestfulModelCollection(Webhook, self)\n\n    @property\n    def neural(self):\n        return Neural(self)\n\n    def _get_resource(self, cls, resource_id):\n        response = self.api._get_resource_raw(", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "       (int) (ActivityLightLevelChanger.BRIGHTNESS_DIM * 100));\n    activityLightLevelManager = new ActivityLightLevelManager(activityLightLevelChanger,\n        Next line of code:\n        (int) (ActivityLightLevelChanger.B", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "           non_equilibrium_thermochemical_error = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_ther", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "           PLMNList(with_options, **kwargs),\n            Int('MSclassmark1', Pt=MSCm1(), Len=1),\n            Int('MSclassmark2', Pt=MSCm1(), Len=1),\n            Int('MSclassmark3',", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "       TcClassParser(self.__con).parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n    def __parse_device(self, device):\n        if typepy.is_", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "       result, index = apply_fast_eq(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values.astype(np.bool", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "\n    @validation_error(RequestValidationError)\n    def test_handle_request_with_error():\n        mock_request = mock.Mock(\n            spec=PyramidSwaggerRequest,\n            query={'int': '123', 'float': '3.1", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
