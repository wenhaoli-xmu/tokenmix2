{"pred": "\t\t\t\tfor ( int j = 0; j < types.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tif ( m_Participants[i] is Participant )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_v, e_u, **data.copy())\n\t\t\tZ_.add_edge(e_v, e_u, **data.copy())\n\t\t\tZ_.add_edge(e_v, e_u, **", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r')\nNext line of code:\n        nb = 1024\n        buffsize = 1024\n        buffsize = min(a.nframes, buffsize)\n        buff = a.read_frames", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    self.assertEqual(self.video_id(), \"Some video id\")\n\n\n\n\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue value = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"min\", value.getMin());\n\t\t\t\t\twriter.addAttribute(\"max\", value.getMax());\n\t\t\t\t\twriter.addAttribute(\"", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "       if self.answers:\n            ret += \" \".join(self.answers)\n        return ret\n    def is_correct(self, answer):\n        if self.answers:\n            for a in self.answers:\n                if a.lower() in answer.lower", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Prompt = new SR_NewRunebookPrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           s.print(\"Certificate chain length: \" + messageLength);\nNext line of code:\n            s.print(\"[\");\nNext line of code:\n            for (byte[] b : encodedChain) {\n                s.print(\"   \");\n                s.print(b);\n", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public synchronized static void registerListener (SpaceListener listener)\n    {\n        JESpace sp = (JESpace", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       # request = environ['PATH_INFO'].split(\"?\")[0]\n        # response = self.dispatcher.dispatch(request)\n        # start_response('200 OK', [('Content-Type', 'text/xml'), ('Content-Length', str(len(response", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       mark = \"markAsRepeated('%s');\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_id):\n        mark = \"unmarkAsRepeated('%", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "           return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            return result\n    def action_extract_archive", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!Reference", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "   return self.trust_managers.getAcceptedIssuers()\n# CompositeTrustManager allows for mixing together Java built-in managers with new managers to support Python ssl.\n#\n# See http://tersesystems.com/2014/0", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomain(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n    /**\n     * Sets the domain info\n     *\n     * @param request the request being serviced\n     * @param domain the domain\n     *", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "           self.__tmp_dir, self.__render_settings.output_format, 'render-%s.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool2);\n\t\t\t\t\t//check if jumpID is in the array\n\t\t\t\t\tif (jumpsNormal.Length > ", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\nNext line of code:\n        for (int i = 0; i < args.length; i++) {\nNext line of code:\n            if (args[i] == null) {\nNext line of code:\n               ", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMED(new ConfigFile<String, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(String id, ConfigurationSection conf)\n\t\t", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tgeneralNode.setPreferenceStore(mgr);\n\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(SHOW_", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "\t\t\t\tm_Owner.FinishSequence();\n\t\t\t}\n        }\n\t}\n}\n", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self.flush()\n        # ...\n        \"\"\"Finalize a session's loading of persistent state.\n        This method is invoked after all :class:`.Session.load`\n        operations have completed.  It is invoked\n        immediately after :meth:`.Session.flush`\n       ", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t\t\tnamed =", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   like ``r'/foo/*'`` in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if not self.request.path.endswith(\"/\"):\n", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\t\tif (ViewCount > 0)\n\t\t\t\t\tbase.Render (writer);\n\t\t\t\telse\n\t\t\t\t\twriter.Write (View.ActiveView.Render (writer));\n\t\t\t}\n\t\t}\n\t}\n}\n", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   wigle_downloader = WigleDownloader(args.user,args.password,args.coordfile,args.outpath)\n    wigle_downloader.run()\n", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 160)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Possible", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       for plat, plat_builds in platforms.items():\nNext line of code:\n            for plat_build in plat_builds:\nNext line of code:\n                builds.append(plat_build)\nNext line of code:\n    else:\n        android_builds", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID==null || projectID.equals(issueTypeID)) {\n\t\t\tstateBeansList = StatusBL.loadByProjectType(projectID);\n\t\t} else {\n\t\t\tstateBeansList = StatusBL.loadByProjectTypeAndIss", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                var argument = argumentSyntax.Argument;\n                if (argument.Parent.GetType() == typeof(VariableFunctionCallStatementSyntax)) {\n                    ArgumentSyntax variableFunctionCallArgument = argument;\n                    var argumentName = variable", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self._update_partition_id(0)\n        # Change to second group configuration.\nNext line of code:\n        split_test = self._update_partition_id(1)\n        # Verify that the child verticals have been set to match the groups\n", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           int[][] metrics = (int[][])parms[1];\n            if (metrics.Length > 0) {\n                // the font is not a subset of another font\n                if (fontSpecific) {\n                    // the font is specific\n                    int[][] new", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcgn = new GraphNode();\n\t\t\t\t\t\t\tc", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       return Util.getBitmap(context, callable, new FutureTaskListener<Bitmap>() {\n          @Override public void onSuccess(final Bitmap result) {\n            Log.w(TAG, \"success\");\n            task = new ListenableFutureTask<Bitmap>(result);\n            task.add", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   def step(self):\n        self.prerequisite_view.policy.item_select('Manage Policies')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               if (Enabled)\n                {\n                    string[] roles = Roles.Split(new String[]{ RoleSeparator }, StringSplitOptions.RemoveEmptyEntries);\n                    bool allow = CollectionUtils.Contains(roles,\n                                 delegate(string role)\n                                 {\n", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");\n\t}\n\t\n\t@Override\n\tpublic NBTTagCompound writeToNBT(NBTTagCompound compound)\n\t{\n\t\tsuper.writeToNBT", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return getId() + \" \" + getSpecification().toString();\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void writeToXML(FreeColXMLWriter xw) throws XMLStreamException {\n        writeAttributes(xw);", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       p = Person.objects[0].select_related()\n        o = Organization.objects.first()\n        self.assertEqual(p.owns[0], o)\n        self.assertEqual(o.owner, p)\n        self.assertEqual(p.employ", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   inspect_l1b_product('%s/L1B/L1B_20170919T173612_R0001_T0170919_173612.nc', 'dir')\n", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               toScan.Add(path);\n            }\n            foreach (var path in toScan)\n            {\n                if (_fileSystemWatchers.ContainsKey(path))\n                {\n                    var watcher = _fileSystemWatchers.First(x => x.Key == path);", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn (computed == null) ? null : write(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tFunction<K, I> function =", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       resbrains = cat.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\n            if contobj.isDiscussable() and canreply(contobj):\n                is", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t\t}\n\t\tinternal byte m_X;\n\t\tinternal byte m_Y;\n\t\tinternal byte m_Patch;\n\t\tinternal short m_Hue;\n\t}\n\tpublic static class Tile", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): avatar \\\"{3}\\\": voice enabled for parcel\",\n                    //                      scene.RegionInfo.", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(IsNew){\n\t\t\t\tPayPeriods.Add(PayPeriodCur);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tPayPeriods.Update(PayPeriodCur);\n\t", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column_", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   if not user:\n        return {'success': False, 'msg': _('Valid API key needed to create a group or organization member')}\n    return authz.is_authorized('group_member_create', context, data_dict)\ndef group_member_create(context,", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tint outcome = example.getValue(predictionAttribute);\n\t\t\t\t// assigning current result set to parent node\n\t\t\t\texample.setValue(outcomes, parentIndex);\n\t\t\t\t// calculating confidences\n\t\t\t\tdouble confidence = confid", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new SearchResults[0];\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"segments\">The array containing", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = ch - '\\uDC00';\n         } else if ('\\uDC00' <= ch && ch <= '\\uDFFF' && offset < strlen) {\nNext line of code:\n            codePoint = ch - '\\uDC00';\n         } else", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "   if (IActionConstants.TRUE.equals(existingRequired)) {\n      ValidationResults results = ValidationResults.SAMPLE_NOT_FOUND;\n      SampleDAO sampleDAO = new SampleDAOImpl();\n      List<Sample> samples = sampleDAO.get", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (LobbyInfo.GameUid == handsh", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add((beans[x]).buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'notify':\n    notify(header, message, icon, time, sound)\nelif prnum", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \nNext line of code:\n            A.GetValueSeq(seqindex,ref ret); \nNext line of code:\n            return ret; \n            return null; \n        }\n        ///", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  if not plotName:\n    return S_ERROR( \"Missing plot name!\" )\n  #Get plotname\n  if not 'startTime' in pD:", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var builder in builders)\n\t\t\t\tif (builder.IsBuildingReady && builder.IsBuildingAvailable)\n\t\t\t\t\tbuilder.Build(bot);\n\t\t}\n\t\tvoid IBotPositionsUpdated.PositionsUpdated(IBot", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       // Execution Plan\n        List<AbstractPlanNode> planNodes = plan.getPlanNodes();\n        List<AbstractPlanNode> resultPlanNodes = new ArrayList<AbstractPlanNode>();\n        for (AbstractPlanNode node : planNodes) {\n            resultPlanNodes.add(node.", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(264, 22);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.fParity = parity;\n\t\t\tdcb.fOutxCtsFlow = hs == Handshake.XOnXOff ? 1 : 0;\n\t\t", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=admin)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n    def test_cobrand_user_with", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args(sys.argv[1:])\n    args.keep_tempdir = _keep_tempdir\n    print \"args.keep_tempdir is\", args.keep_tempdir\n    _keep_tempdir = args.keep_tempdir\n   ", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\tself.listLength = len(self.newAPList)\n\t\t\tif self.listLength > 0:\n\t\t\t\tself.listLength = self.listLength - 1\n\t\t\t\tif self.listLength > 0:\n\t\t\t", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               float barHeight = size * 3;\n                float barWidth = (fCode.Length * 10) - 1;\n                return new Rectangle(0, fontY, (int)fontX, (int)barHeight);\n            }\n        }\n        \n       ", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   String[] results = MetaClass.cast(props.getProperty(key), String [].class);\n    return results;\n  }\n  public static String[] getStringArray(Properties props, String key, String defaultValue) {\n    String[] results = MetaClass.cast(props.", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       x_points, y_points = np.meshgrid(x_points, test_cube.coord(\"longitude\"))\n        sample_points = [(\"longitude\", x_points.flatten()), (\"latitude\", y_points.flatten())]\n        result =", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetText(currPacket.ToString());\n        }\n        private void toolStripButtonRevert_Click(object sender, EventArgs e)\n        {\n            _index -= 1;\n            if (_index < 0)\n            {\n                _index =", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "   elif color == 'yellow':\n        print '\\033[31;32;40m'\n    else:\n        print '\\033[31;31;40m'\ndef print_timbre_pitch_loudness(wav_", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "           set {\n                if (value > _numValues) {\n                    throw new ArgumentException(\"value > _numValues\");\n                }\n                _numValues = value;\n            }\n        }\n        public bool HasNullEntry {\n            get { return _hasNullEntry; }", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(245, 2", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "       else:\n            return self.createBaseFunction( \n                original.__name__, original.DLL, \n                resultType = original.restype,\n                argTypes = original.argtypes,\n                doc = original.__doc__,\n                argNames = original.argNames", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           baos.write(emptyStreams.toByteArray());\n            header.write(baos.toByteArray());\n            baos.close();\n        }\n    }\n    private void writeFileEmptyFiles(final DataOutput header) throws IOException {\n        boolean hasEmptyFiles =", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   alphaLevel = (int) (alphaLevel * Math.pow(0.9, 1.0 / rampDelay));\n                    repaint();\n                }\n                else\n                {\n                    alphaLevel = (int) (alphaLevel * Math.pow(0.9", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\nNext line of code:\n            item.CanBeRemoved.Should().BeTrue();\nNext line of code:\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "               if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, can", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       f.writelines(['F) 1\t\t\t# PSF oversampling factor '\\\nNext line of code:\n        f.writelines(['G) 0.1\t\t# PSF oversampling factor '\\\nNext line of code:\n        f.writelines", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x02:\n                    /* C", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course.\n        Raises a `FixtureError` if the course already exists.\n        \"\"\"\n        course_url = STUDIO_BASE_URL + '/courses", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tfor(String split : splitNumber) {\n\t\t\tif(split.equals(\"!\")) break;\n\t\t\tchance-=Float.parseFloat(split);\n\t\t}\n\t\treturn (int) (chance*100);\n\t}\n}", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "       # Delete the meter_id file\n        os.remove('%s/%s.pem' % (config_directory, meter_id))\n        # Delete the meter_id ca.pem file\n        os.remove('%s/ca.pem' % (config_directory", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 6);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size =", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "\n        if self.opts.list_plugins:\n            self.list_plugins()\n        else:\n            self.collect_plugins()\n        self.ui_log.info(\"\")\n        self.ui_log.info(_(\" Finished running plugins. Please wait ...\"))\n       ", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class ISessionParticipationMinimalFossil(IFossil):\n    def getId(self):\n        \"\"\" Session Participation Id \"\"\"\n    def getFirstName(self):\n        \"\"\" Session Participation First Name \"\"\"\n    def getFamilyName(self):\n        \"\"\" Session", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           DialogUtils.alertError(parent, e.getMessage());\n                        }\n                        return true;\n                    }\n                };\n                result = new MessageImportResult(messageWriter);\n            } else {\n                MessageImporter importer = new MessageImporter() {\n                ", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tlayer = ((Scriptable) value).getInt32(0, (Scriptable) value);\n\t\t       \t\t} else {\n\t\t       \t\t\tlayer = ((Map) value).get(\"layer\").getInt32(0, (Map)", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession.isOpened()) {\n            userInfoSession = currentSession;\n            user = currentSession.getUser();\n            userProfilePic = getProfilePicture();\n            userProfilePicID = getProfilePictureID();\n            connectedStateLabel = (TextView) get", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tfor (int i = 0; i < emotion.influences.length; i++)\n\t\t\t\tsum += emotion.influences[i][0] * emotion.influences[i", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n            }],\n            self.build.stages_to_list())\n    def test_to_xml(self):\n        \"\"\"Test exporting as an XML file\"\"\"\n        # read and parse sample file", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   T = tan(phi1)\n    phi2Rad = (phi1 + (5-18*eccPrimeSquared/4-3*eccPrimeSquared*eccPrimeSquared/64-5*eccPrimeSqu", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       form = ReportUserForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Report sent!\")\n            return HttpResponseRedirect(reverse('profile'))\n    else:\n        form = ReportUserForm(instance=", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   def setUpFields(self):\n    \"\"\"See `LaunchpadFormView`.\"\"\"\n    self.field_names = [\n        \"name\",\n        \"displayname\",\n        \"description\",\n        \"parent\",\n        \"status\",\n        \"productseries\",\n        \"", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tform.RightToLeftLayout = true;\n\t\t\t}\n\t\t}\n#endif\n\t\tpublic static KPTranslation Load", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>>= 8;\n                if (temp == 0)\n                {\n                    break;\n                }\n            }\n        }\n        return arr;\n    }\n}", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "               new_positional_tags_list.append((flag, regex))\n            return new_positional_tags_list\n    def default_system_out(system_out):\n        if not system_out:\n            return system_out\n        else:\n            return system_out", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (Type type, BindingFlags bindingAttr)\n            {\n                return", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "   fields_desc = [\n        StrFixedLenField('data', b'', 1)\n    ]\n\nclass OBD_PID1D(OBD_Packet):\n    name = \"PID_1D_EngineCoolantTemperatureHigh\"\n    fields", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tready_pipe = dbus.service.BusName(ready_pipe, allow_replacement=True, replace_existing=True)\n\t\tbus = dbus.service.Bus(ready_pipe)\n\t\tready_pipe = -1\n\t\tbus.add_", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "               this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);\n                this.AddRes(index, typeof(RunedPrism), 1073464, 1,", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "       # If there is a preserved exception we want to pop that one.\n        # Otherwise we pop the one that was pushed last.\n        if exc is None:\n            exc = self._preserved_exc\n        if BROKEN_PYPY_CTXMGR_EXIT", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ################################################################################################################################\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition default", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       dx = (ray_trafo.range.meshgrid[1] + ray_trafo.range.meshgrid[2])\n        angles += ray_trafo.range.meshgrid[0]\n        angles[0] = 0\n    else:\n        raise", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "       logger.log(u\"Proxyfied RE: \" + regx, logger.DEBUG)\n        return regx\n    def _doLogin(self):\n        \"\"\" Return True if we are logged in to the Provider \"\"\"\n        return False\n    def _doSearch(self, search", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tswitch (type) {\n\t\t\t\tcase FontSize.Smaller:\n\t\t\t\t\treturn \"Smaller\";\n\t\t\t\tcase FontSize.Larger:\n\t\t\t\t\treturn \"Larger\";\n\t\t\t\tcase FontSize.XX", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar obj1 = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(obj1.Properties.Count, Is.EqualTo(2));\n\t\t\tAssert.That(obj1.Properties[\"In this test\"].Value.Type, Is.", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int w = 0; w < width; w++) {\n                    edges.add(new T2<String,String>(T2.makeT2(T2.makeT2(w, h, this.isToroid), T2.makeT2(h", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   i1 = iso.Isoelastics(ds)\n    data = i1.get(col1=\"area_um\",\n                  col2=\"deform\",\n                  channel_width=20,\n                  flow_rate=0.04,\n                ", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       final File file1 = new File(args[0]);\n        final File file2 = new File(args[1]);\n        final AbstractTripleStore db1 = new LocalTripleStore(file1);\n        final AbstractTripleStore db2 = new LocalTripleStore(file2", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "       ]\n        assert alert.lowest_spotprice(history) == 0.104400\n    def test_highest_spotprice(self):\n        \"\"\"We should find the highest spotprice for a given zone or return None.\"\"\"\n        history = [ {u", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\t\treturn performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\tpublic boolean performInstallation() {\n\t\tboolean hasUI = true;\n\t\ttry {\n\t\t\tint selection = JOptionPane.showConfirmDialog(null,\n", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t}\n\t\tpublic void SetViewport(int x, int y, int width, int height)\n\t\t{\n\t\t\tVerifyThreadAffinity();\n\t\t\tOpenGL.glView", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._project_cov_mat(\n            self.x_data_cov_mat_inverse, self.y_data_cov_mat_inverse, self.x_model, self.parameter_values", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * Returns the toString representation of this bean.\n     *\n     * @return the toString representation of this", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "               }\n              } catch (AuthException e) { // In case the account is deleted, use the eucalyptus admin account\n                LOG.warn(\"Account ID \" + walrusObject.getOwnerId() + \" does not not exist. Changing the ownership of object \"\n                   ", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public event EventHandler Initialized\n        {\n            add { _intialized += value; }\n            remove { _intialized -= value; }\n        }", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplateCommand command = new ImportVmTemplateCommand(createParameters(isImportAsNewEntity, name));\n        ImportVmTemplateParameters p = command.getParameters();\n        assertEquals(isImportAsNewEntity, p.isImportAsNewEntity());\n        assertEquals(", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.TopAttach = ((uint)(1));\n\t\t\tw10.BottomAttach = ((uint)(2));\n\t\t\tw10.LeftAttach = ((uint)(3));\n\t\t\tw10.RightAttach = ((uint", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "           environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        if self.totalstatus is not None:\n            environ['%sTOTALSTATUS' %", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)\n\t\t", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return (Builder) new Builder().MergeFrom(prototype);\n    }\n    \n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                   vertices[x] = new Vector3f(getVertices()[getVertIndex(i, x)],\n                            getNormals()[getVertIndex(i, x)],\n                            getColors()[getVertIndex(i, x)]);\n            }", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (!CmsStringUtil.isEmptyOrWhitespaceOnly(showDateData)) {\n            result.add(0, showDateData);\n        }\n        // backward compatibility: check for property defining visibility of document id column\n        String showDocId = property(\"id\", \"search", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\t\t\n\t\t\t\tif (inputField.lineType == InputField.LineType.MultiLineNewline || inputField.lineType == InputField.LineType.MultiLineSubmit)\n\t\t\t\t{\n\t\t\t\t\t\t\t\n\t\t\t\t\t", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnMouseClick(MouseEventArgs e)\n    {\n      if (e.Button == MouseButtons.Left)\n      {\n        if", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                else\n                {\n                    lastUser = r[\"ModifiedBy\"].ToString();\n                }\n                if (Users.Contains(lastUser) == false)\n                {\n                    Users.Add(lastUser", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (directions", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           if (VerificationResultCollection.VerificationResult.Count > 0)\n            {\n                throw new EOPException(Catalog.GetString(\"Manual settings are not valid.\"));\n            }\n            if (CriteriaCodesUsed.Count > 1)\n            {", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                args.Add (filename, buffer, buffer.Length);\n            }\n        }\n    }\n}\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "       return len(self._reqs) == 0\n\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && CopyCustom; }\n\t\t}\n\t\tpublic bool CopyCustomRange\n\t\t{\n\t\t\tget { return _customRange != null; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value)\n\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t\tget {\n\t\t\t\treturn cacheDir;\n\t\t\t}\n\t\t}", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation instanceof BugAnnotation) {\n                BugAnnotation bugAnnotation2 = bugAnnotation;\n                BugAnnotation bugAnnotation3 = bugAnnotation2;\n                BugAnnotation bugAnnotation4 = bugAnnotation3;\n                BugAnnotation bugAnnotation5 = bugAnnotation4;\n                BugAnnotation bugAnnotation6", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\tpublic override void OnDoubleClick( Mobile from )\n\t{\n\t\tbase.OnDoubleClick( from );\n\t\tif ( !from.InRange( this.GetWorldLocation(), 1 ) )\n\t\t{\n\t\t\tfrom.SendLocalizedMessage( 50", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                }\n            }\n        }\n        private void JungleClear()\n        {\n            if", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "\n", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(\n            field_def['rules']['marc'][1]['function'],\n            field_model_def['rules']['marc'][1]['function'])\n        self.assertEquals(\n            field_def['rules']['marc'][1]['function'],\n", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new[] {new object[] {\"E1\", 10L, \"E1\"}});\n                env.UndeployAll();\n                // widen to short\n                stmtTextCreate = namedWindow\n                    ? \"create window MyInfraW#keepall as (", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "       return c\n    \n    def __div__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        return c.__idiv__(other)\n    \n    def __id", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "   view_obj.create(cr, uid, arch, context=context)\n\n\n", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = createHTMLView(c, text);\n        }\n        c.putClientProperty(BasicHTML.propertyKey, value);\n        c.putClientProperty(htmlDisable, htmlDisabled);\n    }\n    private static final String propertyKey = \"htmlView\";\n   ", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, contents=content)\n    assert s.name_is_testharness\n    assert not s.name_is_manual\n    assert not s.name_is_visual\n    assert not s.name_is_multi_global\n    assert not s.", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.sqlloader = new HbmSqlLoader();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new ArgumentOutOfRangeException(nameof(namedQueryReference), \"SqlLoader must not be set more than once.\");\n\t\t", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.Write( (PlayerStateCollection) m_Members );\n\t\t\twriter.Write( (int) m_FactionItems.Count );\n\t\t\tfor ( int i = 0; i < m_FactionItems.Count; ++i )\n\t\t", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       invocationQueue.removeFirst();\n        assert graphQueue.size() <= maxGraphs;\n    }\n    private void pushInvocation(MethodInvocation methodInvocation) {\n        assert !contains(methodInvocation.callee().asNode().graph());\n        invocationQueue.addLast(method", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "               self.pytest_command = \"py.test -k 'not {}'.format('{}.py'.format(pytest))\".format(pytest)\n                if self.args['sprout']:\n                    self.pytest_command += \" -k 'not {}'.format", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (value != null) {\n                    if (value instanceof ValuePhiNode) {\n                        ValuePhiNode phi = (ValuePhiNode) value;\n                        if (phi.getValues().size() == 2) {\n                            phi.getValues().add(", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n}\n", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendLocalizedMessage(1156702);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void GetContextMenuEntries(Mobile from, List<ContextMenuEntry> list)\n\t\t{\n\t\t\tbase.", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   'Record',\n    'RecordMetadata',\n])\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "       self.module.pop(username, None)\nNext line of code:\n        self.module.pop(domain, None)\nNext line of code:\n        self.module.set('all_users', set())\nNext line of code:\n        self.module.set('all", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def percent_translated(self):\n        \"\"\"\n        Convenience method that return the percentage of translated", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to get problematics for transformation %s\" % transID )\n    if res['Value']:\n      gLogger.info( \"Found problematics for transformation %s\" % transID )\n    else:", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(uri.getPath().startsWith(PLUGINS_PREFIX))\n\t\t\t\tthrow new CommentException(l10n(\"invalidFormURI\", \"plugins\"));\n\t\t} catch (URISyntaxException e) {\n\t\t\tthrow new CommentException", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       d = self.run_fake_single_build(self.gsp, buildResult, verifiedScore)\n        return d\n    @defer.inlineCallbacks\n    def check_single_build_legacy(self, buildResult, verifiedScore):\nNext line of code:", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.term = 'www.google.com'\n    self.category.type = 'text'\n    self.category.text = 'foo'\n    self.assert_(", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "               Map<String, AnnotationMirror> r2) {\n            return r1;\n        }\n        public Map<String, AnnotationMirror> visit(AnnotatedDeclaredType type,\n                Map<String, AnnotationMirror> r1) {", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_timer_irq_counter = map16.TimerI", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           JMenuItem oMnuItem = new JMenuItem(oActionListener);\nNext line of code:\n            _jMnuRoot.add(oMnuItem);\n            m_jPopupMenu.add(getOpenDocumentMenuItem(_jMnuRoot));\n        }\n        private", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [5 Red Bears]\nNext line of code:\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [5 Red Bears]\nNext line", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\t\treturn Frame.H + min;\n\t\t\t\treturn Frame.H;\n\t\t}\n\t\tpublic void SetBackgroundColor (Color color)\n\t\t{\n\t\t\tthis.backgroundColor = color;\n\t\t\tif (Frame.BackgroundColor == color)", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "       return self.announcement.title\n\n\n", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "   lexers['php'] = PhpLexer\n# Enable highlighting for PHP code not between <?php ... ?> in the Kotori documentation\nNext line of code:\n    lexers['php'] = PhpLexer\n    #lexers['php'] = 'kotori", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                ORDER BY sdate, stime\n\n                 ''', (i,))\n    row_count = len(cursor.fetchall())\n    print \"row_count is: \", row_count\n    \n    cursor.execute('''SELECT sdate, stime, edate, etime", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "   db_set_last_snapshot(new_snapshots)\n    try:\n        db = conn.db('projects')\n        db.table('projects').get_all()\n    except rethinkdb.RqlQueryError:\n        log(\"Error getting all projects", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"Hey, I don't have time for this!<br/>If you want to be a good guy,<br/>why don't you help me with my sheep?<br/>It's not that hard...<br/>You'll get paid,", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\tname\t- aname/ename/gname\n\t\tvalue\t- vote value\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "       self.finish = None\n    def __str__(self):\n        return '%s: %s (%s)' % (self.uuid, self.name, self.path)\n    def add_host(self, host_data):\n        \"\"\" add a host data record for this", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               else if (!noConnectionError && !connectionError && toastType.equals(TOAST_DETAILED))\n                    Toast.makeText(context, getString(R.string.toast_message_done) + uri, Toast.LENGTH_LONG).show();\n                else", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   assert(len(primary.keys()) == 0)\n\n", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "           build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    def _get_build_dir (self):\n        return self.get_", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int i = 0; i < disassembledValues.Length; i++)\n\t\t\t{\n\t\t\t\tobject propValue = disassembledValues[i];\n\t\t\t\tif (InitializeLazyProperty(fieldName, entity, session", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '-N', request['job_id'],\n        '-q', request['job_state'],\n        '-n', request['job_number'],\n        '-o', log_name,\n        '-l', log_name,\n        '-J', job_name,\n        '-M',", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        //[RolesRequired(\"Admin\",\"SaveEventDelegate\")] \n        public ActionResult SaveEventDelegate(", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                       return string.Format(\"{0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n\ndef parse_fileserve_com_link_check(link_check_response):\n    \"\"\"Parse response from fileserve.com link checker\"\"\"\n    match = re.search(FileserveCom.LINKCHECK_TD, link_check_response)\n    if match", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tvar closestPathCell = path[0];\n\t\t\t// Check if we found a path and if it contains the target cell.\n\t\t\tif (path.Count > 0 && closestPathCell.HasValue)\n\t\t\t{\n\t\t\t\tvar pathCell", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                       self.logger.error(service_restart)\n                        return False\n                else:\n                    service_restart = \"service %s reload\" % service_name\n                    rc = utils.subprocess_call(self.logger, service_restart, shell", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return newEvent().setSeverity(EventSeverity.ERROR).setSource(source).setMessage(\"Error: \").build();\n    }\n    @Override\n    public synchronized void sendEvent(Event e) {\n        if (logAllMessages) {\n            log.", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           for (; stateIndex < MAXIMUM_ORDER; stateIndex++)\n            {\n                states[stateIndex] = PpmState.ZERO;\n                gotoLoopEntry = true;\n            }\n            if (!gotoLoopEntry)\n            {\n                goto NoLoop", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Short VR.\n        /// </summary>\n        public static readonly DicomVr SSvr = new DicomVr(\"SS\", false, false, true,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(tFull[3].ToString());\n\t\t}\n\t\tstring [] sessionValuesArrayStrings = new String[sessionValuesArray.Count];\n\t\tsessionValuesArray.CopyTo(sessionValuesArrayStrings, 0);\n\t\tstring [] sessionValues", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "       o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 12)\n        self.assertEquals(b'abcdefghij\\x00\\x00\\x00ij', self.read(o))\n   ", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X (", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   plt.plot(cr['combined'][app][VC]['durations'], cr['combined'][app][VC]['stats'][stat], 'o-')\n    plt.fill_between(cr['combined'][app][VC]['durations'], cr['combined", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   def test_GID(self):\n        \"\"\"\n        Check GID/UID switches when current effective GID is root.\n        \"\"\"\n        self._testUIDGIDSwitch(0, 0, 0, 0, [1, 0], [])\n        self", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t}\n\t\t\t\tif(bDrawCheck || bDrawCross){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlColor());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1,", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[1])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult,", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(kind, offset, value);\n    }\n    public boolean writeHeaderValue(ObjectMirror mirror, int offset, Value value) {\n        if (offset == lengthOffset) {\n            mirror.writeArrayLength(value);\n            return true;\n        }", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           string assemblyFile = FileUtils.CombinePaths(Parent.Directory, relativePath);\n            if (File.Exists(assemblyFile)) {\n                return assemblyFile;\n            }\n            return null;\n        }\n    }\n}\n", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return string % args, **kwargs\n\n\n", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       i20 = i18 + i15;\n        i21 = i20 + i16;\n        i22 = i21 + i17;\n        i23 = i22 + i18;\n        i24 = i23", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\t\tstr += s.ToString() + \"\\n\";\n\t\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tint i = 0;\n\t\t\tforeach", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               });\n            #endregion Lucian\n            #region Lulu\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lulu\",\n                    SpellName = \"LuluQ\",\n                    Slot = SpellSlot.", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(UUID.randomUUID().toString(), \"test.user\", \"test.password\"));\n\t}\n\tprotected void mockCodeListService() {\n\t\twhen(codeListService.findAll(any", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(\n            OSError,\n            lambda: subprocess.Popen(\n                ['/bin/ls', '/nonexisting'],\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE,\n                close_fds=", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tPropertiesService.Start(propertiesName);\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// The name of your application.\n\t\t/// This is used as default title for message boxes,\n\t\t/// default name for the configuration directory etc.\n\t\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\tinternal abstract bool CanBeNull {\n\t\t\tget;\n\t\t}\nNext line of code:\n\t\tinternal abstract bool CanBeEmpty {\n\t\t\tget;\n\t\t}\nNext line of code:\n\t\tinternal abstract bool CanBeDuplicate {\n", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.verticalLayout_2.setStretch(2, 1)\n        self.verticalLayout_2.setStretch(3, 1)\n\n        self.verticalLayout_2.setStretch(4, 1)\n\n        self.verticalLayout_2.", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               TextView textView = new TextView( getActivity() );\n                textView.setText( R.string.no_taf );\n                textView.setTextColor( getResources().getColor( R.color.white ) );\n                textView.setTextSize( 20 );\n                layout", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tint count = s.CreateQuery(\"select Id from Country\").List().Count;\n\t\t\t\tint expectedCount = 1;\n\t\t\t\tAssert.AreEqual(expectedCount, count, \"unexpected result\");\n\t\t\t\tint executedCount = s.", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiByteValue |= (uint)p[iBufferIndex + 1];\n                uiCRCITTSum = (ushort)(uiCRCITTSum & ~(0xFF)) | (ushort)(uiByteValue & 0xFF);\n            }\n            return", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn entityData.get(SentryMode.values()[getMode().ordinal()].getShootingSpeed());\n\t}\n\tpublic void setShootingSpeed(int speed) {\n\t\tentityData.set(SentryMode.values()[getMode().ord", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[0];\n        }\n        IHyperlinkDetector[] detectors = \n                new IHyperlinkDetector[controller.getHyperlinkDetectors().size()];\n        for (int i=0; i<detectors.", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "self.l.addWidget(self.drawingModeWidget)\nself.drawingModeWidget.setTitle('Drawing Mode')\nself.drawingModeWidget.setParameters(self.getParameters())\nself.drawingModeWidget.setSupportedModes(self.supportedModes)", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Target as InternalTarget ).Value;\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        Object convertedObj = selectConverter.convert(valueChoice);\n                        if (convertedObj.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tsb.append(\"\"+i+\"->\"+j+\"\\t\"+numStates+1+\"\\t\"+fractionWithAmount[i][j]+\"\\n\");\n\t\treturn sb.toString();\n\t}\n\t/*.................................................................................................................*/\n\t", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                           foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                                int", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t\tthrow new NotImplementedException ();\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskT {\nNext line of code:\n\t\t\t\tthrow new NotImplementedException ();\n\t\t}\n\t\t[MonoTODO", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final int groupId = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n        final int groupMode = 0700;\n        final int readMode = 0400;\n        final int writeMode = 0200;\n        final", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v - viewport.ToVector2 ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Vector2 viewport)\n\t\t{\n\t\t\treturn v - viewport;\n\t\t}\n\t\tpublic static Vector2 Rel", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "   return 'endpoint_key'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t    Console.WriteLine(\"dpslamServer/Send(\" + PortNumber.ToString() + \")/No data received\");\n\t\t\t}\n\t\t}\n        /// <summary>\n        /// send a status message to a connected client\n        /// </summary>\n        /// <", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           switch (type) {\n                case Step:\n                    break;\n                case Activity:\n                    break;\n            }\n            mRequestMap.remove(requestId);\n        }\n    }\n    @Override\n    public void onError(int requestId, Exception e)", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " for i in xrange(bind_count):\n    print '    A%d a%d' % (i, i)\nNext line of code:\n  for i in xrange(exec_count):\n    print '    Arg%d' % i\nNext line of code:", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   return HttpResponse(\n        json.dumps(\n            [\n                range_item_dict(item) for item in items\n            ]\n        ),\n        content_type='application/json'\n    )\n    \"\"\"\n    return HttpResponse(\n        json.dumps(", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(\"score\"), null/* c */,\n                        Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n        }\n        final ASTSearchOptimizer astOptimizer = new ASTSearchOpt", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "   return super(UserDetailView, self).post(request, *args, **kwargs)\n\n", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// A list of named byte sequences persisted with the assembly reference and used during execution, typically via .NET Framework helper classes.\n    /// </summary>\n    public IEnumerable<I", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           for (int i = 0; i < matrix.RowCount; i++)\n            {\n                for (int j = 0; j < matrix.ColumnCount; j++)\n                {\n                    r[j] = matrix[i, j];\n                }\n                d.", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn sortedNumbers[MathUtils.randomInt(left)];\n\t\t} else {\n\t\t\tApfloat leftMedian = sortedNumbers[left];\n\t\t\tApfloat rightMedian = sortedNumbers[right];\n\t\t\t\n\t\t\treturn new Apfloat[]", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "               A[focal[j], v] += 1\n                L[v] = edge.parent\n                v = parent[v]\n        A[focal[j], v] += 1\n        L[v] = edge.parent\n        v = parent[v]\n", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       self.assertEqual(mapping_json['mappings']['sortinghat']['properties'], csv_mapping.properties)\n        # self.assertEqual(mapping_json['mappings']['projects']['properties'], csv_mapping.properties)\n        self.assertEqual(mapping_json['mappings']['", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.LockTeam)\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\torderManager.IssueOrder(Order.Command(\"addbot \" + slot.Key", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString();\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t\tpublic static SmbException Parse(string error)\n\t\t{\n\t\t    if (error == null)\n\t\t\t{\n\t\t\t\t", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + struct.pack('!xH', pad_low, pad_high) + self.data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           foreach (var node in cluster.Nodes)\n                CheckClusterConsistency(node);\n        }\n        static void CheckClusterConsistency(Node node) {\n            if (node.DebugId == null)\n                node.DebugId = 0;\n            if (", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tif (m_maxSlopeRadians < 0.0)\n\t\tm_maxSlopeRadians = 0.0;\n}\nvoid btKinematicCharacterController::setWalkDirection (ref btVector3 walkDirection)\n{\n\tm", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       if (initializers.size() > 0) {\n            for (ExpressionTree init : initializers) {\n                if (canBeLeaked(init)) {\n                    checker.report(Result.failure(\"unique.leaked\"), init);\n                }\n            }\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null) nbttagcompound = new NBTTagCompound();\n\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\tif", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = new ClassItem(\n\t\t\t\t\t\tCommentXmlDocument,\n\t\t\t\t\t\tContext,\n\t\t\t\t\t\ttypeAttribute,\n\t\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (Form myForm = new Form()) {\n\t\t\t\tmyForm.Controls.Add(myTrackBar);\n\t\t\t\tmyTrackBar.Width = 200;\n\t\t\t\tmyTrackBar.Height = 250;\n\t\t", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(instrumentationApplier));\n\t\t\tassertThat(result, is(empty()));\n\t\t\t// not touching the write lock\n\t\t", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\treturn JimpleLocal.equals(this, other);\n\t\t\n\t\tif (this.dependsOnCutAP != other.dependsOnCutAP)\n\t\t\treturn false;\n\t\t\n\t\treturn this.isImplicit == other.isImplicit", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideLExtent[end][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\nNext line of code:\n            int max1 = wideRExtent[start][r.leftChild];\n            int max2", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "               ['rsync', '--archive', '--delete', '--remove-source-files',\n                 '--remove-destination-files', '--stats', '--progress',\n                 '--verbose', '--stats-interval=1',\n                 '--stats-format=%t", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.R", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a parameter with a color value.\n\t *\n\t * @param   name    Name of the parameter.", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat instanceof Contact ) {\n\t\t\tContact that = (Contact) proxyThat;\n\t\t\treturn (this.getId() == null ? that.getId() == null : this.getId().equals(that.getId()))\n\t\t\t\t\t&&", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\n", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       if cdata:\n            # This means we have a constant input\n            return\n    elif isinstance(node.op, AdvancedSubtensor1):\n        cdata = node.op.get_constant_idx(node.inputs, allow_partial=True,\n                                         only", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "\n    helpers = [SubmitCancelFormHelper(\n        label='Submit',\n        use_label_class=True,\n        success_url='%s/community/%s/community_profile/' % (\n            self.request.get_host(),\n            self.instance.slug\n", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "                   query = fn(*arg, **kw)\n        event_key = event_key.with_wrapper(wrap)\n        event_key.base_listen(**kw)\n        if retval:\n            return query\n    def before_execution(self, query, context):\n", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "           for show_tag in self.show_tag_list:\n                self.runtime.add_block_as_child_node(show_tag, xml_object)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "           for key, old_value, new_value in data_model_changes]\n        return global_changes\n    def _from_selection(self, raw_data, axes_names, vlabels, hlabels):\n        raise NotImplementedError()\n    def _to_selection", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\telse if (Class == null && type != null)\n\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not implemented:", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\tthis.objYLabel.Click += new System.EventHandler(this.objYLabel_Click);\n\t\t\tthis.objYLabel.MouseEnter += new System.EventHandler(this.objY", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       self.assertEqual(self.get(\"mail/syncmail.5\").branch, \"test\")\n        self.assertEqual(self.get(\"mail/syncmail.5\").who, \"warner\")\n        self.assertEqual(self.get(\"mail/syncmail.5\").", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new ArrayListValuedHashMap<>(1);\n        }\n        termData.add(row.get(ID_KEY), csvData.get(ID_KEY));\n        for (Map.Entry<String, String> entry :", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\t\treturn super.onWanded(player, wand);\n\t\t}\n\t@Override\n\tpublic void onWandDestroy(EntityPlayer player, ItemStack wand) {\nNext line of code:\n\t\t\treturn super.onWandDestroy(player, wand", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           }\n        }\n        return intrinsicCohesion;\n    }\n    private void birthCase3(ArrayList<Community> result, THashSet<Community> commonComs, Node n1, Node n2) {\n        ArrayList<Community> newCommunities", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "   for version in minfo['flags']:\n        for docformat in minfo['flags'][version]:\n            if minfo['flags'][version][docformat]:\n                are_equal = are_equal and (docformat in flags[version][docformat])\nNext line of code", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t\n\t\t}\n\t\tprivate void menuGetStatus_Click(object sender, System.EventArgs e)\n\t\t{\n\t\t\t//MessageBox.Show(\"Getting status\");\n\t\t\t//MessageBox.Show(computerMgmt.getComputer(", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date date : exceptionDates) {\n      exDateList.add(toDatable(date, event.getStartHour()));\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Returns a datable of", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.targetObject = DataSource;\n\t\tsourceEventBinding.targetEventName = SourceEventName;\n\t\tsourceEventBinding.bindEvent( MirrorSourceProperty );\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = game", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class,\n                    containerName, this);\n            Map<String, String> spanConfig = new HashMap<String, String>();\n            spanConfig.put(\"json\", jsonData);", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width.intValue(), height.intValue());\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCore = new CoreImages();\n\t\t}\n\t\tpublic final class CoreImages implements java", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n}\n\n", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "                   la = LinkAnnotation()\n                    la.subject = man_obj.uuid  # the subordinate is the subject\n                    la.subject_type = man_obj.item_type\n                    la.project_uuid = man_obj.project_uuid\n                    la.", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .shrinktofit = \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .mercells  = \")\n                .Append(StringUtil.ToHexString", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\tbyte[] greekToJis = JISConvert.Convert.greekToJis;\n\t\t\t\tbyte[] extraToJis = JISConvert.Convert.extraToJis;\n\t\t\t\tbyte[] cjkToJis = JISConvert.", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "   src1 = env.cst(off2.int(-1),10)\n    if   obj.mnemonic==\"LD_A\"  : dst = env.A[a]\n    elif obj.mnemonic==\"LD_D\"  : dst = env.E[", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.getInputStream(close);\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap map = new JRPropertiesMap(properties);\n\t\t\treturn map;\n\t\t}\n\t\t", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SPECTATOR game type\n         */\n        public boolean isSpectator()\n        {\n            return this == SPECTATOR;\n        }\n        public static", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tCommonSecurityDescriptor csd = new CommonSecurityDescriptor (false, false, ControlFlags.None, null, null, null, null);\n\t\t\tcsd.PurgeDefaultDacl ();\n\t\t}\n\t\t[Test]\n\t\tpublic void PurgeDefault", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "           for result_data in data.get(\"results\", []):\n                if \"status\" not in result_data:\n                    continue\n                if result_data[\"status\"] == \"ok\":\n                    for result in result_data.get(\"fingerprints\", []):\n                ", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       // get all RPCs in the project\n        List<string> rpcs = new List<string>();\n        AssetDatabase.BeginEdit();\n        try\n        {\n            rpcs = AssetDatabase.FindAssets(\"t:Rpc\", SearchAllAssetsFor", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       full_msg.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (SimpleFunctions.isOnline(getActivity())) {\n                    SimpleFunctions.getActivity().showDialog(getActivity(), R.string.", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           # Inverse of symmetry operator\n            op_inv = self.symmetry.op_inv[s]\n            # Transform wave function\n            psit_G = psit_G.dot(op_inv.dot(psit_G.conj()))\n            # Time", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygs", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach (ILNode child in block.GetSelfAndChildrenRecursive()) {\n\t\t\t\t\tif (child is ILLabel || child.IsUnconditionalControlFlow()) {\n\t\t\t\t\t\t// Remove the label\n\t\t\t\t\t\tif (", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    //TODO this is a little messy\n\t    if (delay > 0f) {\n\t\tInvoke(\"Ragdoll\", delay);\n\t    } else {\n\t", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def __init__(self, config={}):\n        super().__init__(config)\n        self.topo_dim = TopologyDim.polygon\n        self.region_dim = RegionDim.polygon\n        self.top = ClassFactory( [Polygon, Polygon]", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 3] = (byte)(num >> 24);\nNext line of code:\n        out[outOff + 2] = (byte)(num >> 16);\nNext line of code:\n        out[outOff + 1] = (byte", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new SimpleRegexValueGetter( objectVariables, this,\n                new FilterExpression[] {\n                    new FilterBinaryNode( new Predicate<Object>()\n                    {\n                        public boolean evaluate( Object object )\n                        {\n                            return true;", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   comments.append(value)\n        elif key == 'VALEUR':\n            slice_json['valeur'] = transform_values_holder_xml_json_to_json(value[0])\n        else:\n            slice_json[key] = value\n    if comments", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_ENABLE_FRAME)));\n            btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_DISABLE_FRAME)));\n            }\n       ", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "   print getIDList()\n", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n    {\n      for (int x = leftToRight ? 0 : p.getRasterWidth() - 1; \n        (leftTo", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "\t\t\t\t\tdb.update(Db.Table1.TABLE_NAME, null, \"ID_GROUP = \" + deleteId, null);\n\t\t\t\t\t//Delete budget items\n\t\t\t\t\tdb.delete(Db.Table4.TABLE_NAME, \"ID_", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               else\n                {\n                    Marshal.FreeCoTaskMem(m_ptr);\n                }\n                m_ptr = IntPtr.Zero;\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n        }\n        #end", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/'\n# How many seconds of inactivity before a user is considered inactive and logged out.\nINACTIVE_LOGIN_TIMEOUT = 900\n# The number of seconds to wait before logging out a user's session if the\n", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tforeach (var p in produceable.Values)\n\t\t\t\tp.Cancel(numberToCancel);\n\t\t\tforeach (var p in queue)\n\t\t\t\tp.Cancel(numberToCancel);\n\t\t\tforeach (var p in produceable.Values)", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "       infoText += \" file\" if numberOfFiles==1 else \"files\"\n        infoText += \"<br>\"\n        \n        if numberOfHiddenFiles>0:\n            infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n            infoText += \"file", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = code.replace('%', '%%')\n        # replace all vars by their values\n        code = re_m4.sub(r'%\\1' % self.vars, code)\n        self.outputs[0].write(code)\n    def get_hook", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer:\")\n        return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx + reactorExtent ] + chemical[ 0 ][ idx + reactorExtent - 1 ]\nNext line of code:\n\t\t\t\t\t\t\t\t\t, dt, hdiv", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n            default:\n                columnTypes.add(typeManager.nextCharSequenceAdapter(pattern));\n                break;\n        }\n    }\n   ", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\treturn qs.ReceberAutoIncremento(\"obj_id\", entity.obj_id);\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Recebe o valor do auto incremento e coloca na propriedade \n\t\t/// </summary", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object ReturnClass(Type[] types)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic bool IsMutable\n\t\t{\n\t\t\tget {", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "   self.ntp_auth_conf['authentication-keyid'] = self.ntp_auth_conf['authentication-keyid']\n    if self.ntp_auth_conf['authentication-keyid'] == 'None':\n        self.ntp_auth_conf['authentication-", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.store.update_item(component, editing_user)\n        # Verify that all nodes were last edited by editing_user\n        for block in [component, child, sibling]:\n            check_node(block.location, editing_user, after_create, editing_user", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        addToCharBuff(ch, start, length);\n        updateWithCharBuf();\n    }\n    public void ignorableWhitespace(char[] ch, int start, int length) throws", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict['lower'], dict['upper'])\ndef mkcomparison(dict):\nNext line of code:\n    return aetypes.Comparison(dict['operator'], dict['first'], dict['second'])\ndef mklogical(dict):\nNext line of", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           Type type;\n            var sample = GetActionSample(controllerName, actionName, parameterNames, type, formatters, sampleDirection);\n            if (sample != null)\n            {\n                return sample.GetType();\n            }\n            return null;\n        }\n        /// <", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "               value = entry.get_active_text()\nNext line of code:\n                entry.handler_block(entry.editing_done_id)\nNext line of code:\n                def callback():\n                    entry.handler_unblock(entry.editing_done_id)", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n}", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           f.readlines()\n        except IOError:\n            pass\n    if f:\n        f.close()\n    try:\n        ht = HtpasswdFile(path, autoload=False, default=crypt_scheme)\n    except IOError:\n", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.IUnknown)] object pToken,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       try {\n            var spm = Principals.getCurrentSecurablePrincipal();\n            var principal = (SecurablePrincipal) spm;\n            var aclKey = principal.getId();\n            var role = (Role) spm.getSecurablePrincipal( a", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       children = element.findall('.'\n        for child in children:\n            if not self.verify_element(child):\n                return False\n        return True\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   clone.ownerDocument = newOwnerDocument\n    clone.parentNode = None\n    for child in node.childNodes:\n        c = _clone_node(child, deep, newOwnerDocument)\n        clone.appendChild(c)\n    return clone\ndef _get_containing_", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(expectedType, endOffset)) {\n\t\t\t\tdecodeName(keyLocator.getKeyName(), new int[1], new int[1], decoder);\n\t\t\t\tkeyLocator.setType(KeyLocatorType", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's Weapons\n        for", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        GameEngine.model().getGame().join( action );\n        hide();\n      }\n    } );\n    m_panel.add( m_btnOk );\n    // add the panel\n    setWidget( m_panel );\n  }", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(r.data.decode(\"utf-8\"))\n    log.debug(\"Received response for %s\", url)\n    log.debug(\"Status: %d\", r.status)\n    log.debug(\"Content-Type: %s\", r.headers.get(\"content", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\t\t});\n\t\t\t\tif (response == null)\n\t\t\t\t{\n\t\t\t\t\tfail", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   \"\"\"\n    weight = [met.weight * coeff for met, coeff in reaction.metabolites.items()]\n    \"\"\"\n    if len(reaction.metabolites) > 1:\n        raise ValueError(\n            \"Cannot compute weight for reactions with multiple", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return self.get_queryset(pootle_path=pootle_path, user=user).filter(\n            submitted_by=user,\n            store__isnull=False,\n            store__translations__isnull=True,\n        )\n    def get", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='StateMap',\n            fields=[\n                ('id', models", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "   def __init__(self, *args, **kwargs):\n    def _output_packet_physical(self, packet, port_num):\n        self.forward(packet, port_num)\n        # print packet\n    def set_output_packet_callback(self", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (item == null)\n      return;\n    if (item instanceof File)\n      ((File) item).deleteOnExit();\n    m_RecentItems.add(item);\n    writeProps();\n    if (m_Listeners != null)\n      notifyRecent", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.Controlled)\n                return true;\n            if (target.Controlled)\n                return true;\n            // No AoE\n            if (target.AoEAttack == null || target.AoEAttack.IsFizzled || !target.", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       return new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n\nError:\nThe method getHalfTradePeriodDate() is undefined for the type Trade\n\nError:\nThe method getMaxTradePeriodDate", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\ta = a == null ? LeadingAny(p.down) : a;\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic int LeadingAny(Node p, BitArray mark) {\n\t\twhile (p != null && !mark[p", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)(address & 0x000000ff);\n\t\t\tWriteReport(buff);\n\t\t\treturn mReadBuff;\n\t\t}\n\t\t/// <summary>\n\t\t/// Write data to the Wiim", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tMsk", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           for (k++; i < N1 + N2 + N3; i++, k += 3)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (k++; i < N1 + N2 + N3", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       rate.create(on_no_match=rate.copy)\n        rate.delete(on_no_match=rate.copy)\n        rate.update(on_no_match=rate.copy)\n        rate.delete(on_no_match=rate.copy)\n", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, shadowBuffer.Data, length );\n\t\t\t\tshadowBuffer.Unlock", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.session.open(PluginDescriptor, where = self.satfinder_scan_nims, \n\t\t\tres_mgr = self.session.nav.getCurrentService()._session,\n\t\tscreen = self, onepage = True, list = satfind", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                TcpAddress.TcpAddressMask mask = new TcpAddress.TcpAddressMask(filterStr);\n                tcpAcceptFilters.add(mask);\n            }\n            return;\n        case ZMQ.ZMQ_DELAY_ON_CLOSE:", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               fout.Write(curr, 0, bytesPerRow);\n                prior = curr;\n                int[] pos = new int[2];\n                pos[0] = dataStream.Position;\n                dataStream.Seek(0, SeekOrigin.Begin);\n                try {", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface('org.freedesktop.DBus.Properties'))\n", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "   if self.options.get_case() == \"Classical\":\n        print(\"classical\")\n        print(self.make_product_structure())\n    else:\n        print(\"real\")\n        print(self.make_product_structure())\n\n\n\n\n\n\n\n", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "               \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n                \"nosuchfield: 123\");\n                \"nosuch", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void clear() {\n\t\tinitialize( true );\n\t\tmap.clear();\n\t}\n\t@Override\n\tpublic boolean add(Object key", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member buying an item\n\t\t/// </summary>\n\t\t/// <", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return modified_attendance.action_message\n        # if self.user_id:\n        #     return {'warning': _('You must be logged in to change attendances')}\n        # return modified_attendance.action_message\n        # return modified_attendance.action_", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow row = form.grdResults().getRows().newRow();\n\t\trow.setRowIndex(form.grdResults().getRows().size());\n\t\tgrdResultsRowCollection rows = form.grdResults().getRows();\n\t\tfor(", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               return new Point(pt.x, pt.y);\n            }\n        }\n    }\n    /// <summary>\n    /// A column of a list view.\n    /// </summary>\n    public class SystemListViewColumn\n    {\n        readonly string title;\n        readonly uint", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       maker.new(self, cwd, profile, debugtab=debugtab)\n        return maker.new(self, cwd, profile, debugtab=debugtab)\n    def do_unmap(self):\n        \"\"\"Unmap the window\"\"\"\n        self.termin", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( \"_\"+Guid.NewGuid().ToString( \"N\" ), managedType, marshalAttribute, arraySize ) );\n                    continue;\n                }\n                Type managedType = GetManagedType( nametypeFragments[0", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t\t}\n\t\t}\n\t\tpublic bool IsGenericParameter {\n\t\t\tget { return base_type != null && base_type.IsTypeOf", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n    }\n}\n", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       super(PyOpenSSLContext, self).__init__(protocol)\n        self._protocol = protocol\n    def set_verify(self, certificate_reqs, ca_certs):\n        # Platform-specific: Python 3\n        if self._protocol < 2:\n            return", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label8 = new global::Gtk.Label ();\n\t\t\tthis.label8.Name = \"label8\";\n\t\t\tthis.label8.Xalign = 0.0F;\n\t\t\tthis.label8.LabelProp = global::M", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "               headbook.set_tab_reorderable(True)\n                headbook.set_tab_reordered(headbook.get_current_page(), new_num)\n    \n    def getTabNumber (notebook):\n        return notebook.get_current_page()\n", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Split-horizontally\": QKeySequence(Qt.CTRL + Qt.Key_L),\n    \"Split-vertically\": Q", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn ClassUtils.toString(this);\n\t}\n}", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n  }\n  protected boolean isFileModified()\n  {\nNext line of code:\n    return false;\n  }\n  protected boolean isFileDirty()\n  {\nNext line of code:\n    return false;\n  }\n  protected boolean is", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(97, 0);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(82, ", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       return sb.toString();\n    }\n}", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC4231_TC2_Legacy ()\n\t\t", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    current_align += 4 + CDRSerializer.alignment(current_align, 4); // intVal\n\t    \nNext line of code:\n\t    current_align += 4 + CDRSerializer.alignment(current_align, 4); // stringVal\n\t", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "     return null;\n      else\n        return java.GetValue(\"JavaHome\") as string;\n    }\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {\n      String jdk = FindJdkInRegistry(HKEY_JDK);\n", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               comment = l\n                break\n        else:\n            return None\n        # attempt to find job by job name\n        for l in self.lines:\n            if re.match(r'^%s' % self.ansible, l):\n                continue\n            elif re.match", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# Nikita Akimov\n# interplanety@interplanety.org\n#\n# GitHub\n#   https://github.com/Korchy/BIS\n# Mesh Modifiers\n# -------------------------------------------------\n# old - remove after recreating meshes through import\n# -", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           for(int i = 0; i < totalBuckets; ++i)\n            {\n                double bucketRank = mScoreRankBuckets.get(i);\n                if(bucketRank < minLikelihood)\n                    continue;\n                if(bucket", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (var neighbor : vertex.neighbors()) {\n            neighbors.add(neighbor);\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.stream().filter(n -> n == 1).count());\n", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   print(self.grn+\"[*] Selected packet is \"+self.choice+\" \"+self.blk)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.SelectedIndexChanged += new System.EventHandler(this.rptComboBox_SelectedIndexChanged);\n            this.rptComboBox.Location = new System.Drawing.Point(91, 165);\n            this.rptComboBox.Name = \"r", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               // If this type doesn't exist, then we should not add it.\n                return false;\n            }\n        }\n        return false;\n    }\n    private void initialize() {\n        processedComplexTypes.clear();\n        processedSimpleTypes.clear();\n        processedElements", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       return self.write(cr, uid, ids, {'state': 'validate', 'manager_id': False})\n    def holidays_cancel(self, cr, uid, ids, context=None):\n        self.write(cr, uid, ids, {'state':", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets and sets the currently selected business object in the grid\n        /// </summary>\n        public IBusinessObject SelectedBusinessObject { get; set; }\n        /// <summary>\n", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return String.Format(\"Mixer Line {0} - {1} - {2} - {3}\", mixerLine.dwLineID, mixerLine.dwDestination, mixerLine.dwSource, mixerLine.dwComponentType);\n        }\n    }\n}", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = domainFactory.getDomainObject(valueObject.getCareContext().getClass(), valueObject.getCareContext().getID_CareContext());\n\t\t}\n\t\tims.core.admin.domain.objects.CareContext value10 =", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           [\"cargo\", \"build\", \"--\", \"--features\", \"%s\" % ' '.join(features), \"--\", \"--release\", \"-v\"],\n            env=env, verbose=verbose)\n        if status:\n            return status\n        elapsed = time() - build", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tif (counts[0] == 0) {\n\t\t\t\treturn this.getScore(new double[] { p, 0 }, true);\n\t\t\t} else if (counts[1] == ", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               var indexItems = gitItemStatuses.Where(item => item.Staged == StagedStatus.Index).ToList();\n                var workTreeItems = gitItemStatuses.Where(item => item.Staged != StagedStatus.Index).ToList();\n                Stashed.SetStash", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm1_index).out_address != 0\n\nAssertionError:\nExpected 0 to be 0\nExpected 1 to be 1\nExpected 2 to be 2\n\n\"\"\"\n\n\ndef test", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (o == this) {\n            return true;\n        }\nNext line of code:\n        if (!(o instanceof AuthScope)) {\n            return false;\n        }\nNext line of code:\n        final AuthScope scope = (AuthScope)o;\n        return (", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        object IAsyncResult.EndInvoke(IAsyncResult asyncResult) {\n            object[] results = ((AddNumbersSoapForm)(asyncResult.AsyncState))).results;\n            return results[0];\n        }\n        public", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \", \";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \nNext line of code:\n\t\t\t\t\tE", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "   log.msg('cryptostasis', 'args: {}'.format(str(args)))\n    log.msg('cryptostasis', 'args.index_file: {}'.format(str(args.index_file)))\n    log.msg('cryptostasis', 'args", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.bit_ss, self.bit_es = self.miso_bits[7][1], self.miso_bits[0][2]\n        # This packet is guaranteed to be a 'DATA' packet.\n        self.putx([65, ['R1:", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "         if (cursor >= limit) {\n            break lab1;\n          }\n          cursor++;\n          break;\n        } while (false);\n        limit_backward = v_3;\n        // delete, line 200\n        slice_del();\n        break;\n", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               if (null == cls) {\n                    System.out.println(\"Unknown fingerprint \"+fingerprint);\n                    return;\n                }\n                if (cd.viewer == null)\n                    createViewer(cd);\n                cd.last = cd.viewer", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "               ]\n                return result, extension.critical\n    def _get_key_usage(self):\n        result = None\n        try:\n            ext = self.cert.extensions.get_extension_for_oid(x509.KeyUsage)\n            result = ext.", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tfor (%sSlots::iterator i = s.begin(); i != s.end(); ++i) {\" % typename, file=f)\n    print(\"\\t\\t\\t\\tif (&(*i) == &slot) {\" % typename, file", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   first_word = utf16_to_unicode(X.begin, X.begin + 1)\n    second_word = utf16_to_unicode(X.begin + 1, X.end - 1)\n    # The following must hold\n    assert", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tif (StartOf(12)) {\n\t\t\t\tGet();\n\t\t\t} else {\n\t\t\t\tGet();\n\t\t\t\tSemErr(\"bad string in attributes\");\n\t\t\t}\n\t\t}\n\t}\n\tvoid SemText(", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc['product_id'] = line.product_id.id\nNext line of code:\n            edi_doc['product_uom'] = line.product_uom.id\nNext line of code:\n            edi_doc['product_qty'] =", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "       Hashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS+\"-ssl\");\n\t\treturn new ServiceDescription(\"_openhab-server-ssl._tcp.local", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<>();\n                nameMap.put(name,\n                          permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testHasPermission_nonVirtualPath() throws Exception\n   ", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))\n        for device in devices:\n            assert device.subsystem == 'input'\n            assert device.asbool('ID_INPUT_MOUSE')\n            assert device.sys_", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   app = Device(deviceToken)\n    app = app.login(loginId, password)\n    app = app.mainmenu()\n    app = app.endTutorial()\n    app = app.cardUpdate()\n    app = app.cardCategoryUpdate()\n    app = app", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "   if (index_elements[0] == \"FIT\"):\n        rv['mode'] = index_elements[1]\n        rv['stokes'] = index_elements[2]\n    if (index_elements[0] == \"ALPHA\"):\n        r", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           int index = 0;\n            foreach (Key key in m_Keys)\n            {\n                index++;\n                if (index >= MaxKeys)\n                    break;\n                key.ItemID = 0x1011 + index;\n            }\n        }\n   ", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (String device : devices) {\n            // DRS 20190422 - Added 'for' loop - if there are valid captures, then wait, try again, and set liveDevice.\n            Tuner tuner = new TunerHdhr(device,", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\nNext line of code:\n    if (lastSeenVersion < Version.DAY_BY_DAY_", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length != 4) {\n        throw new IllegalArgumentException(\"Invalid RegexNER line in file \" + mapping.getLineNumber() + \":\" + line);\n      }\n      String regex = split[0];\n      String type = split[1];\n      Set", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "       if SCons.Util.is_List(sub_path) and len(sub_path) > 0:\n            sub_path = sub_path[0]\n        # If we don't find it using the path, try using the current directory\n        try:\n            n", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   def __init__(self, *args, **kwargs):\n        self.input_plugins = inputpluginspath(**kwargs)\n        self.fonts = fontscollectionpath(**kwargs)\n        self.output_dir = kwargs.pop('output_dir', None)\n        if", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "   def from_dict(self, result):\n        for k, v in result.items():\n            if k not in self:\n                self.update({k: v})\n    def to_dict(self):\n        result = {}\n        for k, v in self.items():", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   def fill(self, values):\n        \"\"\"\n        Args:\n            values (list): [] to remove all vars or [(\"var\", \"value\", \"type\"), ...] to fill the view\n        \"\"\"\n        if self.add_button.is_displayed:\n            self", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(getClass().toString() + \", getActionObject(), \"\n                    + \"action object not found for class \" + className + \".\", null);\n        }\n        return result;\n    }\n}\n\n", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           {\"thread_id\": \"dummy\", \"body\": \"foo\", \"course_id\": unicode(self.course.id)},\n            {\"title\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           return 1\n        else:\n            raise SCons.Errors.UserError(\"Manifest %s does not exist\" % manifestSrc)\n    else:\n        return 0\ndef embedManifestExeCheck(target, source, env):\n    \"\"\"Function run by embedMan", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           execute(getSelection(), new SubProgressMonitor(new ProgressMonitorDialog(shell, getOperationMessage(),\n                    getProblemsMessage()), 1000));\n        } catch (CoreException e) {\n            errorStatus[0] = e.getStatus();\n        }", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\treturn getInputRowMeta().addString(data.fieldnrs[0], meta.getFieldName()[0], meta.getAggregateType()[0], \"\"); //$NON-NLS-1$ //$NON-NLS-2$\n\t}", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   assert f('+5..', last) == (d(2014,1,30, 22,21), now)\n    assert f('-5..', last) == (d(2014,1,31, 19,47", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            //MinDelay\n            string smintimea = smintime;\n            if (smintimea.Contains(\"s\") || smint", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\"Guest system log is dead. Resume failed\")\n    def resume_guest(self, **args):\n       ", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       rc.get(100, TimeUnit.MILLISECONDS);\n        final Future<Boolean> pubrc = service.submit(pub);\nNext line of code:\n        pubrc.get(100, TimeUnit.MILLISECONDS);\n", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().onSend", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\t\treturn (uint)CompressUInt32(value);\n\t\t\t}\n\t\tstatic uint CompressUInt32(uint value) {\n\t\t\tif (value <= 0x7F)\n\t\t\t\treturn (uint)value;\n", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.execute_file([one_file], app='archive', flags=au_flags)\n        self.fm.notify(descr, bad=True)\n        self.fm.ui.console.ask(\"Press enter to continue...\",\n                self.fm.ui.", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t\t[ExpectedException (typeof (ArgumentException))]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       repo = self._setup(da, Action.ACCEPTED, Action.REJECTED)\n        self.assertEqual(repo.changesets.count(), 2)\n        avs = AppVersion.objects.all()\n        flagdata = flags4appversions(avs)", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "               userstate.texture = cmd.parameters[\"texture\"]\n            if \"channel\" in cmd.parameters:\n                userstate.channel_id = cmd.parameters[\"channel\"]\n            self.Log.debug(\"Executing userstate\")\n            self.send_message(PYMUM", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       }\n    }\n    public static void changeLeader(PlayerGroup group, Player newLeader) {\n        Preconditions.checkNotNull(group, \"Group should not be null\");\n        Preconditions.checkNotNull(newLeader, \"New leader should", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "       if len(self.cols) == 0:\n            return (Token.Literal, \" \".join(self.toks))\n        if len(self.cols) == 1:\n            return (Token.Literal, self.cols[0][0], self.cols[", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column, tree_model, tree_iter = self._setup_column(1, False)\n\n    def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\n        column, tree_model", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    parent.doStartTag();\n\t} while (parent != null);\n\treturn EVAL_PAGE;\n    }\n}", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                Dialog = new DialogEntry();\n                for (int i = 0; i < nl.Count; i++) {\n                    XmlNode n = nl[i];\n                    string[] lines = n.", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\telse if ( m_Peerless == PeerlessList.InterredGrizzle )\n\t\t\t\t\t\tm_key[i] = new InterredGrizzleActivation();\n\t\t\t\t\telse if ( m_Peerless", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i]);\n\t\t}\n\t\treturn coll;\n\t}\n\t\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           new Version(1, new ECBlocks(1, new ECB(1, 11))),\nNext line of code:\n            new Version(2, new ECBlocks(2, new ECB(2, 11))),\nNext line of code:\n            new", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tArgon2Kdf kdf = new Argon2Kdf();\n\t\t\tkdf.Randomize(p);\n\t\t\tbyte[] pb = kdf.Hash(pbMsg);\n\t\t\tif(!MemUtil.ArraysEqual(pb, pb", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\tint mana = (int) (requestManaExact(stack, player, cost, remove) / multiplier);\n\t\tif(remove)\n\t\t\treturn mana > 0;\n\t\telse\n\t\t\treturn mana >= cost;\n\t}\n", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\"but Lights.LightCount is {1})\",\n\t\t\t\t\tNextFrame.PixelCount,\n\t\t\t\t\tLights.PixelCount));\n\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t}\n\t\t/// <summary>", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\nNext line of code:\n        if", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.cause = p.readInt();\n            dc.number = p.readString();\n            dc.number.setData(p.readString());\n            dc.number.setData(p.readString());\n            dc.number.setData(", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isApplication()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n        {\n                newVertices[x + y * xSizeP] = newVertices[x + (ySizeP - 1) * xSizeP] = leftBottomCorner;\n                newVert", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\n\t\t\t\n\t\t\tif (testInt1 == 0)\n\t\t\t{\n\t\t\t\t// Test that the server is running\n\t\t\t\tObject[] rawResult1 = client", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\nNext line of code:\n\t\t\t\treturn new int[0];\n\t\t\t}\n", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(name);\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeObject(found);\n        }\n        out.flush();\n        out.close();\n        in.close();\n", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                       16 + (~stactics_display_buffer.read(i) & 0x0f),\n                        16,\n                        0, 0,\n                        pixel_x, pixel_y,\n                        Machine.visible_area, TRANSPAR", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                       .IsValid()\n                                        .IsValidTarget(\n                                            spell.Range + spell.Width, true,\n                                            spell.RangeCheckFrom))\n                                {\n                                    result.Add(target);\n                                }\n                                break;\n", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       return graph.existsInducingPathInto(x, y);\n\n        List<Node> allNodes = graph.getNodes();\n        List<Node> measured = new ArrayList<>();\n        for (Node node : allNodes) {\n            if (node.getNodeType() ==", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   if (pop[i].Name == Name)\n                        return pop[i] as Drawable;\n                }\n                plcs.Push(pop.Parent);\n            }\n            return null;\n        }\n        /// <summary>\n        /// Initializes the element.\n", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       return (this.getFileId().equals(other.getFileId()))\n        && (this.getPersonFinIntDisclosureId().equals(other.getPersonFinIntDisclosureId()))\n        && (this.getUpdateUserFullName().equals(other.getUpdateUserFullName", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (m_Item.From == null || m_Item.From.Deleted || m_Item.From.Map == null || mobiles[i] == m_Item.From)\n                            continue;\n                        if (m_Item.From.InRange(m_", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(user, msg);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Kick(PlayerMobile user, bool message = true)\n\t\t{\n\t\t\tif (IsUser(user))\n\t\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": " return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n\n    return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public List<ComponentInstLight> getComponentInstLights(", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    ZipFilesDialog zipFilesDialog = new ZipFilesDialog();\n                    zipFilesDialog.setFiles(files);\n                    zipFilesDialog", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "       this.channel.close();\n        // Spigot Start // PAIL\n        if (this.channel != null) {\n            this.channel.close();\n            this.channel = null;\n        }\n        this.channel = null;\n        this.channelInactive();\n", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "           z_arr[p_index, z_key] = z_dict[z_key][per]\n            z_err_arr[p_index, z_key] = t_dict[t_index[z_key]][per]\n            \n            for t_key", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    } else {\n      String name;\n      if (recipients.size() == 2) {\n        name = context.getString(resourceTwo, recipients.get(0).toShortString(), recipients.get(1", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = \":\".join(extra_path)\nNext line of code:\n            env[\"LD_LIBRARY_PATH\"] = \":\".join(extra_lib)\nNext line of code:\n        if gonk:\n            env[\"GONK_HOME\"] =", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, test_cls in iteritems(type_paths):\n                if not path.startswith(os.path.sep):\n                    raise ManifestError\n                source_file = getattr(source_files, test_cls.__name__)\n                source_file.update", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compiledScript != null) {\n            compiledScript.destroy();\n        }\n    }\n    private void handleScriptRuntimeException(Throwable throwable, PrintStream outStream, IFreeplaneScriptErrorHandler errorHandler) {\n        if (throwable instanceof ExecuteScriptException)", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "\nfrom deepchem.data import Dataset\n\ndataset = Dataset.load(os.path.join(data_dir, 'data_transformed.npz'))\ntransformers = [AtomicNormalizationTransformer(dataset)]\ntransformed_dataset = dataset.transform(transformers,", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif(caseInsensitive);\n\n\t\tint lastToCompare = 0;\n\t\timc.cvp.vo.ImsCloneableVoBeanCloneImpl voBeanClone = (imc.cvp.vo.ImsCloneableV", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.size(), 2);\nNext line of code:\n        assertEquals(found.get(0).getId(), stacks[0].getId());\nNext line of code:\n        assertEquals(found.get(0).getTags(), asList(\"search-", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       crawlParameters.add(new ParameterImpl(\n                pf,\n                \"depth\",\n                depth,\n                ParameterType.INT,\n                ParameterDataType.TEXT,\n                ParameterDataType.TEXT,\n                ParameterDataType.TEXT,\n                \"number of depth level\",", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tif (kind == LNodeKind.Block) {\n\t\t\t\tvar block = (LNode)candidate;\n\t\t\t\treturn block.MatchesPattern(pattern, ref captures, out unmatchedAttrs);\n\t\t\t}\n\t\t\t", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   var extendedFarmLocation = q.GetExtendedFarmLocation(\n                        shadow.Position.To2D(),\n                        colisionList,\n                        q.Range);\n                    extendedWillHit++;\n                }\n                if (extendedWillHit >= q", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.addControl(factory.getControlReference(ContextMenus.class, Incorrect.class, false));\n\t\tsuper.addControl(factory.getControlReference(ContextMenus.class, Select.class, false));\n\t\tsuper.addControl(factory.getControl", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   return pattern in frozen_output\n\n\ndef pip_install_requirements(requirements_file):\n    \"\"\"\n    Install the packages specified in `requirements_file`.\n    This function will fail if the version of Python that is currently\n    installed is not the same as the version", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'subs': [(4, 0, self.env['test_testing_utilities.m2o'].create({'name': 'a'}))],\n        })\n        with Form(r) as f:\n            with f.subs.edit(index=0) as", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x*x, (x, 1, 2)) == Sum(x*x, (x, 2, 1))\n    assert Sum(x*x, (x, 1, 2)) == Sum(x*x, (x, 2,", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\t\tUnityEngine.WWW a1;\n\t\t\t\tUnityEngine.WWW.UnEscapeURL(a1);\n\t\t\t\tpushValue(l,true);\n\t\t\t\treturn 1;\n\t\t}\n\t\tcatch", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this._notifyAction = NotifyCollectionChangedAction.Add;\n                this._newItemList = (changedItems == null) ? null : ArrayList.ReadOnly(changedItems);\n                this._newStartingIndex = startingIndex;\n            }\n            else\n            {\nNext line of", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           streamWriter.close();\n            int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            StringWriter writer = new StringWriter();\n            XMLOutputFactory factory = XMLOutputFactory.newInstance();\n            factory.setProperty(factory.IS", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                case Param.CampusType:\n                    c.CampusType = Token2Csv();\n                    break;\n                case Param.CampusCode:\n                    c.C", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"Width: {0}\", ide.width);\nConsole.WriteLine (\"Height: {0}\", ide.height);\nConsole.WriteLine (\"Color Count: {0}\", ide.colorCount);\nConsole.WriteLine (\"Reserved: {0}\", ide.reserved);\nConsole.WriteLine (\"", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               l.successor = JSR;\n            }\n            for (int i = 0; i < l.srcAndRefPositions.length; ++i) {\n                if (l.srcAndRefPositions[i] != 0) {\n                    if (l.", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            var result_of_this_method = ((System.String)typeof(System.String)).op_ImplicitConversion(ILIntepreter.CastToObject(ptr_", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tswitch(position) {\n\t\t\tcase INSIDE:\n\t\t\t\tcomboLabelPosition.select(0);\n\t\t\t\tbreak;\n\t\t\tcase OUTSIDE:\n\t\t\t\tcomboLabelPosition.select(1);\n\t\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self.assertEqual( int(currImageValue), int(lastImage", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       self.kexgss.ssh_check_mic(mic_token, self.transport._K_H)\n        self.transport._log(DEBUG, 'Got server kex \"f\" (%d bits)' % self.f)  # noqa\n        self.transport", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           if (connectionData != null) {\n                tree.remove(tree.getRoot());\n                DatabaseNode databaseNode =\n                        new DatabaseNode(this.handler, connectionData, disableTreeSelection, true, false);\n                tree.add(databaseNode, overallNodeName);\n               ", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                          (self.employee_id, from_date, to_date, code))\n                res = self.cr.fetchone()[0]\n                return res or 0.0\n        class PayslipLines(BrowsableObject):\n\"\"\"            \"\"\"a class that will be", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       mf.append(cosmo.halo_mass_func(zarr, Ns, omega_b0, omega_m0, cosmo_h, frac=0.1) * 10**3) #OK\n        dlnmdlnm.append", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       if (font != null) {\n            d.width = font.getSize();\n            d.height = font.getSize();\n        }\n        return d;\n    }\n    \n    @Override\n    public void setFont(Font font) {\n        super.setFont", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       #consider the steric constrain, flag 'cross_center' (the center point is on the connection line of anchors)\n        #is less favorable\n        self.share_edge(flag='cross_center')\n        self.print_xyz(file=print_path)", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.ShowDialog();\n\t\t}\n\t}\n}\n", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "               for n in xrange(params[0]['nbins'])]\n            if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                    / float(params[1]['nbins'])\n                params[", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           contact.setLastMessageTransmitted(query.getAllMessagesCount());\n            protocol.getXmpp().getStorage().updateLastMessageTransmitted(contact);\n            RosterHelper.notifyItemChanged(contact.getUserId(), RosterStorage.TYPE_LAST_ME", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", rgb2I)\nNext line of code:\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\twhile (tag.selectByName(DFN_PXX).isOkey()) {\n\t\t\t\tret.add(tag.readRecord(sfi));\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected abstract void configApplication", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "           return self.createDescription()\nclass Header(FieldSet):\n    TAG_INFO = {\n        0: (\"header\", \"Archiver header\", markerFlags, markerHeader, None),\n        1: (\"header\", \"Header\", None, None, None),\n        2: (\"header", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tsupport.firePropertyChange(CONNECTED, old, connected);\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "   server = wsgi.Server(addr, PathInfoDispatcher(apps), numthreads=10)\n", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(chance) == 0)\n            {\n                res = EnhanceResult.Success;\n            }\n            else\n            {\n                res = EnhanceResult.Failure;\n            }\n        }\n    }\n}\n", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           if not displayname:\n                displayname = entry_name\n            if not desc:\n                desc = displayname\n            if not entry_name:\n                entry_name = entry_value\n            if not entry_value:\n                entry_value = entry_name\n            entries[", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"Fatal Error:\\nUnable to locate a valid FOG Service!\", \"FOG Service Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                    this.Close();\n                }\n            }\n            else\n            {\nNext line", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\nNext line of code:\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n       ", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               for(int i = 0, vi = 0, ci = 0, ti = 0; i < this.trianglesUsed[textureHash]; i++)\n                {\n                    if(this.trianglePoint == -1)\n                        throw new IllegalStateException", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   response['Access-Control-Expose-Headers'] = exposedHeaders + ',{0}'.format(header)\n    return response\ndef crum_middleware(get_response):\n    \"\"\"\n    This decorator is used as a middleware. It sets the current request for crum", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver driver = idlePool.Dequeue();\n                    if (driver.ConnectionLifetimeExpired())\n                        oldDrivers.Add(driver);\n                }\n            }\n            return oldDrivers;\n        }\n        public void ClearIdleConnections(", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "       var = [var]\n    return var\ndef _extrapolate_shape(shape, area_extent, resolution, upper_left_extent, center, crs, p, inverse):\n    \"\"\"Extrapolate shape and area_extent from the information provided.\n    Ar", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nQUEST.addKillId(WK_ROMP)\nQUEST.addFirstTalkId(WK_ROMP)\nQUEST.addFirstKillId", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? nullable1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor(((double)nullable1.Value - (double)num * 60) / 60);\n\t\t\t\t\tdouble?", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           _attributes = new List<AttributeInfo>();\nNext line of code:\n            _textures = new Dictionary<String, TextureInfo>();\nNext line of code:\n            _uniforms = new Dictionary<String, int>();\n            Attributes = new AttributeCollection(this);\n            Start", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       for rxn in self.reactions:\n            rxn._model = self\n        self.reactions._generate_index()\n        self.metabolites._generate_index()\n        self.genes._generate_index()\n    def copy(self, deepcopy_", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor (Object bean : beans)\n\t\t\tcoll.add((TumourGroupListVo)bean);\n\t\treturn coll;\n\t}\n}\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tif(current.x>lines[i].x){\n\t\t\t\t\tcurrent.width = (current.x+current.width)-lines[i].x;\n\t\t\t\t\tcurrent.x = lines[i].x;\n\t\t\t\t}\n", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       mListView.setLayoutAnimation(set);\n    }\n\t\n\t/**\n\t * Set the list loading animation.\n\t */\n    private void setAnimation() {\n    \tAnimationSet set = new AnimationSet(true);\n        Animation animation = new AlphaAnimation(0", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.RowNumber > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.RowNumber;\n                }\n            }\n            ARow.RowNumber = (HighestNumber + 1);\n            ARow.Interest", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tthis.predict(pssm, i, protein.getStructure());\n\t\t}\n\t\t\n\t\tthis.output(pssm, scoresSol);\n\t}\n", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
