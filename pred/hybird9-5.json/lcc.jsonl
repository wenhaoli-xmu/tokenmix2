{"pred": "\t\t\t\tParticipant pl = (Participant)m_Participants[i];\n\t\t\t\tif ( pl != null )\n\t\t\t\t{\n\t\t\t\t\tpl.CloseGump( types, defs );\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "```\n        a = Sndfile(ofilename, 'rw')\n        a.write_frames(np.random.random((1000, 1000)))\n        a.seek(0)\n        a.write_frames(np.random.random((1", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob.", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "```\n            for (X509Certificate cert : chain) {\n                s.println(\"  \" + cert.getSubject().getName());\n                s.println(\"  \" + cert.getIssuer().getName());\n                s.println(\"  \" + cert.getSerialNumber());", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "```\n        sp = new JESpace (name, path);\n        spaceRegistrar.put (name, sp);\n        return sp;\n    }\n    public synchronized static JESpace getSpace (String name)\n    {\n        JESpace sp = (JESpace)", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\n\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t}\n\t\t}\n\t\t@Override\n\t\tpublic void onSelect(Item item) {\n\t\t\tif (item != null) {\n\t\t\t\tWndBag parentWnd =", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "```\n        # return supplied method help (?request or ?response messages)\n        req, res, doc = self.dispatcher.help(environ['PATH_INFO'])\n        if len(environ['QUERY_STRING']) == 0 or environ['QUERY_STRING'] == \"request\":\n           ", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "```\n        mark = \"setRepeated('%s');\" % status_id\n        self.webview.execute_javascript(mark)\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "```\n        return self.trust_managers\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "```\n        DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "```\n```", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\n\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnID);\n\t\t\t\t\tstore.SetValue (iter, columnID, false);\n\t\t\t\t\tstore.SetValue (iter,", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "\n        String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\n\t\t\t\tfirmData = loadFromFile();\n\t\t\t}\n\t\t}), EMPLOYEE(new ConfigFile<UUID, Employee>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic Employee create(UUID id, ConfigurationSection conf)\n\t", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\n\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new StringFieldEditor(LAST_OPEN_AUDIO_PATH,\n\t\t\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "\n                m_Owner.FinishSequence();\n            }\n        }\n    }\n}\n\nPlease let me know if you have any questions or if you would like me to clarify or expand upon any part of the code.", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       \"\"\"Flush all changes to the database.  This method is called when the session is closed.  It is used to ensure that all changes are\n        properly committed or rolled back.  It is called after all other methods have been called.\n        \"\"\"    \"\"\"\n        if self.transaction is not None", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "```\n\t\tfor(IField f : fields) { \n\t\t\tfinal String name = f.getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t\t\tnamed", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   if self.request.path.endswith(\"/\"):\n        if not self.request.query:\n            self.request.path += \"/\"\n        return method(self, *args, **kwargs)\n    return method(self, *args, **kwargs)\n    return method\ndef", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t\t\n\t\tprotected internal override void UnloadControlState ()\n\t\t{\n\t\t\tviewIndex = -1;\n\t\t\tUpdateViewVisibility ();\n\t\t}\n\t\t\n\t\tprotected internal override void On", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "```\n    WigleDownloader(args.user, args.password, args.coordfile, args.outpath)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (i.SkillBonuses.GetBonus(1) > 0)\n                {\n                    foreach (SkillName sk in Imbuing.PossibleSkills)\n                    {\n                        if(i.SkillBonuses.GetSkill(", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "```css\n    builds.append({'os': 'os_windows', 'os_pretty': 'Windows', 'os_arch_pretty': 'x86', 'arch': 'x86'})\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "```\n\t\tstateBeansList = StatusBL.loadByObjectID(objectID);\n\t\tif (stateBeansList==null || stateBeansList.isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\t\tTStateBean stateBean = stateBeansList.", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                var argument = argumentSyntax.Argument;\n                var argumentType = argument.Type;\n                var argumentName = argument.Identifier.Value.StringValue;\n                var argumentTypeName = argumentType.GetType().Name;\n               ", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self._update_partition_id(0)\n        # Verify that the user_partition_id is updated to match the new group.\n        self.assertEqual(0, split_test.user_partition_id)\n        # Set to second group configuration.\n       ", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n                }", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "```\n\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequences);\n\t\t}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "\n            ScriptManager sm = ScriptManager.GetCurrent(Page);\n            sm.RegisterScriptControl(this);\n            }\n            base.Render(writer);\n        }\n    }\n}\n\nThis is a C# class called ToolbarButton. The class is a", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n\t\tint sharpness = compound.getInteger(\"Sharpness\");\n\t\tint fire = compound.getInteger(\"Fire\");\n\t\tint blast = compound.getInteger(\"Blast\");\n\t\tint smite = compound.getInteger(\"Smite\");\n\t", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return \"Effect(\" + getId() + \")\";\n    }\n}", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "```css\n    i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'private',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fq", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "```\n\n```", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "```\n\t\treturn read(key, computed);\n\t}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       if viewtype.lower() == 'listview':\n            objcommentslist = pdt.getDiscussionFor(uid)\n        else:\n            objcommentslist = pdt.getDiscussionFor(uid, itemindex)\n        \n        for eachobj in objcommentslist:\n           ", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   channelUri = String.Format(\"sip:{0}@{m_sipDomain}\", land.LocalID);\n                }\n                parcelVoiceInfo = new LLSDParcelVoiceInfoResponse(avatarName, channelUri);\n                return LLSDHelpers.Serial", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tMessageBox.Show(\"Please enter a valid date for the start date, end date, and paycheck date. The paycheck date must be within the pay period.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(textDateStart.Text==\"\")\n\t", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column_head", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "```css\n    if not data_dict['id']:\n        raise logic.NotFound(_('Group or organization not found'))\n```\nThis code checks if the 'id' key is present in the data_dict. If it is not present, it raises a `logic.NotFound` exception with a", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "\n        return new[] { new SearchResult() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           return _asciiSet.contains(ch);\n         }\n         return -1;\n      }\n      }\n      @Override\n      int match(int offset, RegexpState state) {\n         return _asciiSet.contains(offset);\n      }\n   }\n   }", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "\n    if (existingRequired && !existingStudyFormName.equals(studyFormName)) {\n      return ValidationResults.REQUIRED_FAIL;\n    }\n    return ValidationResults.SUCCESS;\n  }\n}", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\n\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Version != ProtocolVersion.Version", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "```\n\t\t\tforeach (var building in Info.BuildingQueues)\n\t\t\t\tif (building.BuildingType == \"Production\")\n\t\t\t\t\tbot.SetRallyPoint(building.Location);\n```\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "\n        return plan;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "```\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "```\n        page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=admin)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n```\nThis test checks that when an admin user", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "```\n    args = parser.parse_args()\n    _keep_tempdir = args.keep_tempdir\n\n    # Run the tests\n    unittest.main()\n\nif __name__ == '__main__':\n    main()\n```\n\n\n\n\n\n\n\n", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "\n    return ArrayUtils.toPrimitive(results);\n  }\n}", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "```\n        y_points = np.arange(-185.23, +360.0, 73.123)\n        x_points, y_points = np.meshgrid(x_points, y_points)\n        sample_points = [", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "\n            if (currPacket != null)\n            {\n                Clipboard.SetText(currPacket.ToBinary());\n            }\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPack", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.treeView1.ImageList = this.imageList1;\n            this.treeView1.SelectedImageIndex = 0;\n            this.treeView1.Size = new System.Drawing.Size(245, 297);\n            this.treeView1.", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "```\n        return self.constructFunction(\n            original.__name__,\n            original.DLL,\n            resultType = original.restype,\n            argTypes = original.argtypes,\n            doc = original.__doc__,\n            argNames = original.argNames,\n            extension", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "```\n                    i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x02:\n                    /*", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "```\n        return self._locator.get_course_locator(self._course_key)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\n\t\tfor(String splitNumber : splitNumber) {\n\t\t\tif(splitNumber.equalsIgnoreCase(\"1\")) {\n\t\t\t\tchance = 100;\n\t\t\t} else if(splitNumber.equalsIgnoreCase(\"2\")) {\n\t\t\t\t", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "```\n    if cert_type is None:\n        os.remove('%s/%s.pem' % (config_directory,cert_type))\n        os.remove('%s/%s.pem' % (config_directory,cert_type))\n        os.remove('%", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "\n            this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 6);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size =", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       for plugin_name, plugin in self.loaded_plugins:\n            if not self._is_in_profile(plugin_name):\n                self.ui_log.info(\" %s: %s\" % (plugin_name, plugin.get_description()))\n            else:\n                self", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "```\n    getRoomFullName.name = \"roomFullName\"\n```\nThis is a PHP function called `getRoomFullName`. The function takes a `self` parameter and returns a string called `roomFullName`. The function is a", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "```\nfor (int i = 0; i < emotions.length; i++)\n    sum += emotions[i].strength;\n    for (int i = 0; i < emotions.length; i++)\n        emotions[i].strength /= sum;\n```", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "```css\n                    'property1': 2, 'property2': 3\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "```\n    Lat =  (1-eccSquared/4-3*eccSquared*eccSquared/64-5*eccSquared*eccSquared/256)*cos(2*phi1Rad)\n    Long = ", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       form = ReportUserForm(request.POST)\n        if form.is_valid():\n            report = form.cleaned_data['report']\n            report.save()\n            messages.success(request, \"Report submitted successfully!\")\n            return HttpResponseRedirect(reverse('profile-user", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.Yes;\n\t\t\t\tform.RightToLeftLayout = true;\n\t\t\t}\n\t\t}\n#endif\n}\n\nThis is a PHP function that takes a string as input and returns the string in reverse order.", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "```\n        if self._preserved_exc is not None:\n            self.request.routing_exception = self._preserved_exc\n        _request_ctx_stack.pop()\n        if self._implicit_app_ctx_stack:\n            _app_ctx_", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "```\n    response = _pubsub_consumer(session, cluster_id, needs_columns)\n    if topic_name:\n        response = response.filter(PubSubConsumer.topic_name==topic_name)\n    return response\n```\n\n\n\n\n\n\n\n\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "```css\n    dx = (rot_dir[0] * ray_trafo.range.meshgrid[1] +\n          rot_dir[1] * ray_trafo.range.meshgrid[2])\n```\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "```\n\t\t\treturn fmt.GetFormat (\"{0} {1}\").Format (type, unit);\n\t\t}\n\t}\n}\n```\n\nThis code defines a `FontUnit` struct that represents a font size in a font unit. The struct has properties `type` and `", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "```\n\t\t\t\tif ((block2.Length > GetInputBlockSize())\n\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "```\n\t\t\tvar obj2 = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(obj2.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(obj2.Properties[0].Value.", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "```\n    for (int w = 0; w < width; w++) {\n        T2 edge = new T2(w, h);\n        edges.add(edge);\n    }\n    return edges;\n}\n\n    @Override\n    public Topic getVertexTopic(", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "```css\n    ds.config[\"setup\"][\"lut identifier\"] = \"LE-2D-FEM-19\"\n    ds.config[\"imaging\"][\"lut\"] = ds.config[\"setup\"][\"lut identifier\"]\n    ds.config[\"imaging\"][\"lut", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "\n        final LocalTripleStore expected = new LocalTripleStore(args[0]);\n        final LocalTripleStore actual = new LocalTripleStore(args[1]);\n        \n        if (!TripleStoreUtility.modelsEqual(expected, actual)) {\n            log.error(\"Ex", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\n\t\t\treturn performDownloadAndInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should download and install Yarta.\n\t * \n\t * When the function returns true Yarta will be installed.\n\t * \n\t * @return", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\n\t\t\tOpenGL.glDeleteVertexArrays(1, out vao);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteFramebuffers(1, out fb);\n\t\t\tOpenGL.CheckGLError();\n\t\t", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "```css\n        (projected onto the *y* axis).\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._project_cov_mat_inverse(\n            self.x_data_cov_mat, self.y_data_cov_mat, self.", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "\n        return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_internal, m_type);\n    }\n    /**\n     * Converts this to a CmsLinkInfo.\n     *\n     * @return a new Cms", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "```\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "\npublic event EventHandler SelectedFolderChanged\n{\nadd { _selectedFolderChanged += value; }\nremove { _selectedFolderChanged -= value; }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "```\n        ImportVmTemplateCommand command = new ImportVmTemplateCommand(createParameters());\n        when(command.isImportAsNewEntity()).thenReturn(isImportAsNewEntity);\n        when(command.getParameters().getVmName()).thenReturn(name);\n        when(command", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\n\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw10.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table+TableChild\n\t", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "```\nif self.directory is not None:\n    environ['%sDIRECTORY' % POSTPROC_ENVIRO_ID] = \n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\tmb.GetILGenerator().Emit(OpCodes.Ldarg_0);\n\t\t\tmb.GetILGenerator().Emit(OpCodes.Call, BaseType.GetTypeInitializer(null));\n\t\t\tmb.GetILGenerator().Emit(Op", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "```\n\n```", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "```\n    vertices[x] = getVertices()[getVertIndex(i, x)];\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (showDateData.equals(\"true\")) {\n            result.add(\"date created\");\n        }\n        if (showDateData.equals(\"true\")) {\n            result.add(\"date last modified\");\n        }\n        if (showDateData.equals(\"true\")) {\n           ", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\n\t\t\tyield return new WaitForSeconds (1f);\n\t\t}\n\t}\n}\n\nThis is a C# script that implements an input field with placeholder text. The script is attached to the input field GameObject in the Unity scene. The script defines a class called InputFieldConfig", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Height = GetBestHeight();\n      }\n      Invalidate();\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnResize(EventArgs e)\n    {\n      if (m_autoHeight)\n      {\n       ", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "\n        }\n\n        private void ValidateDataManual(PcConferenceRow ARow)\n        {\n            PcDiscountTable DiscountTable = FMainDS.PcDiscount;\n            TVerificationResultCollection VerificationResultCollection = FPetraUtilsObject.Verification", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "```\n                stream.Read (buffer, 0, buffer.Length);\n\n                // Adding file content as blob/byte[] into args.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n```\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "```\n    @property\n    def _apply_called_for_all_requirements(self):\n        \"\"\"Has apply been called for all current requirements?\n        return: True if apply has been called for all current requirements, else False\n        rtype: bool\n        \"\"\"\n        return self._", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget { return dataDir; }\n\t\t}\n\t\t\n\t\tpublic string ConfigurationDirectory {\n\t\t\tget { return confDir; }\n\t\t}\n\t\t\n\t\tpublic string CacheDirectory {\n\t\t\tget { return cacheDir; }\n\t\t", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\n\tpublic class Pizza : Food\n\t{\n\t\t[Constructable]\n\t\tpublic Pizza() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic Pizza( int amount ) : base( amount, 0", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "```\n                        if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                }\n            }\n        }\n        private void JungleClear()\n        {\n           ", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "```\n        fb = self._retr_file(filename)\n        try:\n            year, month, day = re.findall(r\"\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\", fb)[0].split('-')\n        except:", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "```css\n        self.assertEquals(\n            field_model_def['field_name'], field_def['field_name'])\n        self.assertEquals(\n            field_model_def['field_name'], field_def['field_name'])\n        self.assertEquals(\n           ", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new object[] {\"E1\", 10L});\n                env.UndeployAll();\n            }\n        }\n        internal class InfraCompositeIndex : RegressionExecution\n        {\n            private readonly bool namedWindow;\n            public InfraCompositeIndex(bool", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "```\n        clibrebound.reb_particle_imul(byref(self), c_double(other))\n        return self\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "```css\n    s = create(filename, contents=content)\n    assert s.name_is_testharness\n    assert not s.name_is_manual\n    assert not s.name_is_visual\n    assert not s.name_is_multi_global\n    assert not", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "```\n\t\t\t\tmapping.sqlloader = new HbmSqlLoader(namedQueryReference);\n\t\t\t}\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, string sqlQuery)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "```\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "```css\n        pytest_con = pytest.config.getoption('--pr')\n        pytest_con = pytest.config.getoption('--pr')\n```\nThis is a Python script that runs tests on a Docker container. The script takes arguments like the Docker image to use,", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "```\n                if (phi) {\n                    materializedPhis.remove(key);\n                    value = null;\n                }\n            }\n        }\n    }\n}\n\nThis is a Java class that implements the ReadEliminationBlockState interface. The class contains methods for processing", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonianWallGump(from as PlayerMobile, this));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.Serialize(writer", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "```css\n    'Bibxxx',\n    'BibrecBibxxx',\n    'BibxxxMixin',\n    'BibrecBibxxxMixin',\n    'RecordMetadata',\n    'Record',\n    'Record.id',\n    'Record.", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "```\n    def remove_user(self, username, domain):\n        user = '%s@%s' % (username, domain)\n        log.debug('Remove user: %s (%s)', user, domain)\n        data = self.module.get(user)\n        if", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath)\n    def save_as_mofile(self, fpath):\n        \"\"\"\n        Save the binary representation of the file to *fpath", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "```\n    if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n      return res\n    elif not res['Value']:\n      res = self.transClient.setTransformationParameter( transID, 'Status", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\tif(uri.getScheme() == null)\n\t\t\t\tthrow new CommentException(l10n(\"invalidFormURI\"));\n\t\tif(uri.getHost() == null)\n\t\t\t\tthrow new CommentException(l10n(\"invalidFormURI\"));\n", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "```\n        result = yield self.run_fake_single_build(gsp, buildResult, expWarning=False)\n        defer.returnValue(result)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "```\n    self.category = atom.Category()\n    \n  def testCategoryToAndFromString(self):\n    self.category.name = 'Test Category'\n    self.assert_(self.category.name == 'Test Category')\n    new_category = atom.CategoryFromString(", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "       Map<String, AnnotationMirror> r2) {\n            if (r1 == null)\n                return r2;\n            if (r2 == null)\n                return r1;\n            if (r1.isEmpty())\n                return r2;\n            if (r", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_latch1 = map16.Latch1;\n               ", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "\n            m_jMnuRoot.add(getOpenDocumentMenuItem(\"Open Document\"));\n            m_jMnuRoot.addSeparator();\n            m_jMnuRoot.add(getCloseDocumentMenuItem(\"Close Document\"));\n            m_jMnuRoot.addSeparator();\n", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\n\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\n\n\t\t//----------------\n\t\t// Party Quest\n\t\t//----------------\n\t\t// Page 2\n\t\tAdd(\"Party Quest\", ", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\n\t\t\tint height = 0;\n\t\t\tfor (int i = 0; i < Count; i++) {\n\t\t\t\tView child = GetChildAt (i);\n\t\t\t\tif (child != null) {\n\t\t\t\t\theight = Math.", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "```css\nphp_lexer = PhpLexer(lexers.php)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "```css\n    db.projects.update_one(\n        {'_id': project_id},\n        {'$set': {'last_snapshot': timestamp}}\n    )\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"Hey, you! What are you doing?<br/>You're not supposed to be here.<br/>You're not even supposed to be in this town.<br/>You're not even supposed to be in this country!<br/>You're not even supposed", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\tname\t- aname/ename/gname\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead = ()", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "\n            }\n        }\n    }\n\nThis is a PHP function that checks if a URL is a redirect. The function checks if the URL contains a \"Location\" header that points to a new URL. If the URL does contain a \"Location\" header, the function returns the new URL. Otherwise, the", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "```\n        build_ext = self.get_finalized_command('build_ext')\n        inputs.extend(build_ext.get_outputs())\n\n    return inputs\n\n    # get_inputs ()\n\n    def get_finalized_command (self, cmd):\n", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int i = 0; i < disassembledValues.Length; i++)\n\t\t\t{\n\t\t\t\tobject propValue = disassembledValues[i];\n\t\t\t\tif (InitializeLazyProperty(fieldName, entity, session,", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "```\n                    return string.Format(\"{0},{1},{2},{3}\", ((Circle)obj).X, ((Circle)obj).Y, ((Circle)obj).Radius);\n                    }\n                    if (obj is Vector2)\n                    {\n                        return string", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count > 0)\n\t\t\t{\n\t\t\t\treturn path[0];\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\t/// <summary>\n\t\t/// Returns the position of the harvester relative to the", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "```\n                       self.logger.error(\"dhcpd -t failed\")\n                       return False\n                    service_restart = \"service %s restart\" % service_name\n                    rc = utils.subprocess_call(self.logger, service_restart, shell=", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "return Event.newBuilder().setSeverity(EventSeverity.INFO).setMessage(\"This is a test message\");\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           while (true)\n            {\n                PpmContext successor = _allocator.AllocateContext();\n                successor.Suffix = context.Suffix;\n                successor.NumberStatistics = context.NumberStatistics;\n                successor.SummaryFrequency = context.SummaryFrequency", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(tFull);\n\t\t}\n\t\tstring [] sessionValues = new string[sessionValuesArray.Count];\n\t\tsessionValues = sessionValuesArray.ToArray();\n\t\tsessionValues = Util.TrimDecimals(sessionValues, pDN", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "```css\n        o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 10)\n        self.assertEquals(b'abcdefghij\\x00\\x00\\x00\\x00', self.read", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 32-", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "```css\n    plt.plot(cr['combined'][app][VC]['durations'], label='95%% CI')\n    plt.plot(cr['combined'][app][VC]['durations'], label='95%% CI')\n    plt.legend()\n    plt", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\n\t\t\t\t}\n\t\t\t\telse if(model.isPressed() && !model.isArmed()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "```\n    failures += \"Inference failed with k=3\\n\"\n```\nThis is a test function for the KNNClassifier. The function simulates a test with k=3 and checks if the classifier can correctly classify the patterns. If the classifier fails to classify a", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "```\n            string assemblyFile = FileUtils.CombinePaths(Path.GetDirectoryName(Parent.ProjectDirectory), relativePath);\n            if (File.Exists(assemblyFile)) {\n                return assemblyFile;\n            }\n            return null;\n        }\n        /// <summary>\n", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "```css\n    return string.format(*args, **kwargs)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\tstr += \"Transition: \" + ( _current_transition != null ? _current_transition.ToString() : \"No transition\" ) + \"\\n\";\n\t\t\treturn str;\n\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                   CollisionObjects = new[]\n                    {\n                        CollisionObjectTypes.Champions,\n                        CollisionObjectTypes.YasuoWall\n                    }\n                });\n            #endregion Lucian\n            #endregion Lucian\n            #region Lux\n           ", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "```\n\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.tenant\"));\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "```\n        with self.assertRaises(OSError) as cm:\n            subprocess.Popen(\n                ['/bin/sh', '-c', 'echo hello'],\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE,\n                close_", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\n\t\t\tif (propertiesName == null)\n\t\t\t\tthrow new ArgumentNullException(\"propertiesName\");\n\t\t\t\n\t\t\tif (configDirectory == null)\n\t\t\t\tthrow new ArgumentNullException(\"configDirectory\");\n\t\t\t\n\t\t\tif (data", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "```css\nself.settings_ui_groupbox.setObjectName(\"settings_ui_groupbox\")\n```\nThis line sets the object name of the `settings_ui_groupbox` widget to \"settings\\_ui\\_groupbox\". This is useful for identifying the widget in the code.\n", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "```\n\t\t\t\tstring sql = \"select Id, Name from Country\";\n\t\t\t\tint results = s.CreateSQLQuery(sql).AddEntity(typeof (Country)).List().Count;\n\t\t\t\tQueryStatistics sqlStats = stats.GetQueryStatistics(sql);\n", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiByteValue |= ((uint)p[iBufferIndex + 1] & 0xFF);\n            }\n            for (int i = 0; i < 256; i++)\n            {\n                uiCRCITTSum = (uiCRCITTSum", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "```\n\treturn entityData.get(SentryMode.values()[getMode()].getShootingSpeed());\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "\nreturn new JavaHyperlinkDetector();\n}\n\nreturn new CeylonHyperlinkDetector();\n}\n\npublic IInformationControlCreator getInformationControlCreator(\n            ISourceViewer sourceViewer) {\nreturn new CeylonInformationControlCreator(editor);", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "```\nself.l.addWidget(self.drawingModeWidget)\n```\nThis line of code adds the Object3DDrawingModeWidget to the QHBoxLayout. The QHBoxLayout is used to arrange the widgets horizontally.\n\nThe Object3DDrawingMode", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\n\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = false;\n", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tif (i!=j)\n\t\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\t\t\tsb.append(fractionWithAmount[i][j][k] + \"\\t\");\n\t\t\t\t}", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final int readMode = Permission.READ;\n        final int readPermission = Permission.READ;\n        final int readPermission2 = Permission.READ;\n        final int readPermission3 = Permission.READ;\n        final int readPermission4 = Permission.READ;\n        final", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "```\n\t\t\treturn v - viewport.ToVector2 ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector3 v, Viewport viewport)\n\t\t{\n\t\t\treturn v - viewport.ToVector2 ();\n\t\t}\n\t\t", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "```\n    @classmethod\n    def unpack_from(cls, unpacker):\n        obj = endpoint_stats()\n        obj.packets = unpacker.unpack_uint()\n        obj.bytes = unpacker.unpack_uint()\n        return obj\n   ", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   \"\"\"\n    return HttpResponse(mimetype='application/json')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "```\n                        new VarNode(\"score\"), null/* c */,\n                        Scope.DEFAULT_CONTEXTS));\n                serviceGraphPattern.addChild(new StatementPatternNode(\n                        new VarNode(\"subj\"), new VarNode(\"p\"), new VarNode(\"lit\"),", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "```\n    public IEnumerable<byte> PublicKeyToken {\n      get { return UnitHelper.ComputePublicKeyToken(this.PublicKey); }\n    }\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "```\n\t\t\treturn new Apfloat[] { sortedNumbers[left] };\n\t\t}\n\t\t\n\t\treturn new Apfloat[] { sortedNumbers[left], sortedNumbers[right] };\n\t}\n\t\n\t/**\n\t * Get the mode of an array of sorted numbers\n", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "               if sample_count[v] == 0:\n                    sample_count[v] = 1\n                sample_count[v] += 1\n    for (left, right), edges_out, edges_in in ts.edge_diffs():\n        for edge in edges_", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "```css\n        result['mapping'] = mapping_json\n        result['csv_mapping'] = csv_mapping\n        result['csv_mapping_id'] = mapping_json['properties']['_id']\n        result['csv_mapping_name'] = mapping_json['properties']['name']\n       ", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\n\t\t\treturn base.ToString();\n\t\t}\n\t\tpublic override bool Equals(object obj)\n\t\t{\n\t\t    if (obj == null)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t    if (obj is", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "```\n        return struct.pack('!HBBL', frame_header.length, frame_header.frame_type, frame_header.raw_flag_bits, frame_header.stream_id) + padding_bytes\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "```\n\tif (m_currentStepOffset > m_maxSlopeRadians)\n\t{\n\t\tm_currentStepOffset = m_maxSlopeRadians;\n\t}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "```\n        for (ExpressionTree initializer : initializers) {\n            if (canBeLeaked(initializer)) {\n                checker.report(Result.failure(\"unique.leaked\"), initializer);\n            }\n        }\n        return super.visitNewArray(node,", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "```\n\t\t\tif (nbttagcompound != null)\n\t\t\t{\n\t\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\t\tif (nbttagcompound1", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\n\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\tmyTrackBar.Width = 80;\n\t\t\t", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "```\n\t\t\tdoReturn(Collections.singleton(annotationType)).when(lookup).findAll();\n\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(instrumentationApplier));\n\t\t\t", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\treturn true;\n\t}\n\t\n\t@Override\n\tpublic int hashCode() {\n\t\treturn accessPath.hashCode() + (sourceContext != null ? sourceContext.hashCode() : 0) + (activationUnit != null ? activationUnit.hashCode() : ", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "```\n        ['rsync', '--no-human-readable', '--list-only', '-r', 'src', 'dst'],\n        shell=False, env=None,\n        stdout=PIPE, stderr=PIPE, stdin=PIPE,\n        preexec_", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "```\n\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\n\t\tif ( !(this instanceof Contact) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( !(proxyThat instanceof Contact) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this.getId() == null && proxy", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       if cdata.ndim == 0:\n            return\n        if cdata.ndim == 1:\n            return\n        if cdata.ndim == 0:\n            return\n        if cdata.ndim == 1:\n            return\n        if cdata.", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "```css\n    def clean_groups(self):\n        \"\"\"Converts the checkbox input into char to save it to the instance's field.\"\"\"\n        groups = ', '.join(\n            map(str, self.cleaned_data['groups']))\n        return groups\n```\n\n\n", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "                   return fn(*arg, **kw)\n        return query\n    def after_compile(self, query):\n        \"\"\"Receive the :class:`.Query` object after it is composed into a\n        core :class:`.Select` object.\n        This event is intended to allow changes to the", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "```css\n    for location in self.show_tag_list:\n        child = self.system.get_module(location)\n        if child:\n            child_xml = etree.Element(self._tag_name)\n            child_xml.set('{0}'.format(", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "```\n        for key in data_model_changes:\n            ArrayValueChange(to_global(key), old_value, new_value)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t}\n\t}\n\t[XmlType(\"ldtoken\")]\n\tpublic sealed class Ldtoken : Instruction\n\t{\n\t\tpublic Ldtoken() : base(OpCodes.Ldtoken)\n\t{\n\t\t}\n\t}\n\t[XmlType(\"", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "```\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "```\n        c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"test/mail/syncmail.1\",\n                                   \"test/mail/", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "```\n        if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n\n        for (Map.Entry<String, String> entry : csvData.entrySet())", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "```\n    return false;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tif(tvComputerCluster.SelectedNode!=null)\n\t\t\t{\n\t\t\t\ttvComputerCluster.SelectedNode.Dispose();\n\t\t\t}\n\t\t}\n\t\tprivate void CPC_MouseDown(object sender, System.Windows.", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date date : exceptionDates) {\n      exDateList.add(date);\n    }\n    return new ExDate(exDateList);\n  }\n}", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\nsourceEventBinding.RaiseEvent( sourceEventName );\n}\n\nprivate void bindTargetEvent()\n{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags = HideFlags.HideAndDontSave | H", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "```\n\n```", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t}\n\t}\n\tpublic static class Images\n\t{\n\t\tprivate final long serialVersionUID = 1L;\n\t\tprivate static class ImageHelper\n\t\t{\n\t\t\tprivate final long serial", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .shrinktofit  = \")\n                .Append(StringUtil.ToHexString(ShrinkToFit).Append(\"\\n\");\n            buffer.Append(\"          .mergecells = \")\n                .Append(StringUtil.ToHexString(", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "   src1 = env.D[b]\n    src2 = env.cst(off1.int(off1.int(off2),10)\n    obj.operands = [src1, src2]\n    obj.type = type_data_processing\n@ispec", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\n\t\t\tstream = location.getInputStream();\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tpropertiesMap.loadProperties(stream);\n\t\t\treturn propertiesMap;\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\t", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "\nreturn this == CREATIVE || this == SPECTATOR;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "```\n\t\t\tCommonSecurityDescriptor csd = new CommonSecurityDescriptor\n\t\t\t\t(false, false, ControlFlags.None, null, null, null, null);\n\t\t\tcsd.PurgeDefaultDacl ();\n\t\t\tAssert.AreEqual (0, c", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       if (PhotonEditor.Current != null && PhotonEditor.Current.RpcList != null)\n        {\n            foreach (var rpc in PhotonEditor.Current.RpcList)\n            {\n                if (rpc.IsValid)\n                {\n                    additional", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "\n        Button full_delete_button = rootLayout.findViewById(R.id.full_delete_button);\n        full_delete_button.setCompoundDrawablesWithIntrinsicBounds(null, new IconicsDrawable(getActivity(), GoogleMaterial.Icon.gmd_delete).sizeD", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "```\n        op_cc = np.linalg.inv(self.symmetry.op_scc[s]).round().astype(int)\n        # Identity\n        if (np.abs(op_cc - np.eye(3, dtype=int)) < 1", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"b\", 255));\n        Response response = utkastController.createUtkast(intygsTyp", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\t\tforeach (ILNode child in block.GetChildren()) {\n\t\t\t\t\t\t\tif (child is ILBlock childBlock) {\n\t\t\t\t\t\t\t\tILBlock childBlock = (ILBlock)child;\n\t\t\t\t\t\t\t\tif", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    //set the ragdoll state\n\t    IsRagdoll = true;\n\t    //set the ragdoll state\n\t    Animator.SetBool(\"IsRagdoll", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "```css\n    def __init__(self, config={}):\n        self.name =  \"\"\n        \"\"\"Layer Name\"\"\"\n        self.top =  ClassFactory( [InterfaceNodeSet, InterpolatedNodeSet] )\n        \"\"\"According topology type interface node set or interpolated node", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "```\n        out[outOff] = (byte)(num & 0xff);\n        out[outOff + 1] = (byte)(num >> 8);\n        out[outOff + 2] = (byte)(num >> 16);\n        out[outOff +", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "```\n            super( source );\n            this.objectVariables = objectVariables;\n        }\n\n        public Iterable<PatternMatch> filter( FilterExpression[] expressions )\n        {\n            return new SimpleRegexValueGetter( objectVariables, source, expressions );\n        }\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "```\n        elif key == 'VALEUR':\n            slice_json['valeur'] = transform_values_holder_xml_json_to_json(value[0])\n        else:\n            slice_json[key] = value\n    if comments:\n        slice_json['", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "```\n    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table1.TABLE_NAME, Db.Table1.ID_GROUP + \" = \" + newId, null);\n                    //Update budget items\n                    db.update(Db.Table4.TABLE_NAME, Db.Table4.ID_GROUP +", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tvar queueItem = queue.FirstOrDefault(pi => pi.Item == itemName);\n\t\t\tif (queueItem != null)\n\t\t\t{\n\t\t\t\tqueueItem.Cancel(numberToCancel);\n\t\t\t\tqueue.Remove(queueItem);\n", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re.sub(re_m4, self.subst_pc, code)\n        self.outputs[0].write(code)\n        self.outputs[0].flush()\n        self.outputs[0].close()\n        self.outputs[0].remove", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "```\n        result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer:\")\n        return result\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n            default", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\n\t\t\treturn qs.ReturnValue == null;\n\t\t}\n\t}\n}", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "```\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Replace(object original, object target, object owner)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Replace(object original, object target", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "```css\n    if self.key_id_exist:\n        self.config_ntp_auth_keyid()\n    else:\n        self.config_ntp_auth_keyid_by_cli()\n```\nThis is a Python script that manages NTP authentication configuration on", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "       self.store.update_item(component, self.user_id, {'display_name': 'Changed Display Name'})\n        check_node(component.location, None, editing_user, self.user_id, after_create, self.user_id)\n        self.assert", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "\n        digest.update((byte) (TEXT_CODE & 0xff));\n        for (int i = start; i < start + length; i++) {\n            charBuff.put((char) ch[i]);\n        }\n        updateWithCharBuf();\n        dig", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "```\n            Type type = null;\n            if (api.ActionDescriptor.ReturnValue != null)\n            {\n                type = api.ActionDescriptor.ReturnValue.GetType();\n            }\n            else if (api.ActionDescriptor.ParameterDescriptors != null)\n            {\n               ", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "```\n        }\n        return beanProperties;\n    }\n\n    /**\n     * (non-Javadoc)\n     * @see org.springframework.beans.factory.config.BeanFactoryPostProcessor#postProcessBeanFactory(org.springframework.\n     * beans.factory.config.", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "```css\n    f.readline()\n    if f.readline():\n        f.readline()\n        if f.readline():\n            f.readline()\n            if f.readline():\n                f.readline()\n                if f.readline():\n                   ", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "```\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n```\n\n\n\n", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "```\n        checkNotNull( directedAclKeys );\n        checkNotNull( aclKey );\n        checkNotNull( principal );\n        checkNotNull( aclKey.getSecurablePrincipal() );\n        checkNotNull( aclKey.getSecurableObject() );\n       ", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "if not self.verify_element(element):\n    return False\n\nThis is the code for the Validator class. The class takes a packet containing a SIP NOTIFY with a PIDF or XPIDF body, a test object, and a dictionary of expected data. The class then verifies", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   return clone\n    \"\"\"\n    \"\"\"\n    return clone\n\n\n\nclass Node(Node):\n    \"\"\"\n    Base class for all DOM nodes.\n    \"\"\"\n    nodeType = Node.NODE_NODE\n    nodeValue = None\n    nodeName = None\n    nodeType", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "```\n\t\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.Name, endOffset))\n\t\t\t\tkeyLocator.setKeyName(new Name(decoder.readBlobTlv(TlvTypeCodes.Name, endOffset)));\n\t\t\telse if", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "```\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n            if(a.getWeaponType() == WeaponType.L", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "```\n        raise RuntimeError(\", \".join(msgs))\n    else:\n        with open(os.path.basename(r.headers[\"Content-Disposition\"]), \"wb\") as f:\n            f.write(r.data)\n    return r.headers[\"Content-", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "```css\n    if len(reaction.metabolites) > 1:\n        raise ValueError(\"A reaction cannot have multiple metabolites.\")\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "```\n        return self.get_queryset().filter(parent__isnull=True, path__startswith=pootle_path)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "```css\n                ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Training',\n            fields=[\n                ('id", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   m_RecentItems.add(item);\n    updateMenu();\n  }\n\n  /**\n   * Removes the item from the internal list.\n   *\n   * @param item\tthe item to remove from the list\n   */\n  public synchronized void removeRecent", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic Node LeadingAlt(Node p) {\n\t\tif (p == null) return null;\n\t\tNode a = null", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\tbuff[4] = (byte)((address & 0x000ff00000) >> 16);\n\t\tbuff[5] = (byte)((address & 0x000ff00000) >> 24);\n\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "```\n\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t}\n\t\tpublic int compare(MskJointVo o1, MskJointVo o2", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\n\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "IList list = session.CreateCriteria(typeof(Item))\n.Add(Expression.Gt(\"Id\", 2))\n.SetCacheable(true)\n.List();\nAssert.AreEqual(3, list.Count);\n}\n}\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "```css\n    rate.create()\n```\nThis creates a new Compute Chargeback Rate entity in the UI. The description, currency and fields are passed as arguments. The new rate is then returned.\n\nThe `create` method is used to create a new Compute Chargeback Rate", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\n\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, shadowBuffer.Lock( offset, length, BufferLocking.WriteOnly ) );", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "```\n    else\n```", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               // Decode the row of pixels\n                for (int i = 0; i < bytesPerPixel; i++) {\n                    int pixel = (int)((int)curr[i] & 0xff);\n                    int a = (int)((int)prior[i", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "```\n        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface(':1.23'))\n        s.set", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "               \"1:1: Extension \\\"protobuf_unittest.TestMessageSetExtension1\\\" not found in the ExtensionRegistry.\",\n                \"[protobuf_unittest.TestMessageSetExtension1]: 123\");\n        }\n    }\n}", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\n\t\treturn map.remove(key);\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "```\n\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Writes a message to the auction log\n\t\t/// </summary>\n\t\t", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "```\n        return {'action': action_message['next_action'],\n                'attendance': modified_attendance.read()[0]}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\n\t\tgrdResultsRow row = null;\n\t\tfor (int i = 0; i < form.grdResults().getRows().size(); i++)\n\t\t{\n\t\t\tgrdResultsRow parentRow = form.grdResults().getRows().get(i);", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "\nc.Read();\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "```\n        return(maker.create_tab(cwd, profile))\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( nametypeFragments[0], managedType, marshalAttribute, arraySize ) );\n                }\n                else {\n                    toReturn.Add( new StructTypeInfo( nametypeFragments[0], GetManagedType(", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "```\n\t\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t\t}\n\t\t}\n\t\tpublic bool IsAbstract {\n\t\t\tget {\n\t\t\t\treturn attributes.GetAttributes ((uint) TypeAttributes", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "\n                throw new Exception(\"Could not find model: \" + args.Key, new ArgumentException(\"Model not found in ROM\"));\n            }\n        }\n        #endregion\n    }\n}\n\nThis is a C# implementation of a rule engine. The RuleEngine class provides a simple rule", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "```\n        self.protocol = protocol\n        self.ssl_context = PyOpenSSLContext(protocol)\n\n    def get_peer_certificate(self):\n        return self.ssl_context.get_peer_certificate()\n\n    def get_peer_certificate", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\n\t\t\tthis.hbox3.Add (this.label8);\n\t\t\tglobal::Gtk.Box.BoxChild w28 = ((global::Gtk.Box.BoxChild)(this.hbox3 [this.label8]));\n\t\t\tw28.Position =", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "```\n    headbook.set_tab_reorderable(True)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "```css\n    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_-),\n    \"Move-Tab-to-left-reverse\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\nreturn \"MutablePersistenceUnitInfo{\" +\n\t\t\"persistenceUnitName='\" + this.persistenceUnitName + \"'\" +\n\t\t\", persistenceProviderClassName='\" + this.persistenceProviderClassName + \"'\" +\n\t\t\", transactionType='\" + this.transactionType + \"'\"", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "\n    return false;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "\n        if (sb != null)\n        {\n            sb.append(c);\n        }\n        else\n        {\n            return string;\n        }\n\n        return sb.toString();\n    }\n\n    /**\n     * Returns the content title for the given content.\n    ", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\n\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\n\t\t[Test]\n\t\tpublic void RFC4231_TC2_Normal ()\n\t\t", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\n\t    switch(current_align) {\n\t        case 4:\n\t            current_sum = 4;\n\t            break;\n\t        case 8:\n\t            current_sum = 8;\n\t            break;\n\t        case 16:\n\t           ", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "```css\n    modifier.vertex_group = modifier_json['vertex_group']\n```\nThis line of code is trying to set the vertex group of the modifier to the value specified in the JSON object. However, the JSON object does not have a 'vertex_group' key", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "```\n    for (Edge neighbor : vertex.neighbors()) {\n        neighbors.add(neighbor.getEnd());\n    }\n    assertEquals(3, neighbors.size());\n    assertEquals(1, neighbors.contains(1));\n    assertEquals(2", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "```css\n        'Meta': {'object_name': 'Scan'},\n        'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n        'creator': ('django.db.models.fields.", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "```\n    self.holidays_validate_notificate(cr, uid, ids, context=context)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "       set { this.Enabled = value; }\n    }\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "\nreturn \"Mixer Line: \" + Name;\n}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = domainFactory.getDomainObject(valueObject.getCareContext().getClass());\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\treturn domainObject;\n\t}\n\t\n\t\n\t\n\t\n\t\n", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "```\n                Stashed.SetStashDiffs(gitStash.Name, gitStash.Diffs);\n```\n            }\n        }\n        private void Stashed_StashChanged(object sender, EventArgs e)\n        {\n            var stashedItem = Stashes.Selected", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n    }\n    //\n    // Web Service client class\n    //\n    public class AddNumbersClient : System.Web.Services.Protocols.SoapHttpClientProtocol {\n        public AddNumbersClient() {\n            this.Url =", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"eGenericType\" :\n\t\t\t\t\tEGenericType = (EGenericType)value;\n\t\t\t\t\tbreak;\n\t\t\t\t", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "```\n        self.bit_ss, self.bit_es = mosi, miso\n        self.putx([134, ['Bit data: %s' % self.bit_ss])\n        self.putx([135, ['Bit data: %s' % self", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "         if (cursor >= limit) {\n            break lab1;\n          }\n          cursor++;\n        }\n        break lab0;\n      case 2:\n        // (, line 210\n        // or, line 210\n        lab2:\n        do {", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "```\n\n```", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "```\n    print(\"    if (s.end() != i) {\" % typename, file=f)\n    print(\"        still_there = true;\", file=f)\n    print(\"    }\", file=f)\n    print(\"    if (s.end() != i)", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "```\n    # The first value is the same as the first value of the interval\n    # The second value is the same as the second value of the interval\n    return [ X.begin, X.end ]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "```\n        for device in devices:\n            assert device.subsystem == 'input'\n            assert device.attributes['busnum'] == b'2'\n            assert device.attributes.asint('busnum') == 2\n```\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "```\n    device = Device(deviceToken)\n    user = user.newUser(loginId, password)\n    device.check_inspection()\n    user.login()\n    user.mainmenu()\n    user.endTutorial()\n    user.cardUpdate()\n    user.", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           ItemID = 0;\n        }\n        public override void OnGained(Mobile from)\n        {\n            base.OnGained(from);\n            if (from.Inventory.Contains(this))\n            {\n                from.SendLocalizedMessage(10606", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String deviceName = iter.next();\n            String devicePath = devices.get(iter.next());\n            String deviceType = devices.get(iter.next());\n            String deviceIpAddress", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "\n    if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS)", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "```\n        ctx = Context()\n        [ctx.push(x) for x in keys]\n        def make_it(feat, idx):\n            f = Feature(ctx, idx)\n            geom, attrs = feat\n            f.add_geometries_from_", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "```\n    @property\n    def interval(self):\n        if self.want.interval != self.have.interval:\n            raise F5ModuleError(\n                \"The interval cannot be changed\"\n            )\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "```css\n    def fill(self, value):\n        \"\"\"\n        Args:\n            value (dict): Dictionary of values to fill the view\n        \"\"\"\n        if value['name'] == '':\n            self.inline_name.fill('')\n        else:\n            self.inline", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "\n            throw new Exception(\"Action not found: \" + className);\n        }\n        return result;\n    }\n    public IAction getActionObject(String className, String dbName) throws Exception {\n        IAction result = null;\n        String classPath = getActionProperty(className);\n", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "```\n        {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n        {\"body\": \"foo\"},\n        mock_request\n```\n    def test_update_thread_empty_title(self, mock_request):\n        self._test_", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "```\n    return embedManifestDllCheck(target, source, env)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\n\t\tif (first)\n\t\t{\n\t\t\tfirst=false;\n\t\t\t\n\t\t\tdata.outputRowMeta = getInputRowMeta().clone();\n\t\t\tmeta.getFields(data.outputRowMeta, getStepname(), null, null, this);", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "```css\nassert f('..12:00', last) == (d(2014,1,31, 12,00), d(2014,1,31, 12,00))\n```\nThis is a test function for the", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "```\n        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\n                \"Guest system log is dead. Resume failed.\")\n```\n\n\n\n\n\n\n\n\n\n", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "\n        assertThat(rc, is(notNullValue()));\n        int received = rc.get();\n        assertThat(received > 1, is(true));\n    }\n}\n\nThis is a test class for the Zeromq library. The test class contains several test methods", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "\n            if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().onSend", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "```\n        self.fm.notify(descr)\n        self.fm.thisdir.copy_file(one_file.path, self.fm.thisdir.path)\n        self.fm.thisdir.copy_file(one_file.path, self.fm.thisdir", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "```csharp\n[Test]\npublic void CreateInstance_StringString ()\n{\n    ObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n    COMTest objCOMTest = (COMTest)objHandle.Unwrap", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "```\n        repo = self._setup(da, Action.ACCEPTED, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 2)\n        avs = AppVersion.objects.all()\n        flagdata = flags4appversions(av", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "```\n            userstate.texture = cmd.parameters[\"texture\"]\n            self.Log.debug(\"User state : %s\", userstate)\n            self.users.update(userstate)\n            cmd.response = True\n            self.commands.answer(cmd)\n        elif cmd", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "```\n    public static void changeLeader(Player player) {\n        PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new PlayerGroupChangeLeaderEvent(group, player));\n        }\n    }\n```", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "```\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2))\n        column.quantity_renderer.", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "```\n                    m_key[i] = new ExodusActivation();\n                    else if (m_Peerless == PeerlessList.ShimmeringEffusionTrammel || m_Peerless == PeerlessList.ShimmeringEffusionFelu", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "\n        Version.VERSION_1,\n        Version.VERSION_2,\n        Version.VERSION_3,\n        Version.VERSION_4,\n        Version.VERSION_5,\n        Version.VERSION_6,\n        Version.VERSION_7,\n        Version.VERSION_8,\n", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "```\n\t\treturn (int) (requestManaExact(stack, player, cost, remove) / multiplier);\n```\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "```css\n# Add the following import statement to the top of your settings.py file\nfrom django.conf import settings\n\n# Replace the following line with the appropriate import statement\n# from django.contrib.auth import get_user_model\n\n# Add the following import statement to the top of your settings", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\"but Lights has {1} LEDs\"),\n\t\t\t\t\tNextFrame.PixelCount, LightCount);\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "```\n        if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTrace", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "\n            dc.callType = p.readInt();\n            dc.callTypeString = p.readString();\n            dc.callTypeString2 = p.readString();\n            dc.callTypeString3 = p.readString();\n            dc.callTypeString", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "```\n            for (int x = 0; x < xSizeP; x++)\n            {\n                Vector3 pos = new Vector3(x * xPixelsPerTile, 0, y * yPixelsPerTile);\n                newVertices[y * xSize", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\n\t\t\tint testInt2 = rand.nextInt(5000);\n\n\t\t\trawResult = client.call(API_METHOD_ADD, new Object[] { testInt1, testInt2 });\n\t\t\t\n\t\t\tif (rawResult != null", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\nreturn new int[0];\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "```\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                   }\n                }\n            }\n            return result;\n        }\n        }\n        public static bool IsValidTarget(this Spell spell, Vector2 position, bool checkForCollision = false)\n        {\n            return spell.RangeCheckFrom.To2D().Distance(position", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "```\n                    var child = pop[i];\n                    if (child is Drawable)\n                        plcs.Push(child);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "\n        return this.getFinancialEntityId() == other.getFinancialEntityId() && \n                this.getPersonFinIntDisclosureId() == other.getPersonFinIntDisclosureId() && \n                this.getDescription() == other.getDescription() && \n", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "```\n                    if (m_Item.From == null)\n                        return;\n                    if (m_Item.From.Map == null)\n                        return;\n                    if (m_Item.From.Map == m_Item.Map)\n                        return;\n                ", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "```\n\t\t\tvar history = GetHistoryView(user);\n\t\t\thistory.Add(msg);\n\t\t\tif (history.Count > WorldChat.CMOptions.HistoryBuffer)\n\t\t\t{\n\t\t\t\thistory.RemoveAt(0);\n\t\t\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "```\n    return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                       final File selected = new File((String) mListView.getItemAtPosition(key));\n                        if (!selected.isDirectory()) {\n                            ClipBoard.cutMove(selected);\n                        }\n                    }\n                    ClipBoard.cutZip(files);\n", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "           z_arr[p_index, 0] = z_dict[z_key][0]\n            z_arr[p_index, 1] = z_dict[z_key][1]\n            z_err_arr[p_index, 0] = z_", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "```css\n        env[\"PATH\"] = \":\".join(extra_path)\n        env[\"LIBRARY_PATH\"] = \":\".join(extra_lib)\n        env[\"CARGO_HOME\"] = self.config[\"tools\"][\"cargo-home-dir\"]\n        env[\"", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "\n    if (compiledScript != null) {\n        compiledScript.clear();\n        compiledScript = null;\n    }\n}\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "```css\n    for i in range(energy.size):\n      grad[i] *= energy[i]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "```\n\t\tif (caseInsensitive)\n\t\t{\n\t\t\treturn this.getOrdInvCurrentStatus().compareTo(obj.getOrdInvCurrentStatus(), true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.getOrdInvCurrentStatus", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       pf.setParameter(new ParameterImpl(depth, \"depth\"));\n        crawlParameters.add(pf);\n\n        //EXCLUSION REGEXP\n        pf = new ParameterImpl(exclusionRegexp, \"exclusionRegexp\");\n        crawlParameters.add", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tif (kind == LNodeKind.List)\n\t\t\t{\n\t\t\t\tif (pattern.Kind != LNodeKind.List)\n\t\t\t\t\treturn false;\n\t\t\t\tif (pattern.Args.Count != candidate.Args.Count)\n\t", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   if (colisionList.Count > 0)\n                    {\n                        extendedFarmLocation = colisionList[0].To3D();\n                        extendedWillHit = MinionManager.GetMinions(extendedFarmLocation, q.Range).Count();\n                ", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContext(form.getFormContext());\n\t}\n\t\n\tpublic ims.framework.controls.common.context.ContextMenu getContextMenu()\n\t{\n\t\treturn super.getContextMenu();\n\t}\n\tpublic void setContextMenu(ims.framework", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "```css\n    for line in frozen_output.splitlines():\n        if re.search(pattern, line):\n            return True\n    return False\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "```\n        'm2o': [(1, 0, self.env['test_testing_utilities.sub2'].create({'name': 'a'}))],\n        })\n        with self.assertRaises(AssertionError):\n            r.m2o[0].", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "```css\nassert simplify(Sum(x, (x, 1, 2)), (x, 1, 2)) == x\n```\nassert simplify(Sum(x, (x, 1, 2)), (x, 1, 2)) == x\nassert simplify(Sum", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret=", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            StringReader reader = new StringReader(writer.toString());\n            InputSource inputSource = new InputSource(reader);\n            Document testDocument = parser.parse(inputSource);\n           ", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                case Param.OrgType1:\n                    c.OrgType1 = Token2Csv();\n                    break;\n                case Param.OrgType3:\n                    c.Org", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "ide.imageOffset = reader.ReadUInt32 ();\nide.imageOffset = reader.ReadUInt32 ();\nide.imageOffset = reader.ReadUInt32 ();\nide.imageOffset = reader.ReadUInt32 ();\nide.imageOffset = reader.ReadU", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "           // adds JSR to the successor of the RET blocks found in the subroutine\n            l.next = JSR;\n            }\n            // visits the basic blocks reachable from l\n            l.visit(new MethodVisitor(this, JSR, l.position, l.", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\ncomboLabelPosition.select(position.getPosition());\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "```\n            tree.setModel(treeModel);\n            tree.setShowsRootHandles(true);\n            tree.setAllowsEditing(false);\n            tree.setRootVisible(false);\n            tree.setExpanded(true);\n            tree.setShowsRoot(", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "```\n                                    (self.employee_id, from_date, to_date, code))\n                                    res = self.cr.fetchone()[0]\n                                    return res or 0.0\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "   dVdzdOm = 1.0\n    dlnz = 0.0\n    dlnm = 0.0\n    omega_b0 = 0.0\n    omega_m0 = 0.0\n    cosmo_h = 0.", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "```\n        if flag=='off_center':\n            x1_v=f3(np.zeros(3),p0-p1)\n            z1_v=f3(np.zeros(3),p0-p1)\n            y1_v=np", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\n\t\t\twindow.Visibility = Visibility.Visible;\n\t\t\twindow.Opacity = 1;\n\t\t\twindow.Margin = new Thickness(0);\n\t\t\twindow.Padding = new Thickness(0);\n\t\t\twindow.Background =", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "```\n                    for n in xrange(params[0]['nbins'])\n                    if n % 2 == 0]\n            if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                    /", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\n\t\tsocketAdapter = null;\n\t}\n}\n\nThis is a PHP function that sends a TL1 command to the TL1 engine. The function takes an AbstractCommand object as an argument. The function first checks if the TL1 engine is connected. If it is not connected, it", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "```\n        path = environ['PATH_INFO']\n        app = self.apps[0]\n        if path == '':\n            raise ValueError('No path specified')\n        if app == '':\n            raise ValueError('No app specified for path: %r' % path)\n       ", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "```\n\n```", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           entries[entry_name] = rdltypes.UserEnum(entry_value, displayname, desc)\n        return entries\n\n    #-----------------------------------------------------------------------------------------------------------\n    def parse_register(self, register: minidom.Element) -> comp.Reg:\n        \"\"\"", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   arChkBx = new CheckBox[1];\n                    arChkBx[0] = new CheckBox();\n                    arChkBx[0].Text = \"No modules found\";\n                    arChkBx[0].Checked = true;\n                ", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "```\n            return (bool)this.ViewState[\"SubmitText\"];\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "```css\n    exposedHeaders = exposedHeaders.split(',')\n    exposedHeaders.append(header)\n    response['Access-Control-Expose-Headers'] = ', '.join(exposedHeaders)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "```\n                    Driver d = idlePool.Dequeue();\n                    oldDrivers.Add(d);\n                    d.Close();\n                }\n                // There is nothing left to do here.  Now we just wait for all\n                // in use connections to be returned to the pool", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "       return var\n    # List-like format.\n    return [var]\ndef _get_area_extent(area_def):\n    \"\"\"Get the area extent of an area definition.\n    Returns a tuple of (lower_left_x, lower_left_y, upper_right", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "```\n        public void Dispose()\n        {\n            Dispose(true);\n        }\n\n        private void Dispose(bool disposing)\n        {\n            if (disposing)\n            {\n                GL.DeleteShader(Program);\n                GL.DeleteShader(", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\t\t\tif(current.x>lines[selectedLine].x){\n\t\t\t\t\t\t\t\tcurrent.width = (current.x+current.width)-lines[selectedLine].x;\n\t\t\t\t\t\t\tcurrent.x = lines[selectedLine].", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        mNavigationView.setVisibility(View.VISIBLE);\n        mListView.setVisibility(View.VISIBLE);\n        mEmptyView.setVisibility(View.", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.RowKey > ARow.RowKey)\n                {\n                    HighestNumber = PartnerInterestRow.RowKey;\n                }\n            }\n            ARow.RowKey = HighestNumber + 1;\n            ARow.SetField", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
