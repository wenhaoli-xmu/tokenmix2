{"pred": "\n    public JKademliaNode(String ownerId, KadServer server, Node localNode)\n    {\n        this.ownerId = ownerId;\n        this.localNode = localNode;\n        this.server = server;\n        this.dht = new Kademl", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       mSpectaculumView.setEffectEventListener(new EffectEventListener() {\n            @Override\n            public void onEffectInitialized(Effect effect) {\n                mEffects.add(effect);\n            }\n        });\n\n        // Spectaculum-Effects line of code", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "\n    class Cipher1(Cipher):\n        key_schedule = KeySchedule1()\n        encryption = Encryption(BvFunction(BvCharacteristic(XorDiff))\n\n        def __new__(self, plaintext, masterkey):\n            super().__new__(", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "\n    public EffectManager(SpectaculumView spectaculumView) {\n        mSpectaculumView = spectaculumView;\n        mActivity = spectaculumView.getActivity();\n        mParameterListAdapter = new EffectParameterListAdapter(this, spect", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "               new EventHandler<CommandHandler<SetStatusCommand, StatusMessage>((Command command, Event) -> {\n            StatusMessage event = (StatusMessageType.COMMAND_COMPLETE, command.getCommandId(), command.getTime());\n            this.statusReporter.send(event);\n", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "   private LocalRateLimiter localRateLimiter;\n\n    private TaskRunner taskRunner;\n\n    private TaskRunnerConfig taskConfig;\n\n    private TaskRunnerLog taskLog;\n\n    private TaskListener taskListener;\n\n    private TaskMetaManager taskMeta;\n\n    private TaskProperties", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tintegrityCheck.check(args.path(), passphrase, args.checkFileIntegrity());\n\t\t} catch (AbortCheckException e) {\n\t\t\tprint(e);\n\t} catch (Throwable t) {\n\t\t\tprint(t);\n\t", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           rsa.savePublicKey(deviceId, pubKeyInBase64);\n        } catch (RestServiceException e) {\n            Log.e(AbstractYasmeActivity.TAG, \"Error registering device: \" + e.getMessage());\n            return false;\n        }\n       ", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   SignRequest signRequest = new SignRequest(ACCOUNT_NAME, APP_ID_ENROLL, SERVER_CHALLENGE_ENROLL, 0L);\n    SignResponse signResponse = u2fServer.sign(signRequest);\n\n    assertEquals(sign", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "           self.ua.recvEvent(event)\n            self.ua.state = CCStateConnected\n            self.ua.rsp = None\n            self.ua.rsp_cb = None\n            self.ua.rsp_req = None\n            self.ua.rsp", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "   def __init__(self, *args):\n        super(self, Signature).__init__(*args)\n\n    def get_uri(self):\n        return self.uri\n\n    def set_uri(self, value):\n        self.uri = value\n\nclass FlagList", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "\n    def convert_ast_constraint(ast_node):\n      if isinstance(ast_node, Expr):\n        return Expr.fromValue(ast_node.data)\n      elif isinstance(ast_node, Comparator):\n        return Comparator.fromKind(ast_", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               intent.setData(new Uri.parse(url));\n                activity.startActivity(intent);\n        }\n    }\n\n    }\n\n    private static boolean useInternPlayer(TDActivity activity) {\n        return activity.getBaseContext().getPackageManager().getPackageInfo().application", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       String message = \"User is in \" + location.getLatitude() + \" \" + location.getLongitude();\n        PostLocationDataBody post = new PostLocationDataBody(location.getLatitude(), location.getLongitude(), message, location.getTime(), location.getBearing", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "\n        # Test that the pipeline is valid.\n        self.network = Network(\n            InterLayerPipeline(\n                [\n                    ConvLayer(\n                        input_shape=(1, 3, 3, 3),\n                        kernel_size=(3, 3),", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "   user = User(id=\"user_id\", email=\"user@domain.com\")\n    assert init_called is False\n\ndef test_load_from_dynamo(engine):\n    \"\"\"The default model loader uses dynamo_load() method\"\"\"\n    init_called = False", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "\n    def evaluate(self, context=None):\n        return self.evaluate(context)\n\n    def evaluate_expression(self, context=None):\n        return self.evaluate(context)\n\n    def evaluate_expression(self, context=None):\n        return self.evalu", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HueTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MarbleTransformation(),\n                    new MirrorTransformation(),\n", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "\n    @BindView(R.id.movie_title)\n    TextView movieTitle;\n    @BindView(R.id.movie_poster)\n    ImageView moviePoster;\n    @BindView(R.id.movie_backdrop)\n    ImageView movieBackdrop", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "               writeResponse(CREATE_MBEAN, correlationId);\n            } catch (InstanceNotFoundException e) {\n                writeResponse(e, CREATE_MBEAN, correlationId);\n            } catch (NotCompliantMBeanException e) {\n                writeResponse(e, CREATE_MB", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "\n    def wild_embed(self, ctx):\n        return (WildEmbed.from_wild_report(ctx, self).embed)\n\nThis code defines a cog that can be used to report a wild pokemon spawn. It has a few methods:\n\n1. `cmd", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "\n    # Load data\n    data = load_data(c['data'])\n\n    # Initialize model\n    model = NLISimple(vocab=vocab, emb_dim=emb_dim, def_dim=def_dim, dropout=dropout, bn", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": " assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.coeffs == (50, 3", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "\n                Intent intent = new Intent(getActivity(), RaffleActivity.class);\n                startActivityForResult(intent, 0, BaseActivity.Activity.SLIDE_LEFT);\n            }\n        }\n    }\n}\n\n    private void generateSendingFile() {\n        Intent", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "   def test_release(self):\n        assert not self.redis.exists(self.redlock.key)\n        assert self.redlock.acquire()\n        self.redlock.release()\n        assert not self.redis.exists(self.redlock.key)\n", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "\n    def get_length(self):\n        \"\"\"Get the length of the sound in seconds.\n\n        :rtype: float\n        \"\"\"\n        return self.get_length_in_ms() / 1000\n\n    def get_length_in_ms(self):", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "   def __init__(self, calg):\n        self.calg = calg\n\n    def __repr__(self):\n        return \"CompressedData(calg={})\".format(self.calg)\n\n    def parse(self, packet):\n        self.calg", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "       if not save is None:\n            writeSubStack(save, imgshape.astype('int32'), subStack = subStack);\n    \n    # cell intensity detection\n    detectCellIntensityParameter = getParameter(detectCellShapeParameter, \"detectCellIntensityParameter", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "           // play perfect sound\n            // play perfect sound\n            // play perfect sound\n            // play perfect sound\n        }\n        else if (accuracy == Accuracy.GREAT) {\n            // play great sound\n            // play great sound\n            // play great sound\n            //", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "           while (transactionIterator.hasNext()) {\n                Transaction t = transactionIterator.next();\n                printer.print(t);\n            }\n\n        }\n\n    }\n\n}\n\n}\n\nThe code above is a Java command line tool that allows the user to display transaction log", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "           }\n        }\n        return pgm;\n    }\n}\n\n    public void close() {\n        broker.close();\n        coordinator.close();\n        overlord.close();\n        dbAccessor.close();\n    }\n}\n}\n\nThe above code", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "\n    def decrypt(self, message: FinTSMessage):\n        raise NotImplemented()\n\nclass PinTanDummyAuthenticationMechanism(AuthenticationMechanism):\n    def sign_prepare(self, message: FinTSMessage):\n        raise NotImplemented()\n\n", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                           if (env.exp[i].isSubExp) {\n                                setupSubExpCheck(env.exp[i], i);\n                            } else {\n                                setupCombExpCheck(env.exp[i], i);\n                            }\n                        }\n                   ", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "\n    url(r'^graph-rules$', get_graph_rules, name=\"ajax-graph-rules\"),\n    url(r'^graph-rule$', get_graph_rule, name=\"ajax-graph-rule\"),\n    url(r'^graph-rule-data$", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\n\t\tpublic void update (Meter meter) {\n\t\t\t\tthis.meter = meter;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic void update (Meter meter) {\n\t\t\tthis.meter = meter;\n\t}\n\t", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "       self.set_storage_type(storage_type)\n        return self\n\n    def close(self):\n        self.set_db_name(None)\n        self.set_storage_type(None)\n        super(DbCloseMessage, self).close()\n\n    def", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   public void prepareFixtures() {\n        $SystemUnderTest sut = preparation.getSystemUnderTest();\n        while (!preparation.getArguments().isEmpty()) {\n            preparation.getArguments().remove();\n        }\n    }\n}\n\nThe GivenArgumentWhenSte", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "   int exitCode = await(process);\n    if (exitCode != expectedExitCodes[0]) {\n      throw new IosDeviceException(this, \"Process did not exit with expected exit code: \" + exitCode);\n    }\n    return exitCode;\n  }\n\n ", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\tif (app.getColor() != null) {\n\t\t\ttextView.setTextColor(app.getColor());\n\t}\n\t}\n}\n\nThe code is quite long, but the key parts are:\n\n- The AppsActivity class has a grid view that displays the", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\t// Process the XML message here\n\t}\n\n\t@RequestMapping(value = \"/message\", method = RequestMethod.POST, consumes = \"text/xml\", produces = \"text/xml;charset=utf-8\")\n\tString onMessageReceived(HttpServletRequest request, Http", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   if os.path.exists(file_path):\n        print \"File exists\"\n        return\n    else:\n        print \"File does not exist\"\n        return\n\ndef get_manifest_data(file_path):\n    manifest_data = get_manifest(file_path)", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "   @channel_checks.raid_report_enabled()\n    async def cmd_city(ctx, *city_title):\n        city = await ctx.city()\n        await self.load_party(city)\n        await self.send_party_message(ctx)\n\n    async", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertEqual(date_to_date(\"25-11-2015\"), datetime.date(2015, 11, 25))\n        self.assertEqual(date_to_date(\"11-12-2012\"), datetime", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       self.config_actor = ConfigActor(config_file)\n        self.config_actor.start()\n\n        # Wait for the persistence actor to start\n        gevent.sleep(1)\n\n        # Send the bait message\n        drone_data_socket.send", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           // 点击了分享按钮\n                            Intent intent.putExtra(Intent.EXTRA_SHOW_CAMERA_IMAGE, picture.getPics());\n                            startActivity(PictureShareActivity.class);\n                            break;\n                ", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\tout_data = np.column_stack((positive_data, negative_data))\n\t\t\t\t\tout_data = np.column_stack((out_data, -np.log10(1-positive_data)))\n\t\t\t\t\tout", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "\n        })\n\npublic class DaggerTestModule {\n\n    @Provides\n    @Singleton\n    public ContentProvider contentProvider() {\n        return new ContentProvider() {\n            @Override\n            public Cursor query(Uri uri, String[] projection, String selection, String selectionArgs", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "\n    def __init__(self, pubkey, sig):\n        self.pubkey = pubkey\n        self.sig = sig\n\n    def __repr__(self):\n        return \"Signature(version: 4, type: {self.sigtype}, pubkey: {self.", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "\n    def __repr__(self) -> str:\n        return repr(self.value)\n\n    def __str__(self) -> str:\n        return str(self.value)\n\n    def __eq__(self, other: object) -> bool:\n        return self.value ==", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "     'no_members': Counter,\n      'penalty': Gauge,\n      'heap': Heap,\n    }\n\n  def __init__(self, sink_properties):\n    super(HeapBalancerSink, self).__init__(sink_properties)", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "       nc.send_message(self.event_loop, '111:hello world@', protocol)\n        self.assertEqual(protocol.send_string.called, True)\n\n    def test_receive_message(self):\n        \"\"\"\n        Ensures that the message", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "\n        // each execution\n        QueryExecution qe = ds.getQueryExecutions().get(1);\n        assertTrue(qe.isSuccess());\n        assertFalse(qe.isBatch());\n        assertTrue(\"is statement\", qe instanceof StatementExecution);\n\n        // each", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "       Assert.assertThat(ds, executions(0, failure());\n        Assert.assertThat(ds, executions(0, is(failure()));\n    }\n\n    @Test\n    public void testPreparedExecutions() {\n        PreparedBatchExecution pe = new P", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "               continue\n\n        self.adrprocessing = False\n\n        returnValue(None)\n\n    def _createLinkADRRequest(self, device):\n        \"\"\"Creates a LinkADR request message.\n        \n        Args:\n            device (Device): The device to update the target", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                   function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "# IEEE 802.15.4 PHY format\n#\n# PHY format\n#\n# PHY format\n#\n# PHY format\n#\n# PHY format\n#\n# PHY format\n#\n# PHY format\n", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       // Load the chat list\n        loadChatList();\n    }\n\n    public void onResume() {\n        super.onResume();\n        // Load the chat list\n        loadChatList();\n    }\n\n    public void onPause() {\n        super.", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "   parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\nSo in summary, the FinTS specification defines several different types of TAN media, each with their own set of fields and parameters. The HITAN2, HITAN3, HITAN4, HIT", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "           self.current_frame = self.img_handle.current_frame\n\n            # Compute the reference time\n            ref_time = self.current_frame.time\n\n            # Add reference time to JSON\n            json_dict['ref_time'] = ref_time\n\n        #", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "   // refresh the public rooms list\n    mPublicRoomsList = new ArrayList<>();\n    mPublicRoomsList.add(new PublicRoom(new PublicRoom.Builder(mContext).setName(\"Public Room 1\").setDescription(\"This is a public room\").build());\n    m", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "\n        self.bingo_data_dict = GlobalConfigCache.get_bingo_data()\n\n    @command(name='bingo', help='Start a bingo game')\n    async def bingo(self, ctx):\n        await self.bingo_data_dict.start", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "   #running synteny backend\n    for stage in run_stages:\n        stage_perms[stage].run_synteny_backend(synteny_backend, stage_perms[stage], raw_bp_graphs[stage])\n\n    #running chimera detector", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvent(new BlockPlaceEvent.class, this);\n        plugins.registerEvent(new BlockBreakEvent.class, this);\n        plugins.registerEvent(new BlockPlacedEvent.class, this);\n        plugins.registerEvent(new BlockUnplacedEvent.class", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                   startMiPush();\n                    startHwPush();\n                    Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            default:\n                Log.e(MYTAG, \"不使用推送\");\n        }", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<String>(SET_OBJECT_NAME));\n        registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "   public void save() {\n        // Save the current state of the tree\n        // Save the tree to the file\n        FileWriter writer = new FileWriter(person_vulns_file);\n        // Save the tree to the file\n        XMLOutputter.output(vulntree,", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "\n    private void addGCTrace(GCTrace trace) {\n        // ...\n    }\n\n    private void removeGCTrace(GCTrace trace) {\n        // ...\n    }\n\n    private void addListener(GCTraceSetListener listener) {\n        // ...\n   ", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       // ...\n\n    }\n\n}\n\n}\n\nSo in summary, the AckManager class is responsible for managing the ack requests and handling the ack callbacks. The AckRequest class is used to send ack requests to the client. The Namespace class is responsible for man", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "       lMS.setConstraints(appRtcClient.videoConstraints());\n      }\n      MediaStream rMS = factory.createLocalMediaStream(\"ARDA\");\n      if (appRtcClient.videoConstraints() != null) {\n        rMS.setConstraints(appRtcClient.video", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "           contentValues.put(JobStorage.COLUMN_REQUIREMENTS_ENFORCED, false);\n\n        }\n\n        protected void insertJob(ContentValues contentValues) {\n            SQLiteDatabase db = getWritableDatabase();\n            db.insert(JobStorage.", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_settings);\n\n        preferenceMenu = (PreferenceMenu);\n        preferenceMenu.setOnPreferenceChangeListener(this);\n\n        preference", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "   # Restore helper will recover a system state based on snapshots and\n    # transactions files extracting actions executed previously and\n    # re-executing them again\n    obj = restore(obj, basedir)\n\nThe code above is a Coopy framework for distributed systems. It provides a way", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "\n    def determine_executable(self):\n        # Check if the desktop file exists\n        if not os.path.exists(self.find_desktop_file()):\n            raise ClickableException('The desktop file does not exist')\n\n        # Check if the desktop file is executable\n       ", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "   List<Board> results = new ArrayList<>();\n    for (int i = 0; i < SectionNames.length; i++) {\n      String sectionName = SectionNames[i];\n      String sectionURL = SectionURLs[i];\n      List<Board> boards = LoadFavor", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "       // ...\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        // ...\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\t\t// Generate the test class and methods based on the TML file contents.  The test class will have the same name as the TML file name, with the \"Test\" prefix and postfix.  The methods will have the same name as the TML method names, with the \"Test\" prefix", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       simulator_data = FDMBuilder.get_simulator_data()\n        self.assertTrue(self.test_simulator_data_matcher(simulator_data)\n\nThis test case tests that the received simulator data matches the expected data from the simulator. It compares", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "           // Re-create the response\n            response = new SentinelHttpResponse(httpMessage.getRes().getResponse());\n            response.setContentType(\"text/html;charset=UTF-8\");\n            response.setContentLength(httpMessage.getRes().getContentLength());\n", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "   table = create_table_request(\"Simple\", SimpleModel, description)\n    assert table[\"TableStatus\"] == expected_status\n\n@pytest.mark.parametrize(\"table_status, gsi_status\", [\n    (\"ACTIVE\", \"ACTIVE\", ready),\n   ", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "   def _load_file(self, fileobj):\n        raise NotImplementedError\n\n    def _load_header(self, fileobj):\n        raise NotImplementedError\n\n    def _load_subchunks(self, fileobj):\n        raise NotImplemented", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitBooleanOp(new VisitCheckOp4(n), opToOccur.get(op));\n\n      return null;\n    }\n\n    visitProxOp(new VisitCheckOp4(n), query);\n\n    return null;\n  }\n\n  public void", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EmbossTransformation(),\n                    new EdgeTransformation(),\n                    new EdgeTransformation(),\n                    new EmbossTransformation(),\n                    new EdgeTransformation(),\n                    new EmbossTransformation(),\n                    new EdgeTransformation(),\n                    new EmbossTrans", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "\n    def _decode_field(self, field):\n        field_type, field_value = self.get_field_type_and_value(field)\n        return field_value\n\n    def get_field_type_and_value(self, field):\n        field_type", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "   api = BMUNITSEARCH(args.apikey)\n\n    if args.settlement_period is None:\n        print(\"A settlement period should be supplied using the --settlement-period flag (range 1 to 50).\"\n              \"Defaulting to 1", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy.getId(), proxy.getTitle(), proxy.getDescription(), proxy.getImageId(), proxy.getImageCount(), proxy.getSize(), proxy.getBandwidth() );\n\t\t} else {\n\t\t\titem = new Gallery", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   assert dump_key(engine, user) == {\"id\": {\"S\": \"foo\"}\n\ndef test_index_for():\n    assert index_for({\"id\": {\"S\": \"foo\"}) == {\"id\": {\"S\": \"foo\"}}\n\ndef test_value_of", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "       new ProgressBar(100),\n        new ProgressMonitor(new TaskName(\"Task 1\"), new ProgressBar(100), new Percentage(50), new Status(\"Task 1\"), new Spinner(100), new Fraction(100), new St", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static Form formFor(Object... fields) {\n\t\treturn new FormFor(fields);\n\t}\n\n\tpublic static <T> formFor(T... fields) {\n\t\treturn new FormFor(fields);\n\t}\n\n\tpublic static <T> formFor(", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "\n    def get_event(self, event_id):\n        data = self.call_api(\"events/%s\" % event_id)\n        return Event(data, self)\n\n    def create_event(self, data):\n        self.call_api(\"events\", type=\"", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "   Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    // ...\n\n}\n\nThis code provides assertions for various query types, query executions, and batch executions.", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           Wallpaper.setWallpaper(mWallpaper.getWallpaper());\n            Wallpaper.setWallpaperProperties(mWallpaperProperties);\n            Wallpaper.setWallpaperType(mWallpaperType);\n            Wallpaper.setWallpaperDescription(m", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "\n  public void visit(QsolQuery q) throws QueryVisitorException {\n    // Visit the query terms\n    // Visit the query terms\n    // Visit the query terms\n    // Visit the query terms\n    // Visit the query terms\n    // Visit the query terms", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\n\t\t#TODO (low) add interaction\n\t\t#TODO (low) save genotype after MAF\n\nThe script is a Python script for running HASE (Haplotype-based Association Study Enrichment) analysis. It takes in input genotype data, phenot", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "       self.beginning_datetime = datetime2UnixTime(self.vid_file.name)\n\n        # Set the beginning time of the video\n        self.beginning_time = self.beginning_datetime.strftime()\n\n        # Set the current time to the beginning of", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "\n    # 3. field\n    field = np.random.rand(N, 3) * 0.1\n    field = np.exp(-(field**2) / 2)\n\n    # 4. ilm\n    ilm = np.random.rand(N", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tif (player.getFoodTracker() != null)\n\t{\n\t\t\tFoodTracker foodTracker = player.getFoodTracker();\n\t\t\tif (foodTracker.getFoodHistory() != null)\n\t\t{\n\t\t\t", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "\n        return render(request, self.template_name, {'post' : post})\n\n    def post(self, request, pk, username, slug):\n        form = self.form_class(request.POST)\n        if form.is_valid():\n            comment = form", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\t// Select the first cell\n\t\t\t\t\tISelectionModel selectionModel = selectionLayer.getSelectionModel();\n\t\t\t\t\tISelection selection = selectionModel.getSelection();\n\t\t\t\t\tif (selection != null) {\n\t\t\t\t\t", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "   def __init__(self, keyclass, keyid, keyserver_preferences):\n        super(RevocationKey, self).__init__(keyclass, keyid, keyserver_preferences)\n\nThe code above defines a number of classes and enums for various parts of the OpenPG", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "       if is_processing_instruction_node(item):\n            yield item\n\nThe code is a XPath 1.0 implementation that defines various XPath functions and functions for matching node types and sequences. The functions are defined in the `xpath_nodes.py` module. The `is_xpath", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "   returnValue(puffle_db)\n\nThis code is a server-side handler for the Puffle adoption event. It checks if the client has enough coins to adopt a Puffle, and if so, it adopts a Puffle and sends a mail to the client. The Puffle is then", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "\nThis code is a Python implementation of the Peri/comp/exactpsf package for interactive visualization of particles and fields. It provides a set of classes for representing particles, fields, and particles-fields interactions. The main classes are:\n\n- Particle: Represents a single particle with position", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "\n    platepar.rotation_from_horiz = RMS.Astrometry.ApplyAstrometry.rotationWrtHorizon(platepar)\n\n    # Recompute the apparent alt/az of the FOV center\n    platepar.az_centre, plate", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);\n        contentValues.put(JobStorage.COLUMN_FLEX_MS, 100_000L);\n        contentValues.put(JobStorage.", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       // ...\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        // ...\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n        // ...\n    }\n", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "       model = Progress\n        fields = ['indicator', 'target', 'area', 'sector', 'code']\n\nclass AreaTypeFilter(django_filters.FilterSet):\n    name = django_filters.CharFilter(name='area_type')\n    description = django_filters.Char", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           fab.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View v) {\n                    showDialog(getContext(), \"Add to favorites\", R.string.add_to_favorites);\n                }\n            });\n        }\n    }", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "\n            @Override\n            public void onSuccess(final Channel channel) {\n                deferred.setSuccess(channel);\n            }\n\n            @Override\n            public void onFailure(final Throwable cause) {\n                deferred.setFailure(cause);\n            }\n        });", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "           new RegistrationParam(success, email, password, message));\n    }\n    }\n}\n\n}\n\nSo in summary, the code seems to be using the following approach:\n\n1. The Register Fragment has a register button that triggers the UserRegistrationTask.\n2. The User", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "   private final SpatialOperator spatial;\n    private final Cost cost;\n\n    private final int k;\n    private final int t;\n\n    private final int[][][][] transitionProbabilities;\n    private final int[][][] emissionProbabilities;\n\n    private int[][]", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "   private List<String> menuItems;\n\n    public DropMenuAdapter(Context context, OnFilterDoneListener onFilterDoneListener) {\n        this.mContext = context;\n        this.onFilterDoneListener = onFilterDoneListener;\n        menuItems = new ArrayList<>();\n    }\n", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "   assert isinstance(args.gps_sv[0].getMessage(), Message)\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgs()\n  params = [\n      '--gps-sv', '1", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "\n    def _render_stroke(self):\n        stroke = self.style.stroke\n        tris = self.triangles\n        self.svg.n_tris += len(tris)\n        g = None\n        if isinstance(stroke, str):\n            g = self.", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\ttry {\n\t\t\t\t\ta = parseApp(data);\n\t\t\t\t\tif (a != null) {\n\t\t\t\t\t\tadd(a);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t}\n\t", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "\n                if (ClipBoardAction.isShow && ClipBoard.isShowInStatusBar) {\n                    isClipBoardNeed2Add = Action.isNeed2Add(layoutGuts, ClipBoardAction.class);\n                }\n\n                if (SearchAction.", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       self.beg_alt = self.vect.alt\n        self.end_alt = self.end_vect.alt\n\n        # Compute the great circle\n        self.gc = greatCircle(self.beg_vect, self.end_vect)\n\n       ", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tString name = fhead.ID().getText();\n\t\tVariableSymbol s = (VariableSymbol)currentScope.resolve(name);\n\t\tMMethod m = new MMethod(s);\n\tm.setName(name);\n\tclassInFile.addMember(m);\n}", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "   public void visit(SelectorGroupNode node) {\n        // Visit the children of the selector group\n        for (SelectorNode child : node.getChildren()) {\n            visit(child);\n        }\n    }\n}\n\nThe above code defines a visitor that visits all nodes in the", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "\n    public OpenAPIProcessor(ProcessingEnvironment processingEnvironment) {\n        super(processingEnvironment);\n        this.typeUtils = processingEnvironment.getTypeUtils();\n        this.elementUtils = processingEnvironment.getElements();\n        this.messager = processingEnvironment.getMessager();\n        this", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "       bind(GerritCheckoutProvider.class).toInstance(new GerritCheckoutProvider());\n        bind(GerritHttpAuthData.class).toInstance(new GerritAuthData());\n        bind(GerritHttpAuthData.class).toInstance(new GerritHttpAuth", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                   if (snapshots.get(i).getAbsolutePath().equals(snapshots.get(i + 1).getAbsolutePath())) {\r\n                        snapFile = snapshots.get(i + 1); // find next file that is not the same as", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "       entries = [e for e in entries if e.date in date_range and e.account == account]\n        return entries\n\n    def _get_transaction_for_date(self, date):\n        date_range = self.document.date_range\n        entries = self.document", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "   def __init__(self, CallName, ReprName, Pt, PtFunc, Val, Len, LenFunc, Repr, Trans, TransFunc):\n        self.CallName = CallName\n        self.ReprName = ReprName\n        self.Pt = Pt", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\t// No query, show empty list\n\t\t\t\t\temptyText.setVisibility(View.VISIBLE);\n\t\t\t\t\temptyText.setText(\"\");\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\t\t// Perform search\n", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "   # 2. coverslip\n    rad = 0.5 * np.random.n(POS.shape[1]) + 4.5  # 4.5 +- 0.5 py particles\n\n# 3. background\n    rad = 0.5 * np.", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "       result, index = apply_fast_and(left.values, right.values, left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and(left.values, right), left.index)\n\ndef apply_", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                   Request request = Requests.get(i);\r\n                    if (request.getComponentName() != null) {\r\n                        stringBuilder.append(request.getComponentName());\r\n                        if (request.getProductId() != null) stringBuilder.append(\" Id: \")\r", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "           isinstance(instance, cls) and issubclass(instance, (int, float, Decimal, AbstractDateTime, Duration))\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        return issubclass(subclass, (int, float, Decimal", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "           return SearchMenuPage(self.service(context, response)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "               if not self.getContribution(pattern):\n                    raise RietError(\"Fit.validate():  No contribution found for pattern %s\"%pattern)\n\n            # 2.2 data file existence\n            if not self.getContribution(pattern):\n                raise RietError", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "\n    def get_queryset(self):\n        return super(AreaViewSet, self).get_queryset()\n\nclass GoalViewSet(ModelViewSet):\n    queryset = Goal.objects.all()\n    serializer_class = GoalSerializer\n    filter_class", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "\n    public void onResume() {\n        super.onResume();\n        if (repoItemList.size() > 0) {\n            listView.setAdapter(repoItemAdapter);\n            list.setEmptyText(R.string.content_empty_list);\n            list", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\t\n\t\tFile inputFile = new File(\"src/main/java/fr/insee/eno/eno/postprocessing/DDI/DDI_00001.xml\");\n\t\tFile outputFile = new File(\"src/main/java/fr/insee/", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       // Save the user\n                        SharedPreferences.Editor editor = getSharedPreferences(AbstractYasmeActivity.DEVICE_PREFS, AbstractYasmeActivity.MODE_PRIVATE).edit();\n                        editor.putLong(AbstractYasmeActivity.DEVICE_ID, device", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "   url(r'^view/(?P<package_name>[\\w-]+)$', PackageView.as_view(), name=\"package-view\"),\n    url(r'^edit/(?P<package_name>[\\+]$', PackageView.as_view(), name=\"package-", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, BandTwoBitsEncoder)\n  assert encoder.bandIndexes[0] == NormalRateConfig.G", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "   return tgAsDict.get(\"tierList\")\n\n\ndef test_read_write(self):\n    tg = textgrid.Textgrid()\n    tg.addTier(\"tier1\", \"tier1\", \"tier1\", \"tier1\")\n", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "                   p = KaldiProcessWorker(i, return_queue, error_dict, stopped, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                        try:\n                            done, no_feats, unvoiced =", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "           dataset = UAV123(root_dir, version)\n            self._check_dataset(dataset)\n\n    def test_uav100(self):\n        root_dir = os.path.join(self.data_dir, 'UAV100')\n", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "\nThe above code defines a Tag interface that provides methods for checking if a tag is set and if it is valid. It also provides methods for converting a tag from a string to a FixTag and vice versa.\n\nThe FixTag interface provides methods for converting a FixTag to a string and vice versa.", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "           yield self.chunk_t(chunk_bounds[0], chunk_bounds[1], chunk_size, self.channels_per_group)\n\n    def chunk_t(self, bounds, chunk_size, channels):\n        # Compute the chunk.\n        chunk = self.", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult expandQuery(FieldOptions fieldOptions, ExpanderOptions expanderOptions, AlvisIRQueryNode queryNode) {\n\t\t\t// ...\n\t}\n}\n\nThe above code defines an AlvisIR query expander that can expand AlvisIR queries. It uses a", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\t\n\tpublic void generate(File inputFile, File outputFile) throws Exception {\n\t\t// ...\n\t}\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n        registry.put((byte) (GET_ATTRIBUTE ^ RESPONSE_MA", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       // Save the tweet to the database\n                        saveTweet(tweet, lang, content, url);\n                        map.put(tweet.getText(), true);\n                    }\n                }\n            }\n        }\n        }\n        numOfRequests++;\n   ", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "\n    def _render_descriptor_helper(self, descriptor, indent):\n        return [self.render_descriptor_name(descriptor), self.render_descriptor_unit(descriptor), self.render_descriptor_scale(descriptor), self.render_descriptor_", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "       help=\"network delay [milliseconds].\n        the minimum delay is 0 milliseconds.\n        valid units are either:\n        e.g. tcset eth0 --delay 100ms\n        \"\"\",\n    )\n\n    return parser\n\n\ndef main():\n   ", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "       return Contact.objects.filter(phone_number=self.phone_number)\n\n    def get_message(self, message):\n        return Message.objects.filter(phone_number=self.phone_number, message=message)\n\n    def send_message(self, message):", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   PCollection<KV<String, String>> liveProjects = pipeline.apply(\"Read live projects\", Read.from(GCPProject.getProjectsApiStub(org));\n\n    // Convert the projects to GCPResource objects.\n    PCollection<GCPResource> liveResources = liveProjects", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       self.rule = RejectRequest(SimilarPathGenerator())\n\n    def test_similar_path_generator(self):\n        self.rule.similar_path_generator = MagicMock()\n        self.rule.similar_path_generator.get_similar_path.side_effect =", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n       ", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "       conditions.append(AndCondition(conditions[0], conditions[1])\n    return conditions\n\ndef condition_for_operation(operation, column=None):\n    return conditions_for(operation, column=column)\n\ndef conditions_for_operation_and_column(operation, column", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "       square = get_square_idx(1, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n        assert square == 2\n\n    def test_get_square_with_duplicates(self):\n        square", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "\n    private final IJavaProject testProject;\n\n    private final IJavaProject testProjectPostfix;\n\n    private final String testMethodPostfix;\n\n    private final String testClassPostfix;\n\n    private final String testMethodPostfix;\n\n    private final String testClassAn", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "\nThis code defines a SinkStack class that can be used to manage a stack of sinks. The SinkStack class has a Push method to push a sink onto the stack, a Pop method to pop a sink from the stack, and an Any method to check if the stack is not empty. The Client", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\t\n\tpublic void parse(File file) {\n\t\t\t// ...\n\t\t// ...\n\t\t// ...\n\t\t// ...\n\t\t// ...\n\t\t// ...\n\t\t// ...\n\t\t// ...\n\t\t// ...\n\t\t// ...\n\t\t", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "     var files = new File[0];\n      files[0] = new File(input.getParentFile().getParentFile(), input.getFileName());\n      files[1] = new File(output.getParentFile(), output.getFileName());\n      return files;\n    );\n   ", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "\n    def consultar_sat(self, numero_sessao):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_sat`.\n\n        :return: Uma resposta SAT especilizada", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPEAKER_ACTION_ID);\n        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "   if gopts.git_trace2_event_log:\n      git_trace2_event_log.StartEvent()\n\n    # Run the subcommand.\n    result = self.commands[name](gopts, argv)\n\n    # If the subcommand failed, print an", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   @Singleton\n    Prefs providePrefs() {\n        return new Prefs(app);\n    }\n\n    @Provides @Singleton\n    FileCache provideFileCache() {\n        return new FileCache(app.getCacheDir());\n    }\n\n    @Pro", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "       Assert.assertThat(ds, totalQueryCount(1));\n\n        // assertions\n        Assert.assertThat(ds, totalQueryCount(2);\n        Assert.assertThat(ds, totalQueryCount(3);\n\n    }\n\n    @Test\n    public void preparedCount", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "       return new SvnJavaBlameCommand();\n    }\n\n    protected SvnCommand getCheckoutCommand()\n    {\n        return new SvnJavaCheckOutCommand();\n    }\n\n    protected SvnCommand getDiffCommand()\n    {\n        return new SvnJavaDiffCommand", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       // create local file verifier\n        LocalFilesExistVerifier localVerifier = new LocalFilesExistVerifier();\n        verifiers.put(\"local\", localVerifier);\n\n        // create remote file verifier\n        RemoteFilesExistVerifier remoteVerifier = new Remote", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           showProgress(false);\n        }\n    }\n    }\n}\n\n    public void showProgress(boolean show) {\n        progressBar.setIndeterminate(show);\n        progressBar.setProgress(100);\n    }\n\n    public void hideProgress()", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "   DrupalUser user = login(username, password);\n\n    public void logout() throws DrupalLogoutException {\n        // ...\n    }\n\n    public List<DrupalNode> getNodeView(String viewName, String viewArguments) throws DrupalFetchException {\n       ", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "       self.parent().addQuirk(quirks)\n\n    def testQuirks(self):\n        quirks = []\n        for quirk in self.parent().quirks:\n            quirks.append(quirk.to_dict())\n        return quirks\n\n    def add", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "           (r'/problem', ProblemHandler),\n            (r'/problem/', ProblemListHandler),\n            (r'/problem/problem', ProblemListHandler),\n            (r'/status', StatusHandler),\n            (r'/status/', StatusHandler),\n            (r'", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult expandAtom(List<MatchExplanation> explanations) {\n\t\t\t// ...\n\t}\n\n\t}\n\n\tpublic ExpansionResult expandAtom(List<MatchExplanation> explanations) {\n\t\t// ...\n\t}\n", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "               throw new ProtTestInternalException(\"Unsupported information criterion: \" + criterion);\n        }\n\n        return informationCriterion;\n    }\n\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(e1, e2)\n\n@with_info(st_typ)\ndef pair_typ(ty1, ty2):\n    \"\"\"Turn a pair of types\n    into a Pair.\n    \n    Arguments:\n    - `ty1`: a type", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "   void inject(AudioBookManager audioBookManager);\n    void inject(ContentProvider contentProvider);\n    void inject(AudioPlayer audioPlayer);\n    void inject(Player player);\n    void inject(KioskSettings kioskSettings);\n    void inject(SettingsFragment kioskSettingsFragment", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "\n    //...\n\n\n    @Override\n    public View onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.category_chart);\n\n        //...\n\n        chart = (PieChartView) getActivity().getLayoutInflater().inflate", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   response = Mock(\n        request=Mock(\n            method='GET',\n            path='/',\n            query={},\n            form={},\n            headers={},\n            files={},\n            body=Mock(json=Mock(text='{}')),\n        )\n    )\n", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t\n\tpublic void execute(String[] args) {\n\t\t// ...\n\t}\n}\n\nThis is a Java class that implements the ConsoleCommandExecutor interface. It takes an AtomicalConsole object as a parameter and implements the execute method. The execute method takes an array of strings as input and", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "\n    def stop(self) -> None:\n        self.stopped.stop_check()\n        self.finished_adding.stop_check()\n        self.job_q.stop()\n        self.return_q.stop()\n\n    def get_files(self) ->", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "\n    for sensor in sensors:\n        sensor_name = sensor.name\n        sensor_type = sensor.type\n        sensor_class = getattr(sensor, sensor_type)\n        if sensor_class is not None:\n            api.add_resource(sensor_class,", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "\n        self.assertAlmostEqual(gps.airspeed, fdmexec.GetPropagate().GetVtrueKts())\n\nThis code is a test class that tests the GPS instrument. It compares the values returned by the GPS instrument with the values calculated from the FDMExec", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "   CMD_OPTION_INCLUDE_QUALIFIERS_GET_HELP_LINE,\n    CMD_OPTION_INCLUDE_QUALIFIERS_LIST_HELP_LINE,\n    CMD_OPTION_INCLUDE", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\t\n\tpublic String getHint() {\n\t\treturn hintServices.getHint();\n\t}\n}\n\n\nThe above code shows that the HintServices class is annotated with @Resource, indicating that it is injected by Spring. The HintServices class has dependencies on other Spring-managed", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                           logError(t.getMessage());\n                        } else {\n                            logError(t);\n                        }\n                    }\n                }\n            });\n        } finally {\n            setControlsEnabled(true);\n            operationInProgress = false;\n        }\n    }\n", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "\n    def run_e2e_flow_for_language(self, language, person_name, join_keyword):\n        # Create a new contact\n        contact = Contact.objects.create(name=person_name, phone_number=TEXTLOCAL_PHONENUMBER, language", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": "\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    // Initialize the fragments\n    FragmentManager fragmentManager = getFragmentManager();\n    FragmentTransaction fragmentTransaction = fragmentManager.begin", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "\ndef get_manifest_data(manifest_xml):\n    manifest_data = {}\n    # Extract manifest data\n    for node in manifest_xml.getElementsByTagName(\"manifest\"):\n        # Extract package name\n        package = node.getAttribute(\"package\")\n        # Extract application", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "   # 44018, section 10.1\n    # 4018, section 10.1\n    # 4018, section 10.1\n    # 4018, section 10.1\n    # 4", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\t\t# Create adjacency set\n\t\tif not np.all(v_lh[:,0] == v_rh[:,0]):\n\t\t\t\tprint(\"Error: vertex connectivity\")\n\t\t\tquit()\n\t\t\treturn\n\t\t# Create adj", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "       result.append(\" IS NULL\");\n    } else {\n      result.append(\" = \").append(exp.getRhsValue());\n    }\n    result.append(CLOSE_BRACKET);\n  }\n\n  public void visit(final Exp exp) {\n   ", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "       cacheService.storeCacheList(new CacheList(listName));\n        cacheService.addListener(new CacheListListener(listName));\n        cacheService.restart();\n      }\n    }\n  }\n\n  @FXML\n  public void deleteList(ActionEvent actionEvent", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "   def __init__(self, CallName, ReprName, Pt, PtFunc, Val, Len, LenFunc, Repr, Trans):\n        self.CallName = CallName\n        self.ReprName = ReprName\n        self.Pt = Pt\n        self", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                       ScreensHelper.createAggregationInfo(\n                                projectsService.getMetaPropertyPath(TimeEntry.class, \"overtime\"),\n                                ScreensHelper.getTimeEntryOvertimeAggregation(timeEntries, projectsService),\n                                ScreensHelper.getTime", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "           (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.DSA): DSAPub,\n        }\n\n    def parse(self, packet):\n        self.p = packet[0]\n        self.p_type", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "\n    self.board_type = ul.get_config(InfoType.BOARDINFO, self._board_num, 0, BoardInfo.BOARDTYPE)\n\n    @property\n    def supported_channels(self):\n        supported_channels = []\n\n        for channel", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "\n    def attach(self, value):\n        # check if the object is already attached\n        if self.references.get(value.classdef):\n            raise AAFAttachError(\"object already attached\")\n\n        # attach the object\n        self.references[value.classdef", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "\n            # Save the user's details\n            user = create_inactive_user(email, full_name)\n\n            # Send an email to the user\n            send_connect_email(site, 'request_invitation', user, form.cleaned_data['full_name'],", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "\n        await self.draft_interface.save_draft(draft)\n\n        await self.fetch_draft_for_channel(ctx.guild.id, ctx.channel.id)\n\n        print(draft)\n\n\n\n\n\n    @command(ali", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "   markets[name] = Bittrex(name)\n    markets[name].update_depth()\n    markets[name].update_depth()\n    markets[name].update_depth()\n    markets[name].update_depth()\n    ...\n\n\n\n", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "           if is_element_node(item):\n                yield item\n\n    else:\n        raise self.missing_name('self reference')\n\nSo the XPath1Parser class has a number of methods for parsing XPath expressions, including:\n\n* evaluate_expression()\n* evaluate_namespace", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "   DummySherpaServer server = new DummySherpaServer(10);\n    try {\n      Solutions solutions = helpExecuteQuery(server, 10);\n      Iterator<Map<String,RDFNode>> iter = solutions.iterator();\n      Assert.NotNull", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new TextExpander(expanderIndexReader);\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\treturn result;\n\t}\n}\n\n\n\n\nThe code above is", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                   // Log.e(MYTAG, \"使用MiPush推送\");\n                deviceMiToken = MiPushClient.getToken();\n                // Log.e(MYTAG, \"MiPush token: \" + deviceMiToken);\n                break;\n            default", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode)\n    {\n        this.server = server;\n        this.localNode = localNode;\n        this.bootstrapNode = bootstrapNode;\n    }\n\n    public void execute() throws", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "\n    if table_format:\n        table_fmt = table_format.format(numalign, stralign)\n\n    return output\n\ndef expanded_table(rows, headers):\n    rows = [utf8tounicode(row) for row in rows]\n    headers = [utf", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "       return words_api(token)\n\n\nThis code defines a Flask API with several endpoints:\n\n1. The home endpoint at `/` returns the Flask bootstrap template.\n\n2. The `/m/<id>` endpoint returns the movie details for a given IMDb ID.\n\n3", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tpublic TaskListByJQLActivity(Context context) {\n\t\tsuper(context);\n\t\tctx = context;\n\t}\n\n\t@Override\n\tpublic void onResume() {\n\t\tsuper.onResume();\n\t\tif (isDownloading) {\n\t", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "       self.assertIsNotNone(handle)\n\n    def test_create_event_name(self):\n        handle = CreateEvent(bManualReset=False, bInitialState=False, lpName=\"my_event\")\n        self.assertIsNotNone(handle)\n\n", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "       this.deployments = new SpringDeployments(restTemplate, root);\n        this.vms = new SpringVms(restTemplate, root);\n    }\n\n    public void start() {\n        // ...\n    }\n\n    public void stop() {\n        // ...\n", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   List<ParsedPath> parsedPaths = parserHolder.parse(currentAnnotatedElement);\n                    originatingElements.addAll(parsedPaths);\n                    return parsedPaths;\n                })\n                .collect(Collectors.toList());\n\n        for", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "\n    public Crawler(CrawlerConfig crawlerConfig) {\n        this.crawlerConfig = crawlerConfig;\n        this.pageFetcher = new PageFetcher(crawlerConfig);\n        this.pageDispatcher = new SimpleDispatcher(crawlerConfig);\n       ", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           actionPopupGroup.add(new AddKeyAction(this, \"Add a key\", \"Add a key\", AllIcons.General.Add);\n            actionPopupGroup.add(new AddValueAction(this, \"Add a value\", AllIcons.General.Add);\n            action", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "\n    public GuiSettingsChannel(ServerSettings settings) {\n        super(settings);\n        this.channel = settings.getChannel();\n        this.panel = new GuiPanel();\n        this.channels = new GuiScrollingPanel();\n        this.panel.addComponent(ch", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_SHOT_CODE:\n                return new BtnScreenShot();\n            case ConstantStr.FUNC_NAV_BACK_CODE:\n                return new BtnNavBar", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "       form.setTitle(Messages.configurationEditorActionAddWebModule);\n\n        // Create the table for the web modules\n        _webAppTable = toolkit.createTable(form.getForm(), SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       type = Type(TypeFormat(\"string\"))\n        type.name = \"my_type\"\n        type.value = \"my_value\"\n\n        self.assertEqual(\"my_type\", type.get_sample())\n\n    def test_type_get_sample_return_default", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "               new EventHandler<TagCommand>(TagCommand.class, TagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(new EventHandler<RemoveTagCommand>(RemoveTagCommand.class, this::queueEvent));\n        commandProcessor.addHandler(new EventHandler<SetStatus", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "       self.set_cluster_type( _cluster_type )\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self.set_cluster_location( _cluster_location )\n        return self\n\n    def set_datasegment_name", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "   query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'perms': 'read',\n        'frob': frob,\n    }\n    sign_flickr_query(query)\n    url = urlunparse(('http", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t} catch(FCPException e) {\n\t\t\t\t\tLogger.error(this, \"Caught FCPException while inserting message\", e);\n\t\t\t\treturn false;\n\t\t}\n\t\t}\n\t\tfinally {\n\t\t\t\tmessageStream", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "       # Get the condition symbolic expression\n        condition = self.parse_condition(condition_bytecode)\n        # Add the condition to the conditions\n        self._conds[condition] = condition\n        # Pop the condition from the stack\n        cond_stack_size -= 1\n      except", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "\n    //METHODS\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n        //Get active credit card\n        activeCreditId = getArguments().getInt(ExpenseManagerContract.CreditCardTable", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "\n    class CIPipelineManager(Manager):\n        def get_queryset(self):\n            return super().get_queryset().filter(ci_pipeline_status=True)\n\n    class LanguageSetManager(Manager):\n        def get_queryset(self):\n            return super", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\n\t}\n\nThe code above is a fragment of the RateBeer app's activity that displays a list of local places, a list of top 50 places, and a list of global places. The local places list is displayed in a separate tab. The top 50 places list is displayed", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "   def parse(self, ping_message: Sequence[str]) -> PingStats:\n        return self.__parser.parse(ping_message)\n\nThe code defines a PingParsing class that has a PingParser property and a PingStats property. The PingParser property is", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           // Load chat from server if not found in local DB or new chat has been generated but not returned by server yet.  This is the case when the chatId is 0.  In this case, the chat is not yet known to the local DB and the server has not yet returned the chatId. ", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\t}\n\nThe code is a Java implementation of a 3D game engine for the Cubeshaft game engine. It contains a game loop that updates the game state, renders the game world, and handles input. It also contains a number of classes for handling game logic, physics, and rendering.\n\n", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "\n    # If the user is not already signed in, sign them in\n    if not request.user.is_authenticated():\n        account = Account.objects.create_account(\n            service='facebook.com',\n            ident=f_user['id'],\n            display_name=f", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "       assertThat(qe, isStatement());\n\n        // query execution count\n        assertThat(ds, executionCount(3));\n        assertThat(ds, statementCount(3));\n        assertThat(ds, insertCount(3));\n        assertThat(ds, otherCount(3));", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "   }\n  }\n\n  private void uploadFinished() {\n    // If the upload was successful, show the uploaded files\n    if (successful) {\n      showUploadedFiles();\n    } else {\n      showErrorMessage();\n    }\n  }\n\n  private void", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "   merged_assembly_points = merge_greedily(assembly_points_by_sources, acyclic=args.acyclic, min_cw=args.c_merging_cw_min, max_cw=args.c_merging_cw_max)", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "       gyroscope_resource,\n        gyroscope_schema,\n        gyroscope_data = {\n            \"roll\": gyroscope.roll,\n            \"pitch\": gyroscope.pitch,\n            \"yaw\": gyroscope.yaw,\n            \"head", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "\n        fields={key.capitalize():value for key, value in config.items()},\n        msg_color=discord.Color.blue(),\n        inline=True)\n\n        return await ctx.send(embed=embed)\n\n    @staticmethod\n    async def get_", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (level.isInstalled()) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tshowConfirm(\n\t\t\t\t\t\tgetString(R.string.install_level),\n\t\t\t\t\t\tgetString(R.string.install_", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   protected WeeklyCaptionProvider weekCaptionProvider;\n\n    protected void setTimeFormat(String timeFormat) {\n        this.timeFormat = timeFormat;\n        this.timeFormatter = DateTimeFormatter.ofPattern(timeFormat);\n    }\n\n    protected void setDateFormat(String", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "       this.vms = new SpringVms(restTemplate, root, tasks, deployments);\n    }\n\n    public void start() {\n        // ...\n    }\n\n    public void stop() {\n        // ...\n    }\n\n    public void restart() {\n        //", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "   (signerId, keyId) -> Lists.newArrayList(new RsaSHA256Verifier(keyId));\n\n    locators = new VerifierProviders(hmacLocator, rsaLocator);\n\n    locatorsFromRuby = new VerifierProviders", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "\n    public MultiItemAdapter(Context context, List<T> data) {\n        this.mContext = context;\n        this.mDatas = data;\n        this.mItemViewDelegateManager = new ItemViewManager();\n    }\n\n    @Override\n    public ViewHolder onCreate", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "               } catch (IOException e) {\n                    e.printStackTrace();\n                    fail(e.getMessage());\n                }\n            }\n\t\t}\n\t}\n\t}\n}\n\n\n\n\n\n\nThe code above is a test class for the Rackspace CloudFiles client.", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "               }\n            });\n        }\n        }\n    }\n\n    }\n\n    @Override\n    public void onPlayerStateChange(int newState, int oldState) {\n        if (newState == PlayerState.PLAYING && oldState == PlayerState.PAUSED)", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "\n    @Bean\n    public static final class PatternsResult {\n        public static final int PAGE_SIZE =  = 10;\n        public final int page =  = 0;\n        public final int total =  = 0;\n        public final int totalSize =  =", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                       if (home.getType() == Home.Type.CARD) {\n                            home.setCardElevation(0);\n                        } else {\n                            home.setCardElevation(home.getCardElevation());\n                        }\n                        break;", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "       encoding = app_configs.get(Context.ENCODING, \"default\")\n\n    if typepy.is_empty_sequence(proxy):\n        proxy = app_configs.get(Context.PROXY, \"default\")\n\n    con = SQLiteTableCreator(\n", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "\n    def _getPlaylistID(self, item):\n        \"\"\" Match an item to a playlist and return the playlist ID. \"\"\"\n        for _item in self.items():\n            if _item.ratingKey == item.ratingKey:\n                return _item.playListID\n", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "       self.assertEqual(\n            _environment_to_string(Environment(u\"a=b\"),\n            u\"a=b\\0\")\n\n    def test_empty_environment(self):\n        self.Equal(\n            _environment_to_string(Environment()),\n            u", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "   result = cmd.Run(gopts, argv)\n\n    if result:\n      print(\"repo: error: %s\" % result, file=sys.stderr)\n      return 1\n\n    return 0\n\n    # If the command is a subcommand, return the", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               // 执行完成任务，设置结果\n                taskData.setResultData(task.getResultData());\n                taskData.setState(TaskData.STATE_SUCCESS);\n            } catch (Throwable e) {\n                // 执行任", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       await r.reject(Entry(Request(\"http://example.com\"), Response(404))\n\n    @async_test()\n    async def test_reject_404(self):\n        r = RejectStatusCode()\n        await r.reject(Entry(", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       //用户的学科\n        stuDept = split[2];\n        //用户的班级\n        stuClass = split[3];\n        //用户的班级名\n        stuClassName = split[4];\n", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "\n    def parse(self, text):\n        self.con.execute(\"show filter\")\n        self.con.execute(\"show qdisc\")\n\n        while self.con.execute(\"show filter\") and self.con.execute(\"show qdisc\"):\n            line = self.", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "           state[\"inventory\"] = inv\n        except AttributeError:\n            pass\n\n    def add_location_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try:\n            loc = obj.location     # type: ignore\n           ", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "  public Query visit(Ord4Search n, Query query) {\r\n    List<Occur> occurs = null;\r\n    if (n.f0.token.length() == 2) {\r\n      occurs = rfOpToOccur.get(n.f0.token.substring(", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidator();\n\t\tthis.cleaningFolder = false;\n\t}\n\n\tpublic void setSurveyName(String surveyName) {\n\t\tthis.surveyName = surveyName;\n\t}\n\n\tpublic void generate() {\n", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "       // Load snapshot file and transaction log files.\n        // Load transaction log files.\n        // Load transaction log files.\n        // Load transaction log files.\n        // Load transaction log files.\n        // Load transaction log files.\n        // Load transaction log files.\n        // Load transaction log files", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "\n    def get_time_error(self):\n        return self.time_manager.get_time_error()\n\n    def get_time_stats(self):\n        return self.time_manager.get_time_stats()\n\n    def get_time_stats_from_", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "       cursor.close();\n\n        // Test the content provider query\n        Cursor movieCursor = mContext.getContentResolver().query(\n                MovieColumns.CONTENT_URI,\n                null,\n                null,\n                null,\n                null\n        );\n\n        // Make sure we", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "       Document(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).Show()\n\n    def EvtGenerationConge(self, _):\n        Document(self, CongeInscrit(self.inscrit, self.current_", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "       parent = ElementTree.Element('element')\n        child = ElementTree.Element('child')\n        parent.append(child)\n        self.assertEqual(parent.children, [child])\n        self.assertEqual(parent.child, child)\n\n        parent = ElementTree.Element", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\t// ...\n\t}\n\n\t@Override\n\tpublic void onLocationChanged(Location location) {\n\t\t// ...\n\t}\n\n\t@Override\n\tpublic void onProviderDisabled(String provider) {\n\t\t// ...\n\t}\n\n\t@Override\n\t", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    m", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "\n    def do_show_ip_version(self, *args):\n        self.write_line(\"Cisco IOS XE Software (C2960) Version 15.2.1.1E1.1.1.1.1.1.1.1", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": "   assert config.GPS.L1.INDEX == 0\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration test\n  '''\n  config = selectOutputConfig('high_rate')\nNext line of code:\n    assert config.GPS.L1.INDEX", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "\n        resposta = RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n\n        # NOTA: Se não foi lançada nenhuma exceção, assume que a consulta de ultima\n        # sessão fiscal foi bem su", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "   ax.set_xlabel('Interaction parameter')\n    ax.set_ylabel('Predicted value')\n    ax.set_title('Predicted interaction parameter')\n\n    return ax\n\nThe code above is a multiplot function that plots predicted values from the database for a given interaction parameter", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "\n    # ...\n\n\nThe code above defines a Flask API that exposes the following endpoints:\n\n* /fdm: The flight dynamics model data\n* /fdm/accelerations: The accelerations data\n* /fd/velocities: The velocities data\n*", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "\n    def _write_utt2spk(self, utterance: Utterance):\n        # ...\n\n    def _write_utt2spk(self, utterance: Utterance):\n        # ...\n\n    def _write_utt2spk(self, utterance", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "\n    private CameraSource mCameraSource;\n    private CameraPreview mPreview;\n    private GraphicOverlay mGraphicOverlay;\n    private OcrDetector mOcrDetector;\n    private ExpenseManagerContract.ExpenseTable.ExpenseTable _expenseTable;", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\n}\n\nSo in summary, the Util class provides references to other util classes like IOUtil, CollectionsUtil, ClasspathUtil, ExceptionsUtil, LogUtil, MathUtil, and MiscUtil. These util classes are used throughout the codebase.\n\nThe Util class is a utility class that provides", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       List<ServerConfiguration> serverConfigurations = new ArrayList<>();\n        for (ServerConfiguration serverConfiguration : serverConfigurations) {\n            if (serverConfiguration.getLabel().equals(mongoTree.getLabel())) {\n                serverConfigurations.add(serverConfiguration);\n            }\n", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\tFluent header = Fluent.h1(\"Header\", \"Header\");\n\t\tFluent input = Fluent.input(\"Input\", \"Input\");\n\t\theader.add(input);\n\n\t\t// Footer with Footer line of code:\n\t\tFluent", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "\n            }\n        });\n    }\n\n        }\n\n    }\n\n    }\n\n    private void hideSeekbar() {\n        zoomHandler.post(new Runnable() {\n            zoomBar.setProgress(0);\n            zoomBar.setEnabled(false);\n", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "\n    private void showScroller() {\n        mFastScroller.showScroller(mRecyclerView);\n    }\n\n    private void hideScroller() {\n        mFastScroller.hideScroller(mRecyclerView);\n    }\n\n    private void showBubble", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   query = Search(\n        engine=engine,\n        model=model,\n        index=index,\n        key=key,\n        filter=None,\n        projection=\"all\",\n        consistent=True,\n        forward=False\n    )\n    assert query.is_valid()\n", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCActivitySet gcActivitySet, GCActivity gcActivity) {\n        // do nothing\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace, int id, String gcActivityName) {\n        // do nothing\n    }\n\n", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "           # Property endpoints\n            '/properties': RestAppPropertys\n\n        }\n\n        self.server.add_resource(RestApi)\n\n        self.server.run(debug=True)\n\nThis is a Flask RESTful API with the following endpoints:\n\n*", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "\n        self.tree_view = tree_view\n        self.tree_view.set_model(self.df_manager.get_file_model())\n        self.tree_view.set_root_model(self.df_manager.get_root_model())\n        self.", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "           MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE\n        )\n    )\n\n    group.add_argument(\n        \"--reorder\",\n        dest=\"reordering_rate\",\n        default=0,\n       ", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "\n    public ChatTray(GuiPanel parent) {\n        super(parent);\n        this.setBackground(Color.WHITE);\n        this.setSize(new Dimension(200, 200));\n        this.setModal(MODAL);\n        this", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "       public void onDateClicked(Date date);\n     */\n    }\n\n    public void onDateClicked(Date date) {\n        // ...\n    }\n}\n\n    public void onDateLongClicked(Date date) {\n        // ...\n    }\n}\n", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "       self.set_db_type(db_type)\n\n    def set_session_token(self, token):\n        self.set_session_token(token)\n\n    def set_session_id(self, session_id):\n        self.set_session_id(", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "           Namespace namespace = namespacesHub.get(packet.getNsp());\n            namespace.onUpgrade(packet.getUpgrade());\n            break;\n        }\n\n        case MESSAGE: {\n            // handle message packet\n            Namespace namespace = namespacesHub.", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private StarItem star;\n\n    private StarTask starTask;\n\n    private BookmarkTask bookmarkTask;\n\n    private RepoTask repoTask;\n\n    private CommitTask commitTask;\n\n    private ProgressBar progressBar;\n\n\n    @Override\n    public View", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\t\n\t// Preprocessors\n\t\n\t// Preprocessors\n\t\n\t// Preprocessors\n\t\n\t// Preprocessors\n\t\n\t// Preprocessors\n\t\n\t// Preprocessors\n\t\n\t// Preprocessors\n\t\n\t// Preprocessors\n", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<KV<GCPResource, GCPResourceState>> liveProjects =\n        pipeline.apply(\"Read live data\", Read.from(GCPProject.getProjectsApiStub(org));\n    // Convert projects to GCPResourceState objects.\n    PCollection<KV<", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "       return MyModel()\n\ndef test_model_creation(session):\n    # Test that the model is created correctly\n    assert session.model.name == \"MyModel\"\n    assert session.model.id.name == \"id\"\n    assert session.model.range.name ==", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "               self._def_reader = MeanPoolCombiner(def_num_input_words, emb_def_dim, dim, vocab,\n                                       cache=self._cache)\n\n        self.children = children\n\n    def apply(self, application_call, word_emb", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "   private boolean _isTyping;\n    // Guarded by _lockObject.\n\n    public ChatManager(ChatManagerCallback callback)\n    {\n        _delegate = callback;\n    }\n\n    public void start()\n    {\n        // Guarded by _lockObject.", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_video_pick);\n        // ...\n\n        // ...\n\n        // Initialize the data\n        dataT = new HashMap<>();\n        data", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInRight(RotateInRight.class),\n    RotateOut(RotateOut.class),\n    RotateOutDown(RotateOutDown.class),\n    RotateOutRight(RotateOutRight.class),\n    RotateUp(RotateUp.class),", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "           return self.get_context_data(form, **kwargs)\n\nclass UserCreation(UserBase):\n    form_class = UserFormCreacion\n    success_message = \"Usuario creado con éxito.\"\n\nclass UserEdicion(UserBase):\n    form_", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "\n    public static Fog convert(Fog fog, GameObject go, Map<String, Asset> assets) {\n        FogComponent fogComponent = new FogComponent(go, Shaders.INSTANCE.getFogShader());\n        fogComponent.setFog(fog);\n", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\t\n\tpublic void close()\n\t{\n\t\tif(this.handle != null) this.handle.close();\n\t}\n}\n\nThe code is a Java implementation of the Loom file format reader. It reads a Loom file and returns an IntArray64 object representing the data", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "\n    ActorDetailsComponent plus(ActorInfoModule actorInfoModule);\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorDetailsComponent plusActorDetailsComponent();\n}\n\n\n\nThe above code shows how the different components are", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t\t\tif (vals.size() > 0) {\n\t\t\t\t\t\tview.setProgress(vals.keySet().toArray(new String[vals.size()));\n\t\t\t\t}\n\t\t}\n\t\t} catch (SocketViewException", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "\n    def get_ci_pipelines(self, fields=None, packages=None, platforms=None, releases=None, uuuids=None, pipeline_ids=None):\n        ...\n\n    def get_ci_pipeline_config(self, pipeline_id):\n       ", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tlogManager\n\t\t\t\t.logInfo(this,\n\t\t\t\t\t\t\"Building a wrapper from the service discovery file: \"\n\t\t\t\t\t\t+ serviceDiscoveryInfo.getServiceDiscoveryUrl() + \", \"\n\t\t\t\t\t", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "   self.tree = root\n    self.root = root\n\n  def __repr__(self):\n    return 'Constraint(root = %s)' % repr(self.root)\n\nSo in summary, the `Ref` class is a simple reference class that can be used to represent a reference", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "\n  public Tropo() {\n    super();\n    setName(\"tropo\");\n  }\n\n  public Tropo(String baseUrl) {\n    this.baseUrl = baseUrl;\n  }\n\n  public void setBaseUrl(String baseUrl) {\n    this", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\tpublic JoinResult addToRound(String round) {\n\t\tJoinResult result = round.addPlayer(this);\n\t\tif (result.isSuccess()) {\n\t\t\t// Update the player's arena\n\t\tthis.arena = round;\n\t\t//", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 0), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1), [1])\n    assert_array_equal(fold([MIN_HASH_VALUE], 2),", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "\n    return result\n\nThe code is a XPath expression evaluator for the XPath 3.0 language. It defines various functions for performing mathematical operations like sin, cos, tan, asin, acos, atan, atan2, format-integer, etc. It also defines formatting functions for", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item.data.name.startswith(\"Sketch\"):\n\t\t\t\tdefault_flags |= Qt.ItemIsEditable\n\t\t\telse:\n\t\t\tdefault_flags |= Qt.ItemIsReadOnly\n\t\treturn default_flags\n\n", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "       versions[version1.name] = version1\n        versions[version2.name] = version2\n\n        response = Hydrator(version1, versions, []).hydrate_object(object_dto, object1)\n        response = Hydrator(version2", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "        PrimitiveReader reader = new PrimitiveReader(catBytes);\n        \n        //TODO: B, for multi test we really need to have it reading from multiple ring buffers.\n        PrimitiveReader reader = new PrimitiveReader(catBytes);\n        \n        //TODO: C,", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": " to_map_and_back(MFO, Message(1))\n  to_map_and_back(TFO, TCXOPoly(1))\n  to_map_and_back(SFO, TCXOSine(1))\n  to_map_and", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "               contains(\"_source.id\", searchAllResponse));\n    }\n\n    }\n}\n\nThe test class ElasticsearchSinkCswMappingIT tests the mapping between the source records and the sink records. It loads source records from a file, maps them to sink records using the CswToBuilder", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "           (True, PubKeyAlgorithm.ElGamal): ElGPub,\n            (True, PubKeyAlgorithm.ElGamalEncrypt): ElGPub,\n            (True, PubKeyAlgorithm.ElGamalEncrypt): ElGPub,\n            (True,", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tGeoJSONWriter.getInstance().registerGeoJSONWriter();\n\t}\n\n\tpublic void registerServices() {\n\t\t// Registers the services available at\n\t\t// Load the services", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                   res = Schema.search(\n                        context,\n                        new ExtMap()\n                            .mput(Schema.InvokeKeys.ENTITY, context.get(Schema.InvokeKeys.ENTITY))\n                            .mput(Schema.InvokeKeys.ENTITY_KEYS", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "   url(r'^users/', users_list, name='users-list'),\n    url(r'^users/(?P<user_id>[-\\w]+)/$', new_user, name='new-user'),\n    url(r'^users/(?P<user_", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                       }\n                    }\n                });\n            }\n                startActivityForResult(new Intent(PlaySettingsDialog.INTENT_CREATE_PLAY_SETTINGS), 0);\n            }\n        }\n    }\n\n    private void startLearnActivity() {\n", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   private SwipeLayout swipeLayout;\n    private Handler handler = new Handler(Looper.getMainLooper());\n    private Runnable runnable = new Runnable() {\n        @Override\n        public void run() {\n            swipeLayout.setRefreshing(true", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       # initialize block image\n        # note: must do this before updateBuffImg();\n        for  img in obj.getBlock().getBlockImages():\n            new_img = BlockImage(\n                img.url, \n                img.location, \n                img.icon, \n", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "       result = self._find_preimage(d1, d2)\n        assert result.found\n        assert result.i == d1.val\n        assert result.j == d2.val\n\nThis test case is skipped because the preimage function is not implemented for the given input values", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic static NodeTransformer getTransformer(Node node, DiscriminativeOracle oracle) {\n\t\t\tNodeTransformer transformer = new ConstantTransformer(oracle, getMultiAlternationRepetitionConstantNodes(node));\n\t\t\tif(node.getChildren().size", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\t\n\t}\n\n\tpublic void onEnable() {\n\t\t// Add the commands\n\t\tcommands.add(new CommandHelp());\n\t\tcommands.add(new CommandOpen());\n\t\tcommands.add(new CommandClose());\n\t}\n\n\tpublic void onDisable", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "       String challenge = doc.getAttributeValue(\"data\");\n        challenge = PacketParserUtils.unescape(challenge);\n        Challenge challenge = new Challenge(challenge);\n        packet = new Challenge(challenge);\n        return packet;\n    }\n\n    private void parseSuccess(Element", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "\n# Test HightCipher\nhight = HightCipher(HightKeySchedule(0x000010203, 0x72612C5, 0x000000000000000", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "\n    private SongAdapter mAdapter;\n\n    private FastScroller mFastScroller;\n\n\n    private int mCurrentPosition =  = 0;\n\n    private int mMaxPosition =  = 0;\n\n    private int mCurrentPosition =  = 0;\n", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "           // Remove listener from previous effect\n            if(mSelectedEffect != null) {\n                mSelectedEffect.removeListener(this);\n            }\n            // Set new effect as selected effect\n            mSelectedEffect = effect;\n            mParameterListAdapter.notifyDataSetChanged();\n            mParameterList", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "       Bit('ESM', ReprName='ESM Information', Pt=4, BitLen=4, Repr='hum'),\n        Bit('ESM_Cause', ReprName='ESM Cause', Pt=8, BitLen=4, Repr='hum'),\n       ", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "           // Update the artist's tags\n            Artist artist = (Artist) getArguments().getParcelable(PARAM_ARTIST_ID);\n            artist.setTags(getArguments().getString(PARAM_ARTIST_NAME));\n            artist.setAlbumCount(getArguments", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "\n    def _load_corpus_from_directory(self, directory: str) -> None:\n        self.corpus_directory = directory\n        self.corpus_output_directory = os.path.join(directory, \"corpus\")\n        self.audio_directory = os.", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\tpublic boolean addUser(String user) {\n\t\treturn UserManagement.addUser(user);\n}\n\nThe above code is a Java web service implementation of the REMITT protocol. It provides methods for adding users, retrieving users, retrieving keys, and retrieving eligibility. The", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "   Observable<ApiPlan> apiPlan(@Query(Constants.KEY) String apiKey);\n\n    @GET(\"api-info\")\n    Observable<ApiPlan> apiPlan(@Query(Constants.KEY) String apiKey);\n\n    @GET(\"api-info\")\n    Observable<ApiPlan", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   public void visit(LogMessage message) {\n      if (message.getLevel() == LogMessage.Level.WARNING) {\n        // Ignore warnings\n        return;\n      }\n      if (message.getLevel() == LogMessage.Level.SEVERE) {\n        //", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   # ...\n\n  def test_gammatone_example(self, freq):\n    # ...\n\n  def test_phon2dB_example(self, freq):\n    # ...\n\n  def test_stream_example(self, freq):\n    #", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "\n    return Sequence(seq)\n\ndef read_file_file_meta(fp):\n    # Read the file meta information\n    file_meta = FileMeta(fp)\n    file_meta.read()\n    return file_meta\n\ndef read_file_header(fp):", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   for (ICommentProcessor commentProcessor : commentProcessors) {\n      commentProcessor.commit(document, proxyBuilder);\n    }\n  }\n\n  public void commit(WordprocessingMLPackage document) {\n    for (ICommentProcessor commentProcessor : commentProcessors) {\n      commentProcessor", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   private void updateSearchCriteriaDescription() {\n        searchCriteriaView.removeAllViews();\n        if (searchCriteria.isEmpty()) {\n            searchCriteriaView.setVisibility(View.GONE);\n        } else {\n            for (final SearchCriteria criteria : searchCriteria", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "   def parse(self, packet):\n        super(NotationData, self).parse(packet)\n        self.flags = packet[:2]\n        del packet[:2]\n\nclass SignatureV4(Signature):\n    __typeid__ = 0x15\n\n", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "\n        self.chum = self.chumopen\n        self.chum.addMessage(lexmsg)\n        self.chum.setLastMessage(lexmsg)\n        self.chum.setLastMessageTime(time.now())\n        self.chum.setLastMessage", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "\ndef check_arg(arg, type_, env):\n    arg = check(arg, env)\n    with env.errors.location(arg.location):\n        unify(arg.__type__, type_)\n    return arg\n\ndef check(arg, env):\n    if isinstance", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "   if isinstance(value, GregorianMonth):\n        return GregorianMonth(value.month, value.tzinfo)\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonth.fromstring(value.value)\n", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "   # Initialize the feature matrix\n    feature_matrix = np.zeros((len(feature_candidate_models), len(feature_candidate_models[0]))\n\n    # Initialize the model coefficients\n    model_coefficients = np.zeros((len(feature_c", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "\n    private void pausePlayerAndShowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, MediaModel adMedia) {\n        // ...\n    }\n\n}\n\nSo in summary, the VpaidState class is a state that transits to the AdPlayingState", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 7 || type == 0) {\r\n            ProximitySensor.flushDBCache(deviceID);\n        }\n        if(type == 8 || type == 0)", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   Call<SearchSuggestionResponse> getSearchSuggestions(@QueryMap Map<String, String> serviceIds, @Query(\"tag\") String tag, @Query(\"limit\") @IntRange(from = 1, to = 50) Integer limit);\n\n    @GET(\"gifs", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "           raise InvalidStream(\"{!r} does not have a stream\".format(model))\n        return Stream(model, position)\n\n    def get_stream(self, model, position):\n        # noinspection:\n        # ...\n\n        # ...\n\n        # ...\n\n", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "\n    def predict(self, data_set: DataSet):\n        predictions = self.run(data_set)\n        return predictions\n\nThe code above defines a Learner class that can be used to train and evaluate a learner on a data set. The Learner class has the following methods:", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\t\n\t@Autowired\n\tprivate ChallengeServices challengeServices;\n\t\n\t@Autowired\n\tprivate SubmissionServices submissionServices;\n\t\n\t@Autowired\n\tprivate CountryServices countryServices;\n\t\n\t@Autowired\n\tprivate BannedIpServices bannedIpServices", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "\n    def __init__(self, graph, isolation_level=READ_COMMITTED):\n        self.graph = graph\n        self.objects = {}\n        self.variables = {}\n\n        if isolation_level == Batch.REPEEPEATABLE_READ:", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "       decoder = StandardRNN(architecture=self.decoder_architecture,\n                           inputs=decoder_inputs,\n                           initial_state=None,\n                           keep_prob=self.keep_prob,\n                           input_noise=self.decoder_noise", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "   for relstream in RELSTREAM_SLUGS:\n        all_platform_slugs.append(relstream)\n\nThis code defines a LanguageSet model with a lang_set_id, lang_set_name, lang_set_slug, and lang_set_color.", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   public boolean add(SelectorGroupNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorSegmentNode node) {\n       ", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n}\n\n\tpublic static h2(Attribute... attributes) {\n\t\treturn H2(attributes);\n}\n\n\tpublic static h3(Attribute... attributes) {\n\t\treturn H", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       final NiceTable table = new NiceTable(benchRes.getResults());\n        table.print(out);\n    }\n\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "     visitor.visit(node.data.edges)\n      return visitor.edges\n\n    def get_loop_parent(node):\n      return visitor.get_parent_loop(node)\n\n    def get_loop_edges(node):\n      return visitor.get_", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.k, this.m);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t\n\t@Override\n\tpublic void train() {\n\t\t", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "\n    def int_to_roman(num: int) -> str:\n        return int_to_words(num, 10)\n\nThis code defines a function int_to_roman that takes an integer num and returns a string representation of the integer in words. The function uses the", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "\n    }\n};\n};\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        // Resume the typing timer\n        if (mTypingTimer != null) {\n            mTypingTimer.start();\n        }\n    }\n", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\n\t// PostProcessing\n\tprivate XFORMSInsertPostprocessor xformsInsert = new XFORMSInsertPostprocessor();\n\tprivate XFORMSInsertPostprocessor xformsInsertWelcome = new XFORMSInsertPostprocessor();\n\tprivate XFORMSInsertPostprocessor xformsIdentification = new", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "       DocumentDialog(self, ReleveSIEJModifications(site, annee).ShowModal())\n\n    def OnGenerationFacturation(self, _):\n        site = self.GetSelectedSite()\n        date = str2date(self.facturation_date.GetValue", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "           H[i, i] = dot(H_trans, H_rot)\n            H[i, j] = dot(H_trans, H_rot)\n            H[j, i] = dot(H_trans, H_rot)\n            H[i, j] =", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "       // Display the queued project\n        view = getView();\n        view.setVisibility(View.VISIBLE);\n        name.setText(queuedProject.getProjectName());\n        author.setText(queuedProject.getAuthor());\n        gauge_description.setText(queuedProject", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "       });\n    }\n\n    }\n\n    private void initializeCurrencies() {\n        // Load the currency registry\n        CurrencyRegistryModule currencyModule = new CurrencyRegistryModule();\n        currencyModule.loadCurrencies(currencyManager);\n        // Load the currency service\n        currency", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "       return {k: v for k, v in prior.items() if k not in ['name']}\n\n    def _fit(self, parameters, datasets, approximate_equilibrium=False):\n        # ...\n\n    def _prior_normal(self, parameters):\n        #", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "     return Expr.fromConst(arg)\n    else:\n      return Expr.fromRef(arg)\n  else:\n    return Expr.fromUndef(arg)\n\ndef convert_ast_expression(ast_node):\n  \"\"\"\n    Returns a new Expr node", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tpublic ClientMaster(String[] args) {\n\t\tsuper(args);\n\t\tres = new ResourceLoader(new File(\"res/\");\n\t}\n\n\tpublic void update() {\n\t\tif (disposed) return;\n\t\t// ...\n\t}\n\n\tpublic", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   (PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMP:\n                    TempSensorView tview =", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tLong reference() {\n\t\tSet<Long> set = new HashSet<>();\n\tAtomicLong aLong = new AtomicLong();\n\tjdbcTemplate.query(\"SELECT AUTHOR.*, BOOK.* FROM AUTHOR LEFT OUTER JOIN BOOK ON AUTHOR.ID = BO", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\n\tpublic void executeServer(SQLTranslation exp, ForestReader in, ForestWriter out) {\n\t\t// ...\n}\n\nSo in summary, the ForestReader and ForestWriter interfaces are used to read and write data from/to a forest, while the SQLBatch interface is used to execute SQL queries", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "       # 执行动态分析\n        dynamic_analyzer.run_dynamic_analysis(adb)\n\n        # 执行动态分析后，检查是否有漏洞\n        check_for_vul", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "   Genotype parseGenotype(InputStream inputStream);\n\n    // ...\n}\n\nThe code is a Java client for the 23andMe Personal Genome API. It provides a set of classes to represent the data returned by the API. The client uses the 23andMe API", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "               Symbol.typed(bar_type, 'bar'),\n            ]),\n        ]),\n        {'inc': inc_type},\n    )\n\ndef test_union():\n    inc_type = Func[[IntType], IntType]\n    union_type = Union[IntType", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "       // ... perform application logic with database ...\n\n        PreparedExecution pe = ds.getFirstPreparedStatement();\n\n        assertThat(pe, prepared(3);\n        assertThat(pe, statement(is(\"...\"));\n        assertThat(pe, statementCount(3);\n", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\nThis code is a Python script for a GUI application that allows the user to create and edit 3D sketches and drawings. The user can create and edit sketches using the \"Create Sketch\" and \"Add Sketch\" menu items. The user can also add parts to the sketch using the \"Add", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                           return new NotFoundException(cause);\n                        default:\n                            return new ApiException(cause);\n                }\n            }\n            return null;\n        };\n        mAdapter = new RestAdapter.Builder()\n                .baseUrl(BASE_URL)\n                .", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\n\t\tregisterRenderer(Token.class, new DefaultTokenRenderer());\n\t\tregisterRenderer(ErrorEntry.class, new DefaultErrorHandler());\n\t\tregisterRenderer(NamedRenderer.class, new DefaultNamedRenderer());\n\t", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new UpperCaseFacetLabelFactory(labelFactory);\n\t}\n\treturn labelFactory;\n}\n\nThe code above is a Java implementation of a search configuration file reader for the AlvisIR search engine. It reads configuration elements from an XML file and creates search configurations based", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "\nThis is a very large Django project with many views, models, and URLs. The above code is just a small excerpt of the project.\n\nThe project uses Django REST framework and Django REST framework's built-in views and templates. The views are decorated with Django's @api_view", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                       startActivity(intent);\n                    } else if (bitmap != null) { // If the image is a wallpaper, show the wallpaper preview dialog.\n                        showWallpaperPreviewDialog(bitmap);\n                    }\n                }\n            } else {\n                if", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "   account = account_for_vimeo_id(access_token)\n    account.save()\n\n    return HttpResponseRedirect(reverse('home'))\n\ndef account_for_vimeo_id(access_token):\n    # Get the user ID from the access token\n   ", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "\n                # Compute the pointing direction and the vignetting and extinction loss for the mean location\n\n                # Compute the pointing direction\n                direction = np.arctan2(y_mean - x_mean)\n\n                # Compute the vignetting and extinction loss\n", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   grid = np.linspace(data[:,0].min(), data[:,0].max(), density)\n\n    # Initialize posterior and marginal distributions\n    posterior = np.zeros(shape=(grid.shape[0], grid.shape[1])\n    marginals = np.zer", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           Board.this.rollDices();\n            Board.this.doubleDices();\n          }\n      }\n    });\n    });\n    rollBtn.setX(getX() + (board.getWidth() - rollBtn.getWidth()) / 2);\n    rollBtn.", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "       for path in ElementTree.iter_paths(root):\n            print(path)\n\nExpected output:\n['/a', '/a/b1', '/a/b1/c1', '/a/b1/c2', '/a/b2', '/a/b2", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "\n    def test_detect_soft404(self):\n        self.rule.set_content_hash(self.content_hash)\n        self.rule.set_content_sample(self.content_sample)\n        self.rule.set_content_simhash(self", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "   cfe = CFeVenda(\n            CNPJ=_opcao('--cnpj-ac'),\n            signAC=_opcao('--assinatura-ac'),\n            numeroCaixa=_opcao('--numero-caixa'),\n            emit", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "   List<User> parseUsers(InputStream inputStream);\n\n    // ...\n}\n\nSo in summary, the code is a Java client for the 23andMe Personal Genome API. It provides classes for representing personal genomes, genotypes, haplogroups, traits, etc", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           this.client.send(req);\n        } catch (IOException ioe) {\n            System.out.println(\"Failed to send signature request: \" + ioe.getMessage());\n            ioe.printStackTrace();\n        }\n    }\n}\n\n    private byte[] digest(byte", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\nThis code defines a DocumentModelItem class that represents a document object in the document. It has properties like name, data, icon, and children. It also has methods like get_child_by_name, get_data, and data_changed. It also has a data property that holds the actual data object", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           // ...\n        }\r\n    }\n\n    }\n\n    public static void flushAllSensorCaches(String deviceID)\r\n    {\r\n        flushSensorCache(1, deviceID); // Accelerometer sensor cache flush\n        flushSensorCache(2, deviceID); //", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\n    public Team(TeamSummary teamSummary, List<String> roster) {\n        this.teamSummary = teamSummary;\n        this.roster = roster;\n    }\n\n    public TeamSummary getTeamSummary() {\n        return teamSummary;\n    }\n\n    public", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "       AppliveryFeedbackUseCase.INSTANCE.sendFeedback(userFeedback);\n    }\n}\n\nThe code above is a part of the Applivery SDK library for Android. It provides a set of classes and interfaces for handling user feedback and permissions. The key classes are:\n\n", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "           if consistent:\n                request[\"ConsistentRead\"] = True\n            else:\n                request[\"ConsistentRead\"] = False\n\n            response = self.session.get_item(table_name, key, **request)\n\n            if response[\"Item\"] is None:\n                raise Miss", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "               print('{0} - {1} - {2}'.format(fingerprint, description, created_at))\n            else:\n                print('{0} - {1}'.format(fingerprint, description))\n\n    async def get_key(self, key_id", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, Component", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "\n    def __init__(self, *args, **kwargs):\n        super(ClienteSATLocal, self).__init__(*args, **kwargs)\n\n    def __str__(self):\n        return \"ClienteSATLocal\"\n\n    def __repr__(self):\n", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "       self.assertEqual(node_document_uri(self.elem), self.elem.getroot().getroot().getroot().getroot().getroot().getroot().getroot().getroot().getroot().getroot().getroot().getroot().getroot().getroot().getroot().", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   for (CalendarItem item : items) {\n                        sorted[i] = item;\n                        i++;\n                    }\n                    break;\n\n                case START_DATE_DESC:\n                    for (CalendarItem item : items) {\n                        sorted[i", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "           self.logger.error(f\"Error initializing training: {e}\")\n            self.training_complete = False\n            return\n\n    def _trainer_initialization(self) -> None:\n        \"\"\"\n        Initialize the trainer\n\n        Parameters\n        ----------\n", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "\n    public OAuth2Client(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient) {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.sessionController = sessionController;\n       ", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "\n    public SpringDirectorClient(RestTemplate restTemplate, URI root, Info info, Releases releases, Stemcells stemcells, Deployments deployments) {\n        this.restTemplate = restTemplate;\n        this.info = info;\n        this.releases = releases;", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "\n    public void onFittingServiceStateUpdated(FittingConnectionState state, FittingConnectionManagerState fittingConnectionState)\n    {\n        synchronized (_lockObject)\n        {\n            if (state.getState() == FittingConnectionState.NOT_CONNECTED)\n            {", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand();\n    }\n\n    protected SvnCommand getCheckoutCommand()\n    {\n        return new SvnJavaCheckOutCommand();\n    }\n\n    protected SvnCommand getRemoveCommand()\n    {\n        return new SvnJavaRemoveCommand();", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   public void drawComponent(int mouseX, int mouseY) {\n        super.drawComponent(mouseX, mouseY);\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "         // ...\n          // ...\n          // ...\n          // ...\n          // ...\n          // ...\n          // ...\n          // ...\n          // ...\n          // ...\n          // ...\n          // ...\n          // ...\n          // ...\n          // ...\n          // ...\n         ", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "\n    };\n\n    public void load() {\n        for (Class<? extends Module> module : moduleClasses) {\n            try {\n                plugin.getServer().getServer().getPluginManager().registerEventHandler(module.getEventHandler());\n            }\n        }\n    }\n}", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "   public static DownloadQueue newDownloadQueue() {\n        return new DownloadQueue(3);\n    }\n\n    public static DownloadQueue newDownloadQueue(int threadPoolSize) {\n        return new DownloadQueue(threadPoolSize);\n    }\n}\n\nThe above code is a sample implementation of", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " public void init(Config config) {\n    // ...\n    // ...\n    // ...\n    // ...\n    // ...\n    // ...\n    // ...\n    // ...\n    // ...\n    // ...\n    // ...\n    // ...\n    // ...\n    // ...", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "   private Set<String> parseQuerySetConfigTag(Element element) {\n        Set<String> querySet = new HashSet<>();\n        NodeList nodeList = element.getChildNodes();\n        for (int i = 0; i < nodeList.getLength(); i++) {\n           ", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "\n        print('After Scanner Stauts: ')\n        print('Len L: ',len(L))\n        for li in L : print('----> ',li)\n        print('Sid:', S['sid'])\n        print('Ret:', ret)\n\n        return L\n", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "           left_foot_task = ContactTask(\n                self.robot, self.robot.left_foot, self.cur_stance.left_foot,\n                weight=swing_weight)\n        self.robot.ik.add(left_foot_task)\n        if", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "\n    BvNot, BvNeg, BvNot, Extract, Repeat, Ite\n\n\ndef test_op(op):\n    x = Constant(0b100000000000000, 8)\n    y = Constant", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\taOutput.writeInt16(SegmentMarker.DQT.CODE);\n\t\t\taOutput.writeInt16(aJPEG.mQuantizationTableId);\n\t\t\taOutput.writeInt16(aJPEG.mHuffman", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "           // ...\n        }\n    }\n    }\n}\n\nThe code above is a Java class that provides a GUI for exporting lastschriften (last payments) from a NamiBeitrag (NamiBeitrag) application. The class has methods to create and update lastschrif", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "\n    def __init__(self, log_path: str, dictionaries: List[str], text_int_paths: Dict[str], word_boundary_paths: Dict[str], ali_paths: Dict[str], model_path: str, pron_paths: Dict", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       LoreProperties properties = PlayerHandler.getCollectedLore(entityPlayer).getLore();\n        properties.addLore(key);\n        PacketSyncLore.updateLore(entityPlayer);\n    }\n}\n\nSo in summary, the PacketSyncLore packet", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "   private static final String USER_SUMMARY_DATE_FORMAT = \"dd MMM yyyy\";\n\n    private final static String USER_SUMMARY_DATE_FORMAT = \"dd MMM yyy\";\n\n    private final static String BUDGET_SUMMARY", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n}\n\nThe code is a collection of utility classes and methods for various tasks like string manipulation, file I/O, math, and more. It also includes references to other utilities like CloudUtil, CollectionsUtil", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "\n    public class FadingOut extends BaseViewAnimator {\n        @Override\n        public void prepare(View target) {\n            final float horizontalCenter = mHorizontalCenter;\n            final verticalCenter = mVerticalCenter;\n            final int distance = (int) mSlideLength;\n            final", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if check:\n        problem.add_assertion(bv2pysmt(ch.ch_weight, boolean=True))\n\n    if verbose_level >= 3:\n        smart_print", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "           h5 =  LocalHost5\n            h6 =  LocalHost6\n        return [h1, h2, h3, h4, h5, h6]\n\n    def test_hosts_container_get_hosts(self):\n        self.hosts = HostsContainer(", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "           return self.get_tc_command(command)\n\n    def get_command_history_list(self):\n        return [\n            tc_command_filter(command) for command in self.get_tc_command_history()\n        ]\n\n    def get_tc_", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": " assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1.NAME", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "   public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses = new ArrayList<>();\n\n        Cursor cursor = db.query(", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "\n    public MonthCalendar(Context context) {\n        super(context);\n        this.monthHeaderView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.month_header, null);\n        this.monthGridView = (ViewPager) this.Header.getChildAt", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "   my_stream = white_noise(0)\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(10) == [0] * 10\n\n  def test_finite_duration(self, func, data, dur):\n    my", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "\n    def unify(t1, t2, backref=None):\n        ...\n\nThis code defines a function `unify` that unifies two types `t1` and `t2`. It first checks if `t1` is a type reference or a type variable. If it is", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "       self.blink = BlinkSyncModule(\n            blink_url=BLINK_URL,\n            network_id=NETWORK_ID,\n            account_id=ACCOUNT_ID,\n            region_id=REGION_ID,\n            client_id=CLI", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\t\treturn default_flags\n\nThe code above is a Python implementation of a QObject-based document model for a 3D CAD system. It contains classes for representing various types of objects in the system, such as Geometry, Part, Drawing, and Analysis. The model also contains a set of", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "   return self.next_sink.AsyncProcessRequest(buf, headers)\n\n  def ProcessTaggedReply(self, tag, stream):\n    try:\n      self.next_sink.ProcessTaggedReply(tag, stream)\n    except Exception as ex:\n     ", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       assertThat(out.toString(), equalTo(\"\"));\n    }\n}\n\n\n\nThe test cases are testing the following:\n\n\n1. The -in option is used to specify the file to dump. The test case \"deadlocks\" specifies a non-existent file,", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       return new DrumStoreEntry<>(data);\n    }\n}\n\n    private static DrumStoreEntry<PLDTestData, PLDTestData> createNewData(long key, int op, long value, long... values) {\n        InMemoryEntry<PLDTestData,", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" 个", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       RoxanaProperties roxanaProperties = new RoxanaPropertiesMockBuilder().build();\n        return roxanaProperties;\n    }\n\n    private ResponseProcessorManager getResponseProcessorManagerForTest() {\n        return new ResponseProcessorManager(getRoxanaProperties());\n    }\n}", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self.send_queue.put((self._ping_msg, {})\n\n  def _SendMessage(self, message):\n    \"\"\"Constructs and sends a message.\"\"\"\n    self.send_queue.put((message, {})\n\n  def _RecvMessage(self", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "   assert freq2lag(v) == 1/freq2lag(v)\n\nclass TestLag(object):\n  def test_freq_to_lag_conversion(self):\n    for v in [37, 12, .5, -2,", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy20", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "\nThis code defines a cog that contains various functions for handling configuration commands. It has a number of functions for handling configuration commands, including:\n\n- `ask_configuration()`: This function is used to ask the user for configuration information. It creates a reaction channel and sends a message asking the user to react to", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   return self.evaluate(operands)\n\n###\n# Logical operators (and, or, not)\n# Ref: https://www.w3.org/TR/200/xpath-20#logical-operators\n@method('and', p=30", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setText(getResources().getString(R.string.welcome_drawer_header));\n\n        return header;\n    }\n\n    private void selectGroup(int groupPosition, int childPosition) {\n        // Se maneja el evento por grupo...\n        Event", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "           // Show the chat\n            Intent intent = new Intent(getActivity(), ChatActivity.class);\n            intent.putExtra(ChatActivity.EXTRA_CHAT_ID, newChatId);\n            startActivity(intent);\n        }\n    }\n    }\n}\n", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       RefundRequest refundRequest = new RefundRequest(request.outTradeNo(), request.totalFee(), request.nonceStr(), request.deviceInfo(), request.openId(), request.checkName(), request.tradepartment(), request.timeStart(), request.endTime());\n       ", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "       assertEquals(MessageSeverity.SUCCESS, creator.getSeverity());\n        assertEquals(String.format(\"Hello, %s!\", RANDOM_STRING_PARAMETER_VALUE_01), creator.getKey());\n    }\n\n    @Test\n", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "\n    public int readSmallIntValue(int d1) {\n\t\tint d2 = readCode();\n\t\tint tag = d2 & 0x07;\n\t\tif (tag == CODEINT4_TAG)\n\t\t\treturn readallIntValue(d", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "\n    def create(self, name, flavor_id=None, volume=None, databases=None,\n               users=None, restorePoint=None, availability_zone=None,\n               datastore=None, datastore_version=None, nics=None,\n              ", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "           if \"packets transmitted\" in ping_lines:\n                parser_class = LinuxPingParser\n            elif \"packets received\" in ping_lines:\n                parser_class = WindowsPingParser\n            else:\n                parser_class = MacOsPingParser\n\n        self", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "       m.videoSetFrameRate.setValue(Integer.parseInt(m.videoSetFrameRate.getText());\n        }\n\n        // set background image\n        if (m.setBgImage.isSelected()) {\n            m.setBgImage.setBackgroundImage(new ImageIcon", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "           self.probe = probe\n        else:\n            self.probe = load_probe(probe_file)\n\n    def detect(self, traces, **kwargs):\n        # Load the traces.\n        traces = np.load(traces_file)\n        #", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "   protected abstract void doStart(TransportContext context) throws Exception;\n\n    protected void doStop(TransportContext context) throws Exception;\n}\n\n\n\nThe above code defines an abstract transport class that can be extended to implement different transports like HTTP, WebSocket, etc. The class has methods for", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "     self.compute_control_dependence()\n    return self._cdg\n\n  def compute_control_dependence(self):\n    self.dom = None\n    self.cdg = None\n    self.blocks = None\n    self.block_intervals = None", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       // ...\n\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        // ...\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "\n}\n\n}\n\nThis is a Java class that implements the QueryVisitor interface and is used to visit and parse a SQL query. It has methods to visit various parts of the query, such as columns, joins, and expressions. It also has methods to add variables to the query and build the query.", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile baseFile = new File(basePath + \"/base.xml\");\n\t\t\tFile targetFile = new File(basePath + \"/target.xml\");\n\t\t\t\n\t\tddi2xforms.process(baseFile, null, \"survey\", basePath);\n", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "       # Test that the discrete distribution can be sampled\n        dist = DiscreteDistribution(pmf=np.array([0.2, 0.3, 0.5, 0.2, 0.1, 0.3, 0.4, 0.2", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "       state = stateFactory.createState(VastAdSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(VpaidState.class);", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptString(StringTag tag, TagValueConsumer consumer) {\n\t\tif (tag.isValid()) {\n\t\t\tconsumer.acceptString(tag.value());\n\t} else {\n\t\tthrow new InvalidValueException(tag.name());\n\t}\n\t", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "       self.assertEqual(\"Your child\", replace_blank_name(name=u\"\", language=\"English\"))\n        self.assertEqual(\"Your child\", replace_blank_name(name=u\"\", language=\"English\"))\n        self.assert(\"Your child\", replace_blank_name(name", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       expectLastCall().andThrow(new ExpectedException());\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                                .givenArgument(() -> {\n                                ", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "\n# Decoder\nclass L3GSM(Layer):\n    # Layer name\n    name = 'L3GSM'\n    # Layer fields\n    fields = [\n        'P1RestOctets',\n        'P2RestOctets',\n        'P3RestOct", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "\n    def bind_index(self, model, *, skip_table_setup=False):\n        \"\"\"Create an index for a model.\n\n        :param model: Model to bind.  Can be abstract.\n        :param skip_table_setup: Don't create or verify the index", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "       return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def consultar_status_operacional(self, numero_sessao):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.Funcoes", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "   class NonModel(BaseModel):\n        pass\n    engine.bind(NonModel)\n\ndef test_bind_model_with_no_table(engine):\n    class NonModel(BaseModel):\n        table_name = \"non_model\"\n    engine.bind(NonModel", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "   assert u6.dimensions == mass\n    assert u6.base_value == 1.0\n\ndef test_addition():\n    \"\"\"\n    Test addition of units.\n\n    \"\"\"\n    u1 = Unit(\"kg\")\n    u2 = Unit(\"m\")\n   ", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "\nThe tests cover a wide range of options and functionality, including:\n\n* Testing the --help and --usage options\n* Testing the --namespace option\n* Testing the --local-only option\n* Testing the --include-qualifiers option\n* Testing the --experimental option\n", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       // Load modules\n        loadModules();\n    }\n\n    private void loadModules() {\n        // Load currency module\n        CurrencyModule currencyModule = new CurrencyModule();\n        currencyManager.addModule(currencyModule.getModule());\n        // Load virtual module\n        Virtual", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       tag = self.get_tag(index, name)\n        print(tag.name)\n\n        # If the tag is not found, raise an exception\n        if tag is None:\n            raise FmodError(\"Tag not found\")\n\n        # If the tag is found, print its", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   @Override\n                    public void onResume() {\n                        super.onResume();\n                        getPortfolioViewModel().onResume();\n                    }\n\n    }\n\n    public void showProgress(boolean show) {\n        if (show) {\n            Sn", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>> listImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<List<String", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "\n        resource = ThermometerResource(aircraft.instruments.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"], ", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "   column = User.age\n    value = 3\n    expected_ref = \":v0\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0\": expected_action.value}\n\n    ref, action = reference_", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "           result = null; // handle exception here if needed. \n        } catch (IOException e) { // handle exception here if needed. \n        }\n\t\treturn result;\n\t}\n\t}\n}\n\n}\n\nThis is the code for the OsuBeatmap class in", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "           form = self.form_class(request.POST)\n            if form.is_valid():\n                comment = form.save()\n                return render(request, self.template_name, {'form': form})\n        else:\n            return render(request, self.template_name,", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   Call<EmojiResponse> getEmoji();\n\n    // ...\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "           of(ConnectionErrorListener).ifPresent(ErrorListener::error);\n        }\n    };\n\n    private void reenableAllHotspots(WifiManager wifiManager) {\n        wifiManager.setWifiState(WifiManager.WIFI_STATE_ENABLED", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "           LightSensor.flushDBCache(deviceID);\n        }\n        if(type == 6 || type == 0) {\n            ProximitySensor.flushDBCache(deviceID);\n        }\n        if(type == 7 || type == 0) {\n           ", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        for (Card card : stack.getArchivedCards", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "\n    def get_initial_segmentation(frames, frame_shift):\n        # ...\n\n    def merge_segments(segments, min_pause_duration, max_segment_length, snap_boundary_threshold):\n        # ...\n\n    def load_scp", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(restTemplate, root);\n        this.releases = new SpringReleases(restTemplate, root);\n        this.stem", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       result = self.get_tag(index, name)\n        if result.type == TAG.FMOD:\n            # ...\n\n    def get_length(self):\n        \"\"\"Retrieve the length of the sound in seconds.\n\n        :rtype: float\n       ", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "           # Add the last section\n            section = self.section_configurer.configure_section_with_values(\n                bufr_message, section_index, json_data[section_index - index_offset],\n                self.overrides)\n            section_index += 1\n           ", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "       form = ReportAbuseForm(request.POST)\n        if form.is_valid():\n            log_moderator_event(AbuseReport.REPORTED, logged_by, logged_again, form.cleaned_data['reason'])\n            return redirect('moderation", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   public void printSummary() {\n        printSummary(new NiceTable(getResults()));\n    }\n\n    public void printSummary(final NiceTable results) {\n        out.println(results.toString());\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "       // Checking PhyML binary\n        if (!PhyMLv3AminoAcidRunEstimator.checkBinary())\n        {\n        \tfinalize(1);\n        }\n\n        // Checking PhyML binary\n        if (!PhyMLv3Amin", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.record(URL(\"http://example.com/record\"), true, true, true);\n\n\t}\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onReceive(byte[] response) {\n\t\t\t\tString json = new String(response);\n\t\t\t\tProgramTrack track = new ProgramTrack(json);\n\t\t\t\tmTracks.add(track);\n\t\t\t}\n\t\t});\n\t", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   @Mock\n    AdRetriever adRetriever;\n\n    @Before\n    public void setUp() {\n        playerFsm = new FsmPlayerImperial();\n        playerFsm.setPlayerUIController(new PlayerController());\n        playerFsm.setAdRet", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tstage.close() ;\n\t\t\t}\n\t\t});\n\t\t\n\t\tstage.show();\n\t\t}\n\t}\n}\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "   String className = type.getQualifiedName().toString();\n    String injectedClassName = className + INJECT_ADAPTER_SUFFIX;\n    String injectedTypeName = injectedClassName + INJECT_ADAPTER_SUFFIX;\n\n    // Generate the injected", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "           new ReceiveNotifyApi().receiveNotify(enable);\n        }\r\n    }\r\n    }\r\n}", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "   assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)\n    assert args.gps_sv[0].getL1CAMessage().bitValue == -1\n\ndef test_parameters_msgtype3():\n  '''\n  One+Zero", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "\n    return path\n\n###\n\nThis code is a XPath expression evaluator that can parse and evaluate XPath expressions. It can handle various types of nodes, including elements, attributes, text nodes, and processing instructions. It can also handle various XPath functions and operators.\n\nThe code defines several", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "   return new_values, new_index\n\nThe code is a generator that returns a dictionary for each row of the table. The new values are created by filling in missing values in the original values with the specified fill value. The new index is created by adding the new values to the original index.\n\nThe", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               TypingMessage m = (TypingMessage)message;\n\n                if (m.isTyping())\n                {\n                    _isTyping = true;\n                }\n            }\n        }\n        }\n    }\n\n    }\n\nThe code above is a Java implementation", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\n# Calculate the F-statistics\nF_a = np.divide(SS_Total, df_a)\nF_s = np.divide(SS_Total, df_s)\nF_sa = np.divide(SS_Total, df_a)\n\n", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "       main.wait();\n        assertThat(main.getStatus(), equalTo(ThreadStatus.BLOCKED));\n        assertThat(main.getStatus(), equalTo(ThreadStatus.BLOCKED));\n    }\n\n    @Test\n    public void sleep() {\n        ThreadDump", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               // 将时间选择到当前时间\n                // 将时间选择到当前时间\n                // 将时间选择到当前时间\n                // ...\n\n            case R.id.switch_notice:\n", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GyroscopeSensorCollector.flushCache(deviceID);\n        }\n        if(type == 5 || type == 0) {\r\n            LightSensor.flushCache(deviceID);\n        }\n        if(type == 6 || type == 0) {\r\n           ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   private SetFunFragment setFunFragment;\n\n    private MomoFragment momoFragment;\n\n    private TabLayout tabLayout mTabLayout;\n\n    private View.OnClickListener mOnClickListener;\n\n    private View.OnLongClickListener mLongClickListener;\n\n    private View.OnTouch", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "\n        self.init_logging()\n\n        self.params = {}\n        if config.use_ntp:\n            self.ntp_setup()\n\n        self.init_logging()\n\n        self.params = {}\n        if config.use_ntp:\n            self", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "   assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.d", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "       return RestfulModelCollection(Webhook, self)\n\n    def _get_resource(self, resource_name, **kwargs):\n        return self.api.get_resource(resource_name, **kwargs)\n\n    def _post_resource(self, resource_name, **kwargs", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "       activityLightLevelChanger.setLightLevel(ActivityLightLevel.NIGHT_MODE_NIGHT);\n    activityLightLevelChanger.setOn(true);\n    activityLightLevelChanger.setLightLevel(ActivityLightLevel.NIGHT_MODE_NIGHT);\n    activityLightLevel", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "           non_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_therm", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "           Str('Identity', Pt=Identity(), Len=8),\n            Str('Cause', Pt=Cause(), Len=1),\n            Str('Location', Pt=Location(), Len=1),\n            Str('Time', Pt=Time(), Len=1),\n            Str('", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "       self.parse_tc_qdisc(device)\n        self.parse_tc_filter(device)\n        self.parse_tc_class(device)\n\n    def parse_tc_class(device):\n        self.parse_tc_qdisc(device)\n       ", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "       result, index = apply_fast_eq(left.values, right.values,\n                                      left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values.astype(np.bool),", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "   def decorator(func):\n        @func\n        def wrapper(request, validator_map):\n            try:\n                func(request, validator_map)\n            except RequestValidationError as exc:\n                raise RequestValidationError(exc.child)\n\n        return wrapper\n", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
