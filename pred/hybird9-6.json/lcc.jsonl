{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tif ( p.Mobile is PlayerMobile )\n\t\t\t\t{\n\t\t\t\tp.CloseGump( types, defs );\n\t\t\t}\n\t", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_u, e_v, **data.copy())\n\t\t\n\t\tsolutions.append(A)\n\t\t\n\treturn solutions\n\nThe code is a Python implementation of the Edmonds-Karp algorithm for finding a minimum spanning", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r')\n        b = Sndfile(ofilename, 'w', format=Format('wav', 'pcm16'))\n        # Open the file for reading\n        a.seek(0)\n        # Open the file", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "   def open_video_page(self, video_id):\n        self.open_page(self._URL % video_id)\n\nThis code defines a class VideoPage that inherits from UnisubsPage. It contains common elements found in the video page of the Unisubs website. The", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t}\n\t\t}\n\t});\n", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "       for a in self.answers:\n            ret += a.hint_string()\n        return ret\n\nThe code above is a trivia game GUI written in PyQt4. It has a main window with a menu bar, a list of categories, a list of questions, and a list", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob.", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                s.print(cert.getSubjectDN());\n                s.print(\"  \");\n                s.println(cert.getIssuerDN());\n            }\n        }\n    }\n}\n\nThe above code is", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n}\n\nThis implementation of JESpace uses BerkeleyDB Jave Edition as the underlying persistent space. It provides methods to put,", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t}\n\t\t}\n\t}\n}\n\nThis code defines a spell called Alchemize that can be cast on an item to alchemize it. When the spell is cast, the game will select the item", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       # create a SOAP message\n        soap_message = SOAPMessage()\n        soap_message.set_namespace(\"http://schemas.xmlsoap.org/soap/envelope/\")\n        soap_message.set_namespace(\"http://www.w3.org/2003", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       mark = \"setRepeated('%s');\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_id):\n        mark = \"unsetRepeated('%s');\"", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "           return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            return result\n    def action_create_copy(", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsFalse (a.Union (b).IsSubsetOf (a), \"Subset-DifferentIdentities\");\n\t\t}\n\t}\n}\n\nThis test class contains various test cases for the ZoneIdentityPermission class. Some of the key tests are:\n\n-", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "   trust_managers = CompositeX509TrustManager(trust_managers)\n    kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm())\n    kmf.init(trust_managers, [])\n    kmf.setKeyStore", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}\n\nThis action performs the following tasks:\n\n1. It retrieves the user from the request.\n2. It retrieves the domain from the request.", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "           self.__tmp_dir,\n            \"renderer_%d.datastream\" % self.uid)\n        self.__datastream_transport = asyncio.create_transport(\n            self.__datastream_address,\n            self.__datastream_protocol,\n           ", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\tif (option1) {\n\t\t\t\t//change in database\n\t\t\t\tstore.SetValue (iter, columnOther, !option1);\n\t\t\t}\n\t\t}\n\t}\n}\n}\n\nThis code is a Gtk# application that allows", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {\n               ", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirm = new Firm(id, conf);\n\t\t\t\tDataManager.firms.put(id, firm);\n\t}\n\t}\n}\n\nThis code defines a DataManager class that manages data for the Capitalism plugin. It has several methods for loading", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\tmgr.addNode(playbackNode);\n\tmgr.addNode(shortcutsNode);\n\tmgr.addNode(generalNode);\n\t// Show the dialog\n\tmgr.showDialog(parent);\n}\n}\n\nThis is a configuration class for the pm", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "\n        }\n        }\n    }\n}\n\nThis is a spell that provides protection to the target. The spell uses the following reagents:\n\n* Garlic\n* Ginseng\n* Mandrake Root\n* Sulfurous Ash\n\nThe spell has the following effects:\n", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self.autoflush = False\n        self.flush()\n\n    def __init__(self, *args, **kwargs):\n        self.bind = None\n        self.transaction = None\n        self.autocommit = False\n        self.expire_on_commit = False\n", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) {\n\t\t\tfinal String name = field.getFieldName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) {\n\t\t\t\tnamed = new", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   def wrapper(self, *args, **kwargs):\n        if self.request.path.endswith(\"/\"):\n            if self.request.method in (\"GET\", \"HEAD\"):\n                self.request.path = self.request.path.rstrip(\"/\") + \"/\"\n           ", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t}\n}\n\nThis is a custom control that allows you to display multiple views in a multi-view control. The control has a view collection that contains the views. The control also has an active view index that is used to switch between the views. The control", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   WigleDownloader(args.user, args.password, args.coordfile, args.outpath).run()\n\nThe code above is a Python script that downloads AP information from Wigle.net using the Wigle API. It can be run from the command line with the", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 160)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                    foreach (SkillName sk in Imbuing.PossibleSk", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "   # Gather data about the build for each platform\n    builds = []\n    if not mobile:\n        # Gather data about the build for each platform\n        builds = []\n        # Check if direct download link has been requested\n        if force_direct:\n            # build a direct download link", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (stateBeansList==null || stateBeansList.isEmpty()) {\n\t\t\t// No state bean found by label, so the lookup is not allowed\n\t\t\treturn false;\n\t}\n\t\t// Check if the state bean is allowed in the context\n\tfor (", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                var member = memberList.FirstOrDefault( x => x.Name.Value.Equals( argument.Name.Value ) );\n                if (member != null) {\n                    argument.Name = member.Name.Value;\n                ", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self.get_item_from_modulestore(self.split_test_usage_key, verify_is_draft=True)\n        self.assertEqual(0, split_test.user_partition_id)\n        self.assertEqual(1, len", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           // Generate the font dictionary\n            PdfIndirectReference font = GetFontBaseType(piref, subset, toUnicode);\n            PdfDictionary fontDic = GetCIDFontType2(font, subset, metrics);\n            // Generate the font stream\n            Pdf", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\t// place the cell at the proper depth\n\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\tcgn.depth = cgn.depth + 1;\n\t\t\t\t\t// place the cell at the proper x", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = callable.call();\n        return task;\n      }\n    }\n    public void set(Bitmap bitmap) {\n      Util.assertMainThread();\n      if (bitmap != null) {\n        task = null;\n        bitmapReference = new SoftReference<>(bit", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                    msgTF.setText(down);\n                }\n            }\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   prerequisite = NavigateToSibling('Details')\n\nThis code defines a `Node` class that represents a node in the ManageIQ tree. It also defines a `NodeCollection` class that can be used to create a collection of nodes. The `NodeAllView` class", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequences, sequenceTitles);\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t\tfor (", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "           base.Render(writer);\n            }\n        }\n    }\n}\n}\n\nThis code defines a ToolbarButton control that can be used in a web page. It has properties for specifying the roles required to access the button, and a NoPermissionVisibility property that determines the visibility of the", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\t\n\t\tcompound.setInteger(\"Sharpness\", sharpness);\n\t\tcompound.setInteger(\"Fire\", fire);\n\tcompound.setInteger(\"Blast\", blast);\n\tcompound.setInteger(\"Smite\", smite);\n\tcompound.set", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return \"Effect{\" + getId() + \"}\";\n    }\n}\n\nThis is a Java class representing an effect in the FreeCol game. It has the following attributes:\n\n- probability: The probability of this effect occurring. This is an integer value.\n- scopes: A", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'private',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',\n", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       p = Person.objects[0].select_related()\n        o = Organization.objects.first()\n        self.assertEqual(p.owns[0], o)\n        self.assertEqual(o.owner, p)\n        self.assertEqual(o.employees", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "       else:\n            x = x if x is not None else self.dim_names_to_var_names[0]\n            y = y if y is not None else self.dim_names_to_var_names[1]\n            self.plot(x, y, sel_", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (toScan.Add(path))\n                {\n                    // Ignore changes to ignored paths\n                    if (ignored.Contains(path))\n                    {\n                        toScan.Remove(path);\n                    }\n                }\n            }\n            var toWatch =", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\treturn read(key, computed);\n}\n}\n\nThe TransformingMap class has several methods that allow you to perform common operations on maps, such as:\n\n* `put(key, value)`: adds a value to the map for the given key.\n* `putAll(m", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       res = pdt.searchResults(query)\n        for eachobj in res:\n            obj = eachobj.getObject()\n            if canReply(obj):\n                objcommentslist.append(obj)\n                replydict.append(eachobj.getReply(0))\n", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t}\n\t}\n}\n\nThis code is a tile matrix class that reads tiles from a map file and stores them in a 2D array. It also has a static block that is used to store tiles that are not in the", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   // Get the parcel's voice channel\n                    channelUri = GetParcelVoiceChannel(land);\n                    // Send the channel_uri to the client\n                    return String.Format(\"{0} {1} {2} {3}\", channelUri, param, path", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t}\n\t\t\tPayPeriods.Add(PayPeriodCur);\n\t\t\tDialogResult=DialogResult.OK;\n\t}\n\tprivate void butCancel_Click(object sender, EventArgs", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_field(column_headings)\n        # Convert the time to a numpy array.\n        time_array = np.array(file_handle.next())\n        # Skip the next line.\n        next(file_", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   return authz.is_authorized('group_or_org_member_create', context, data_dict)\n\nThe code above defines a number of logic functions that handle authentication and authorization for different use cases. The functions are annotated with the `@logic.auth_allow_anonymous_access`", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\texample.setValue(predictionAttribute, outcomes[parentIndex]);\n\t\t\t\t// calculating confidences\n\t\t\tdouble confidence = Math.pow(confidences[parentIndex], 1d / depths[parentIndex]);\n\t\t\tdouble defaultConfidence", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "       return new[] { new SearchResults() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n    }\n}\n\nThis code defines an abstract class called AbstractTrados2007LanguageDirection that provides an interface for Trados 2007 language", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = Character.getUnicodeSet().getCodePoint(codePoint);\n            if (codePoint > 0) {\n               return codePoint;\n            }\n         }\n         return -1;\n      }\n      }\n   }\n   }\n}\n}\n\n", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "   ValidationResults results = ValidationResults.SUCCESS;\n    if (existingRequired && (studyFormName == null || studyFormName.length() == 0)) {\n      results = ValidationResults.REQUIRED_FAIL;\n    }\n    return results;\n", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar request = new HandshakeRequest\n\t\t\t{\n\t\t\t", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t{\n\t\t\tcoll.add(((ims.core.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionListVoBean)beans[i]).buildVo", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "   if prnum == 'date':\n        date()\n    else:\n        print 'Invalid argument'\n\nThe code above is a Python script that provides various functions for cleaning up the Kodi media center. The functions include:\n\n* Caching the Kodi database to free up disk space.", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret;\n        }\n        public static int[] ind2sub(ILArray<string> A, int seqindex) {  ", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "   plotName = pD[ 'plotName' ]\n    del( pD[ 'plotName' ] )\n    plotName = plotName.lower()\n    if plotName.find( \".png\" ) < -1:\n      plotName = plotName.replace( \".png\", \"\"", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPoints(bot);\n\t}\n\t}\n}\n\nThis code defines a module that manages the construction of buildings for an AI player. It has various properties and methods that determine how the AI", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       return plan.getPlanGraph();\n    }\n}\nThe PlannerTestAideDeCamp class provides some utility functions to compile SQL statements for plan generation tests. It loads the schema at ddlurl and sets up a voltcompiler / hsql instance. It then compiles a statement and returns the", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\tthis.comboBox1.Size = new System.Drawing.Size(200, 20);\n\t\tthis.comboBox1.TabIndex = 0;\n\t\t// \n\t\t// textBox2\n\t\t// \n\t\tthis.textBox2", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = parity;\n\t\t\tdcb.DataBits = data_bits;\n\t\t\tdcb.StopBits = bits;\n\t\t\tdcb.Handsh", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=admin)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n        self.assertEquals(page.context['cob", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   main(sys.argv[1:])\n\nThis code defines a set of acceptance tests for the fetchphotos.py script. The tests are run using the call_func_tests.sh script in the same directory. The tests cover basic cases where the script works correctly, as well as some edge", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tnewList.append(self.buildEntryComponent(entry[0], entry[1], entry[2], entry[3], entry[4], entry[5]))\n\nThis is a custom screen for selecting a wireless network. It displays a list of available networks and allows the user to select", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               float barHeight = size * 3;\n                float barWidth = fontX - fontX;\n                return new Rectangle(0, 0, barWidth, barHeight);\n            }\n        }\n    }\n}\n\nThis code is a Java implementation of the Code 39", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return Arrays.asList(results);\n  }\n}\n\nThis code provides a number of utility methods for working with Properties objects. Some of the key methods are:\n\n- `hasProperty(Properties props, String key)`: Returns true if the Properties object contains a property with the given key", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-90, +90, 73.123)\n        sample_points = [\n            (\"longitude\", x_points),\n            (\"latitude\", y_points),\n        ]\n        result = traj_interpolate", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetText(currPacket.ToText());\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\n            SavePacket(currPacket);\n       ", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "   elif color == 'yellow':\n        print '\\03[1;32;40m'\n    else:\n        print '\\03[1;33;40m'\n\ndef main():\n    # load the dataset\n    dataset = build_dataset('songs_", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n        public RefCountedSet(IDictionary<TK, int> refSet, int numValues)\n        {\n            _refSet = refSet;\n            _numValues = numValues;\n        }\n\nThe code is a reference counting set implementation that stores keys and a reference counter for", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           System.ComponentModel.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DummySolutionExplorer));\n            this.treeView1 = new System.Windows.Forms.TreeView();\n            this.treeNode1 = new System.Windows.Forms", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "       else:\n            return self.constructFunction(\n                original.name,\n                original.DLL,\n                resultType = original.restype,\n                argTypes = original.argtypes,\n                doc = original.__doc__,\n                argNames = original.argNames,\n               ", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           baos.writeInt(emptyStreams.size());\n            baos.writeInt(emptyStreams.size());\n            baos.writeInt(emptyStreams.size());\n            baos.writeInt(emptyStreams.size());\n            baos.writeInt(emptyStream", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\n    // ...\n\nThe code above is a Java class that implements a progress bar. It has a method to build the ticker (the area that makes up the progress bar) and a method to start/stop the animation. The ticker is built by creating an area with a rectangle and an ellipse.", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_removable_if_max_", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "               if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellation", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "\nThe code above is a Python script that reads in a configuration file that defines the parameters for fitting an exponential disk, bar, and sky component to an image. The configuration file has parameters for the disk and bar components, such as the center coordinates, radii, and magnitudes. The sky component is defined as a", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += (((b & 0x08) << 2);\n                    i += (((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x02:\n                    /*", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self.course_key\n\nThe CourseFixture class has several methods:\n\n1. `__init__`: Initializes the fixture with the course details.\n\n2. `add_course_details`: Adds course details to the `course_dict` dictionary.\n\n3.", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\tchance = Float.parseFloat(splitNumber[1]);\n\t\t}\n\t\treturn (int) (chance * 100);\n\t}\n}\n\nThis listener handles the kill event of a", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "   if meter_id is None:\n        return 1, \"Meter does not exist, so can't delete it\"\n    else:\n        response, info = http_request(module, name, apiid, apikey, action, meter_id)\n        if info['status']", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 10);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size =", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       for plugname, plug in self.loaded_plugins:\n            plugruncount += 1\n            if plug.name in self.skipped_plugins:\n                continue\n            self.ui_log.info(\"Plugin %s is running\" % plug.name)\n            self.", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "   def getRoomFullName(self):\n        \"\"\" Session Room Full Name \"\"\"\n\nThis code defines a set of fossil classes that represent different types of resources and materials. The classes are:\n\n* ICategoryFossil: Represents a category of resources.\n* IConferenceMin", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                       parent.mirthClient.importMessage(channelId, message);\n                        }\n                    }\n                return true;\n            } else {\n                result = parent.mirthClient.importMessage(channelId, fileTextField.getText());\n            }\n        } catch (ClientException", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\t\tlayer = (int)((Scriptable)value).get(LAYER, (Scriptable)value);\n\t\t\t\t} else {\n\t\t\t\t\tlayer = (int)((Map)options).get(LAYER));\n\t\t\t}\n\t\t}", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null) {\n            // Load user information for display\n            user = currentSession.getActiveUser();\n            userProfilePicID = user.getId();\n            connectedStateLabel.setText(user.getName());\n            connectedStateLabel.setBackgroundColor(get", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) {\n\t\t\tsum += emotion.strength;\n\t\t}\n\t\tcurrentEmotion.strength = sum / emotions.length;\n}\n}\n\nThe code is a Java class that implements an emotions controller.", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n            }\n        ],\n            self.build.stages_to_list())\n    def test_get_stage_by_name(self):\n        \"\"\"Test getting a stage by name.\"\"\"\n        # read", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   LongRad = LongOriginRad + (phi1Rad-phi1Rad*_EquatorialRadius)\n    LatRad = LongRad*_deg2rad\n    Lat = LatRad*_rad2deg\n    Long = LongRad*_rad2deg\n    Lat = LatRad*_rad", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       form = ReportUserForm(request.POST)\n        if form.is_valid():\n            report = form.cleaned_data\n            report.save()\n            messages.success(request, \"Report submitted successfully!\")\n            return HttpResponseRedirect(reverse('profile'))\n    else:", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   def __init__(self, context, request):\n        super(ProductAddSeriesView, self).__init__(context, request)\n        self.form = request.form_ng\n        self.form.add_field(self.form_fields)\n        self.form.add_field", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.Yes;\n\t\t\t\tform.RightToLeftLayout = true;\n\t\t}\n\t\tcatch(Exception) { Debug.Assert(false); }\n\t}\n#else\n\tpublic void ApplyTo(Form form", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}\n\nThe NumberVariableLength class represents a number that may span a number of bytes when written to file depending on what size is to be represented. The class has the following methods:\n\n- getMax", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "   def compile_tag_regex(positional_tags):\n        if not positional_tags:\n            return positional_tags\n        else:\n            new_positional_tags_list = []\n            positional_tags = positional_tags[0]\n            for flag, regex", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "           return new object[0];\n}\n}\n\nThe code above defines a generic parameter class called MethodGenericParameter and TypeGenericParameter. These classes inherit from the GenericParameter abstract class.\n\nThe GenericParameter class has an Index property that is used to identify the generic parameter. It also has some", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\n# This is part of Scapy\n# See http://www.secdev.org/projects/scapy for more information\n# Copyright (C) Andreas Korb <andreas.d.korb@gmail.com>\n# Copyright (C) Nils Weiss <nils@", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tready_pipe = self.bus_name + \"/org.freedesktop.Secret.Session\"\n\t\tself.service.add_signal_receiver(dbus.service.Signal(\"org.freedesktop.Secret.Session\", ready_pipe)\n\nThis code defines a", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "\t\t\t\t\tthis.AddRes(index, typeof(BlackPearl), 104353, 1, 104253);\n\t\t\t\t\tthis.AddRes(index, typeof(SwitchItem), 1073464,", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "   def teardown_request(self):\n        self.app.teardown_request(self.request)\n        self.request = None\n        self.url_adapter = None\n        self.session = None\n        self.g = None\n        self.preserved = False\n", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   return _pubsub_consumer(session, cluster_id, topic_name)\n\nThis code defines a number of functions that perform various operations on OpenStack Swift, OpenStack Swift, and AWS S3 connections. The functions include:\n\n- `http_soap_audit`: This function retr", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}\n\nThe ResourceDependencyResolverService contains logic to resolve dependencies between resources and releases. It can find the best matching resource for a", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       axis_proj = _axis_in_detector(ray_trafo.geometry)\n        rot_dir = _rotation_direction_in_detector(ray_trafo.geometry)\n        dx = (rot_dir[0] * ray_trafo.range.mesh", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "           return regx\n    def _doLogin(self):\n        self.enabled = False\n        self.url = None\n        self.urls = {}\n        self.param = 'browse.php?u='\n        self.option = '&b=32&f=nore", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\treturn string.Format (fmt, \"FontSize: {0}, Unit: {1}\", type, unit);\n}\n}\n\nThis code defines a FontUnit struct that represents a font size and unit. It has properties like FontSize, Unit, and IsEmpty. It also has methods like Parse", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t}\n\t\t\t// Add the blocks modulo sigma\n\t\t\tBigInteger result = block1.ToBigInteger();\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar inner = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(inner.Properties.Count, Is.EqualTo(1));\n\t\t\tAssert.That(inner.Properties[0].Key, Is.EqualTo(\"In this test\"));\n", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "           for (int w = 0; w < width; w++) {\n                edges.add(new T2(getTopic(getSubjectIdentifier() + \"-\" + w + \"-\" + h), getTopic(getSubjectIdentifier() + \"-\" + w + \"-\" + h)));\n", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   i1 = iso.Isoelastics(ds)\n    data = i1.get(col1=\"deform\",\n                  col2=\"volume\",\n                  channel_width=20,\n                  flow_rate=0.04,\n                  viscos", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "\n        final File expectedFile = new File(args[0]);\n        final File actualFile = new File(args[1]);\n        final AbstractTripleStore expected = new LocalTripleStore(expectedFile);\n        final AbstractTripleStore actual = new LocalTripleStore(actualFile);\n", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "       assert alert.lowest_spotprice(history) == 0.10400, \"The lowest spot price should be 0.10400\"\n\nThis test suite covers several aspects of the alert.check_for_alert function:\n\n1. It checks that the", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile != null) {\n\t\t\t\treturn performInstallerLaunch(downloadedJarFile);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tpublic", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteContext(context);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDestroyTexture(texture);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteFrameBuffer(frameBuffer", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       :rtype: numpy.ndarray\n        \"\"\"\n        return self._project_cov_mat(self.x_data_cov_mat, self.y_data_cov_mat, self.x_model, self.parameter_values)\n    def _project_error(self,", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n}\nThe CmsLinkInfo class represents most of the information in a CmsLink. It contains the structure id, target, query,", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                 }\n            }\n            }\n            // Set the ownership of the object to the owning account\n            osgObject.setOwnerCanonicalId(owningAccount.getCanonicalId());\n            osgObject.setOwnerDisplayName(owningAccount.getAccountAlias", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "\t\tadd { _selectedFolderChanged += value; }\n\t\tremove { _selectedFolderChanged -= value; }\n        }\n        #endregion\n    }\n}\n}\n\nThis is an extension point for views onto the FolderExplorerComponent class. It provides an event handler for the", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplateCommand command = setupVolumeFormatAndTypeTest(VolumeFormat.RAW, VolumeType.Preallocated, StorageType.NFS);\n        when(command).getBackend().runInternalQuery(eq(VdcQueryType.GetTemplatesFromExportDomain), any(V", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\tw10.YOptions = ((global::Gtk.AttachOptions)(4));\n\nThis code creates a Gtk.Table with 4 columns and 5 rows. The first column", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "           environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = self.category\n\nThis script is a post-processing script for NZBGet, a newsgroup downloader. It is designed to be inherited from the `PostProcessScript` class and provides some common", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\tmb.GetILGenerator().Emit(OpCodes.Ldarg_0);\n\t\t\tmb.GetILGenerator().Emit(OpCodes.Call, BaseType.GetTypeInitializer(Type.EmptyTypes));\n\t\t\tmb.GetILGenerator().E", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return (Builder) new Builder().MergeFrom(prototype);\n}\n\n    public static Builder CreateBuilder(global::bnet.protocol.channel_invitation.SendInvitationRequest prototype) {\n      return (Builder) new Builder().MergeFrom(prototype);\n    }", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "\nvertices[x] = getVertices()[i * 4 + x];\n            }\n        }\n    }\n}\n\nThe QuadMesh class has the following methods:\n\n- Constructor: Creates a new QuadMesh object with a default name.\n\n", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (showDateData.length() > 0) {\n            result.add(showDateData);\n        }\n        return result;\n    }\n    }\n    }\n}\n\nThe above code defines a CmsDocumentFrontend class that provides customized methods for the document center", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\tyield return new WaitForSeconds (animationDuration);\n\t\t}\n\t}\n}\n\nThis script is for a Material UI InputField component in Unity. It has a placeholder text field and an active line that is displayed when the input field is selected. The placeholder text field has a placeholder color", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "     Height = GetBestHeight();\n      Invalidate();\n      }\n    }\n    //--------------------------------------------------------------------------------\n  }\n}\n\nThis is a partial class that inherits from Button. It has some additional properties and methods to handle the arrow buttons.\n\nThe key parts are:\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "\nThe code above checks for errors in the database and sends emails to users who have created or modified records in the past week(s). The checks are performed in the following steps:\n\n1. Checks for errors in the database.\n2. Extends the SQL files to include the s_date_created", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\tdirections |= ScrollDirection.Right;\n\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\tdirections |= ScrollDirection.Down;\n\t\treturn directions;\n\t}\n}\n", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // ...\n        }\n        }\n    }\n}\n\nThe code above is a partial implementation of a manual data entry form for a conference setup screen. The form has several sections:\n\n1. Partner information: Partner key, partner name, partner location, etc.\n\n2.", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as blob/byte[].\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n\nThis code defines a `Load` class that has two methods: `LoadText", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "   def __str__(self):\n        return \"PayloadRequirements(id=%s, reasons=%s, strong=%s)\" % (self.id, self.reasons, self.strong)\n\nThis code defines a `PayloadRequirements` class that stores a list of `Pay", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return CopyCustom && CopyRange; }\n\t}\n\tpublic void OnImageBoxSelected(ImageBoxSelectedEventArgs e)\n\t{\n\t\tCurrentDisplaySet = e.SelectedImageBox.DisplaySet;\n\t\tUpdateUseInstanceNumber();\n\t\tUpdateCopyRange();", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\tget;\n\t\tset;\n\t}\n}\n}\n\nThis code is a Gnome application that provides a Tomboy note-taking application. It uses the Gnome.Program class to create a Gnome application instance. It also uses the Gtk.Application class to create a G", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           assert bugAnnotation.getBugPattern() != null;\n        }\n    }\n}\n\nThe TextUIBugReporter class provides a convenient way to format and report warnings and analysis errors. It has several options that can be set to customize its behavior:\n\n- reportStackTrace: Whether", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\npublic class Food : IComparable<Food>\n{\n\tpublic int CompareTo( Food other )\n\t{\n\t\tif ( this.Weight < other.Weight )\n\t\t\treturn -1;\n\t\telse if ( this.Weight > other.Weight )\n", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                   if (eFarm.MinionsHit >= 2)\n                    {\n                        E.Cast(eFarm.Position);\n                    }\n                }\n            }\n        }\n        private void JungleClear()\n        }\n        private void OnSpellCast", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, fill, anchor);\n}\n}\n\nThis class provides static methods to create GridBagConstraints in a more readable way. The methods take the x, y, width, height, and anchor values directly", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "\nThe DWD class has several methods:\n\n- _connect: Connects to the FTP server at the DWD host.\n\n- run: Runs the FTP server.\n\n- stop: Stops the FTP server.\n\n- parse_item: Parses an FTP", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertTrue(field_def.name == field_model_def.name)\n        self.assertTrue(field_def.value == field_model_def.value)\n        self.assertTrue(field_def.rules == field_model_def.rules)\n        self", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new[] {new object[] {\"E1\", 10L}});\n                env.UndeployAll();\n            }\n        }\n        internal class InfraMultipleIndex : RegressionExecution\n        {\n            private readonly bool namedWindow;\n            public InfraMultipleIndex", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "       clibrebound.reb_particle_imul(byref(self), c_double(other))\n        return self\n\n    def __div__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n       ", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "   def _get_view_id(self, cr, uid, view_id):\n        return self.pool['ir.ui.view'].browse(cr, uid, view_id, context=None)\n\nThe code above defines a view class that inherits from ir.ui", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = createHTMLView(c, text);\n            c.putClientProperty(BasicHTML.propertyKey, value);\n            c.putClientProperty(htmlDisable, Boolean.TRUE);\n        } else {\n            c.putClientProperty(BasicHTML.propertyKey, oldValue);", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, content=content)\n    assert s.name_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    expected_urls = [filename]\n    assert len(items)", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmSqlLoader(namedQueryReference);\n\t\t}\n\t\t}\n\tpublic void Loader(string namedQueryReference, string[] parameterValues)\n\t{\n\t\tif (namedQueryReference == null)\n\t\t{\n\t\t", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t{\n\t\t\tm_Members[i].Serialize( writer );\n\t\t", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "   }\n    }\n}\n\nThe InlineInfo class contains the following fields:\n\n- callee: The callee method of the inlined call.\n- invoke: The invoke node representing the inlined call.\n- probabilities: The probabilities of the inlined call.\n- call", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "\nThe code above defines a DockerBot class that can be used to run a pytest test in a Docker container. The class has several methods:\n\n- __init__: Initializes the DockerBot object with the required arguments.\n\n- run: Runs the pytest test in the Docker container", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    materializedPhis.put(key, getCachedPhi(value, value.stamp));\n                }\n            }\n        }\n    }\n}\n}\n\nThis code implements a read elimination closure that can be used to eliminate reads from a", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "   }\n}\n\nThis is an implementation of the ImsVideoCallProvider interface. It provides an abstract implementation of the ImsVideoCallProviderBinder interface, which is used to communicate with the ImsVideoCallProvider service. The ImsVideoCallProviderBinder interface is used to send messages to the", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new InternalGump(from as PlayerMobile, this));\n\t\t}\n\t}\n\t\n\tpublic override void Serialize(GenericWriter writer)\n\t{\n\t\tbase.Serialize(writer);\n\t\twriter.Write(0", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   Record.deleted = Record.is_deleted\n    Record.merged_recid = Record.merged_recid\n    Record.merged_recid_final = Record.merged_recid_final\n    Record.merged_recid = Record.merged_", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   def get_user_by_jid(self, jid):\n        user = self.module.get(jid)\n        if user is None:\n            raise UserNotFound(jid)\n        return user\n\nThis is a simple Django backend that provides some basic XMPP functionality", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath)\n    def find(self, st):\n        \"\"\"\n        Find the entry which the given string *st* matches.\n        **Keyword argument", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n      return res\n    elif not res['Value']:\n      res = self.transClient.setTransformationParameter( transID, 'Status', '", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t} catch (URISyntaxException e) {\n\t\t\tthrow new CommentException(l10n(\"couldNotParseFormURI\", \"error\", e.getMessage());\n\t}\n\t\n\t// Check if the form is hazardous\n\tif(uri.getScheme", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       yield self.run_fake_single_build(gsp, buildResult, expWarning=False)\n\nThe code above defines a GerritStatusPush class that can be used to push Gerrit status updates to Gerrit. The class has a startCB and stopCB method that can be used to", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n    self.category.name = 'Test Category'\n    self.category.description = 'This is a test category'\n    self.assert_(self.category.name == 'Test Category')\n    self.assert_(self.category.description == '", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "       Map<String, AnnotationMirror> r2) {\n            return r1.isEmpty() ? r2 : r1.containsKey(r2.getKey()) ? r1.get(r2.getKey()) : r1;\n        }\n    }\n    }\n", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "\nThis code defines a MaterialPanel class that contains a MaterialButtonsPanel class that has a layout with properties for the material's properties. The MaterialButtonsPanel class has a poll method that checks if the material is a surface or wire material and if the engine is compatible. The draw_header method sets up the", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           //MAPPER 16\n            var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n            mapper16_latch1 = map16.Latch1;\n            mapper16_latch2 = map16.Latch", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           _jMnuRoot.add(getOpenDocumentMenuItem(\"Open Document\", oActionListener);\n        }\n        private void addCloseDocumentMenu(JMenu _jMnuRoot){\n            ActionListener oActionListener = new ActionListener(){\n                public void actionPerformed(java.awt.", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\n\n\t//----------------\n\t// Weapon Shop\n\t//----------------\n\t// Page 1\n\tAdd(\"Weapon Shop\", 700", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\treturn Math.Max (SizeHeightToFitWithMin (min), Frame.H);\n\t}\n}\n}\n\nThis is a custom view class that has a frame and a background color. It also has a border that can be set to different colors. The view can be hidden and shown", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "       return self.announcement.title\n\nThis code defines a Django model for announcements, with fields like title, slug, author, creation date, last content modification date, publication date, type, site wide flag, content, content_html, content_text, tags, last modification date,", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "\nThis configuration file sets up Sphinx to generate documentation for the Kotori project. It defines the source files, documentation structure, and various options for the HTML, LaTeX, and Texinfo output. The configuration file also defines the project name, version, and copyright information.\n\nThe configuration file includes several options", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "   rows = cursor.fetchall()\n    for row in rows:\n        print \"Row is: sdate %s, stime %s, edate %s, etime %s, duration %s, src_callsign %s, max_altitude %s, registration %s\"", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "   conn.table('projects').insert(project_id, timestamp)\n    conn.table('snapshots').insert(project_id, timestamp)\n    conn.table('snapshots').insert(project_id, timestamp)\n    conn.table('snapshots').insert", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tif (HasKeyword(\"complicity\"))\n\t\t\t\t{\n\t\t\t\t\tGiveKeyword(\"complicity\");\n\t\t\t\t\tMsg(\"You're right, I'm guilty as charged! I've been hiding something from you...<br/>", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\tname\t- aname/ename/gname\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead = ()", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "\nThis is an Ansible callback plugin that writes playbook output to a JUnit formatted XML file. The plugin makes use of the following environment variables:\n\n* JUNIT_OUTPUT_DIR (optional): Directory to write XML files to. Default: ~/.ansible.log\n* JUNIT", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "           }\n        }\n    }\n}\n\nThis code resolves URLs by first checking if the URL is already resolved. If it is, it returns the resolved URL. If not, it tries to resolve the URL using UnshortenIt. If UnshortenIt fails, it tries to resolve the URL", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   for key in primary.keys():\n        pkg = primary.items[key]\n        print(\"Primary does not contain package: \" + build_nevra(pkg.name, pkg.epoch, pkg.version, pkg.release, pkg.arch))\n    raise", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "           build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n\nThis code defines a `install_lib` command that installs all Python modules (both", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < disassembledValues.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = disassembledValues[j];\n\t\t\t\tif (InitializeLazyProperty(fieldName, entity, session,", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '--job-name', job_name,\n        '--log-dir', log_name,\n        '--job-id', str(request['job_id'])\n    ]\n    return sge_cmd_arg\ndef get_job_id(request):\n    return request", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           var model = new EventDelegateViewModel();\n            return View(\"Form\", model);\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        public ActionResult", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                   var circle = (Circle) obj;\n                    return string.Format(\"({0},{1},{2})\", circle.X, circle.Y, circle.Radius);\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex);\n               ", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "   def handleFree(self):\n        self.html = self.load(self.url)\n        action = json_loads(self.html)\n        self.logDebug(action)\n        if \"success\" in action:\n            if action['success'] == \"showCaptcha\":\n", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t// If no harvestable resources are found, return null.\n\t\t\tif (path.Count == 0)\n\t\t\t\treturn null;\n\t\t\t// Return the closest harvestable resource.\n\t\t\treturn path[0];\n\t}\n\tpublic", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "\nThis code is a Cobbler sync module that handles the tftpboot tree layout. It is responsible for creating the tftpboot directory structure, copying files to the tftpboot directory, and making the default pxe menu. It also handles the dhcp configuration and tftpd configuration.\n\nThe", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       Event.Builder eventb = new Event.Builder();\n        eventb.setSeverity(EventSeverity.UNKNOWN);\n        eventb.setMessage(\"\");\n        return eventb;\n    }\n}\n\nThe code above provides an implementation of an EventProducer", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           while (context.Suffix != PpmContext.ZERO)\n            {\n                PpmState state = CreateState(context);\n                if (state.Symbol == symbol)\n                {\n                    goto NoLoop;\n                }\n                states[stateIndex++] =", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "           return new DicomAttributeSL(tag, bb);\n        });\n        }\n    }\n}\n\nThis code defines a set of static classes that represent the different DICOM value representations (VRs) used in DICOM. Each class has a name, a specific character set,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(new Session(tFull[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[111], t", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "       o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 0)\n        self.assertEquals(b'abcdefghij', self.read(o))\n    def test_insert_into_file_with_error(self):", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 32-bit (", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   ax.plot(cr['combined'][app][VC]['durations'], label=app)\n    ax.set_xlabel('Runs')\n    ax.set_ylabel('Time in ms')\n    ax.set_title('%s, %s, individual %ss", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "       self.assertEqual(self.mockos.seteuidCalls, [])\n        self.assertEqual(self.mockos.seteuidCalls, [])\n        self.assertEqual(self.mockos.setegidCalls, [])\n        self.assertEqual", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t}else if(model.isArmed() && model.isRollover()){\n\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\tg.fillRect(x, y, controlSize - 1,", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "   winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[0])\n\nThis code tests the KNN classifier and PCA/k-NN classifier in various ways. It simulates patterns with different numbers of samples and different distances. It also tests", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(kind, offset, value);\n    }\n}\n\nThe code above defines an OhmArrayLayout class that implements the ArrayLayout interface. It has a lengthOffset field that represents the offset of the length field in the header, and a headerSize field that represents the size of the", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            // attempt to resolve assembly reference\n            string assemblyFile = ResolveFromFolderList(Project.GetOutputDirectory(), relativePath);\n            if (assemblyFile == null) {\n                Log(", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return string.format(args, **kwargs)\n\ndef get_random_int(min, max):\n    return random.randint(min, max)\n\ndef get_random_float(min, max):\n    return random.uniform(min, max)\n\ndef get_", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       Dlasdq.dlasdq(\"U\", i25, i18, i16, i11, paramArrayOfDouble1, i16 - 1 + paramInt5, paramArrayOfDouble2, i16 - 1 + paramInt6, paramArray", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\tstr += s.name + \" \\n\";\n\t\t}\n\t\tstr += \"Current State: \" + _current_state.name + \"\\n\";\n\t\tstr += \"Current Transition: \" + _current_transition.name + \"\\n\";\n\t\treturn str", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               });\n            #endregion Lucian\n            #region Lux\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lux\",\n                    SpellName = \"LuxQ\",\n                    Slot = SpellSlot.Q,", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.user\", \"test.tenant\"));\n}\n\nThe code above is a base component test for the model management functionality. It includes the mandatory stubbed services and mocks to be able", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       proc = subprocess.Popen(\n            ['something', 'a', 'b'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            close_fds=True)\n        out,", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tPropertiesService.Start();\n\t\t\tResourceService.Start();\n\t\t}\n}\n\nThis code defines a CoreStartup class that helps starting up ICSharpCode.Core. It provides methods to add AddIns, configure external AddIns, and configure user AddIns", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "}\n\nThis is an abstract class that represents a constraint in a dataset. It has properties like ConstraintName, ExtendedProperties, Table, and ConstraintCollection. It also has methods like AddToConstraintCollectionSetup, IsConstraintViolated, RollbackAssert, RemoveFromConstraintCollectionClean", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.verticalLayout_3.addWidget(self.gridLayout)\n\nThis code creates a settings dialog with several groups and layouts. The main layouts are:\n\n- verticalLayout_1: contains the settings_ui_groupbox group box\n- verticalLayout_2: contains the grid", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "           }\n            return super.onResult( result );\n        }\n    }\n    private void showTaf( Intent intent ) {\n        Bundle args = getArguments();\n        String stationId = args.getString( NoaaService.STATION_ID );\n        // Get the Taf data", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\tstring continents = \"from Continent\";\n\t\t\tint results = s.CreateQuery(continents).List().Count;\n\t\t\tQueryStatistics continentStats = stats.GetQueryStatistics(continents);\n\t\t\tAssert.IsNotNull(continent", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "\n            if (uiByteValue != 0)\n            {\n                uiCRCITTSum ^= (uiCRCITTSum << 8) ^ crcTab[uiByteValue];\n            }\n            else\n            {\n                uiCRCITTSum ^= (ui", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn 1.0F;\n\t}\n}\nThe code above is a custom sentry class that extends the vanilla sentry class. It adds some additional functionality like disguising the sentry, allowing it to target players, and having a speed module. It also has some custom methods to", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                new CeylonHyperlinkDetector() };\n        } else {\n            return new IHyperlinkDetector[] {\n                new CeylonJavaBackendHyperlinkDetector(), \n                new CeylonJ", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.l.addWidget(self.drawingModeWidget)\n        self.l.addWidget(Object3DAspect(self)\n        self.l.addWidget(Object3DScale(self)\n        self.l.addWidget(Object3DPrivateInterface(self))", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t{\n\t\t\t\t\ttoSet = new Point2D( sender.Mobile.Location );\n\t\t\t\t\tshouldSet = true;\n\t\t\t\t\tshouldSend = true;\n\t\t\t\t\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                     chosenObj = selectConverter.convert(value);\n                      if (chosenObj.equals(value))\n                      {\n                         result = chosenObj;\n                      }\n                  }\n                  else\n                  {\n                     // Try to convert from the String representation\n", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tif (i!=j)\n\t\t\t\t\tsb.append(\" \"+i+\"->\"+j+\" \\t\"+fractionWithAmount[i][j]+\"\\t\");\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n}\n\nThe code", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\nThe code above shows an example of how to create an API session, procure purchase orders from a supplier, and then check the results of the procurement. The API session is created using the `APIv1OrgSession` class, which takes the organisation ID, API key, and API password as", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\tget { throw new NotImplementedException (); }\n\t\tset { throw new NotImplementedException (); }\n\t}\n\t}\n}\n\nThis code defines a ClientOperation class that represents a client operation. It has properties like Action, ReplyAction, BeginMethod, EndMethod", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        //expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(2);\n        //expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject).times(2);\n", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\treturn viewport.ToVector2 () - v;\n\t}\n\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport)\n\t{\n\t\treturn viewport.ToVector2 () - v;\n\t}\n}\n\nThis code provides a set", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "endpoint_key = endpoint_key()\nendpoint_value = endpoint_value()\nendpoint_stats = endpoint_stats()\n\nThis code defines a class XDRStruct that contains a list of members. It also defines classes XDRUnion, XDRTypedef, and XDRStruct that are used to", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);\n\t\t\t}\n\t\t}\n        }\n    }\n\nThe code above is a server class that listens for incoming connections on a specific port and processes incoming data from clients. It also broadcast", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           switch (type) {\n                case RequestType.Step:\n                    // ...\n                    break;\n                case RequestType.Activity:\n                    // ...\n                    break;\n            }\n        }\n    }\n}\n}\n\nThis code is a Google Fitness", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "\nThe code above generates the following helper functions:\n\n- SingleUseCallback<ReturnType%s%s> which is a single-use callback with %d arguments.\n- Callback<ReturnType%s%s> which is a multi-use callback with %d arguments.\n- SingleUseCallback", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   return HttpResponse(\n        simplejson.dumps(range_item_dict(items)), content_type=\"application/json\"\n    )\n    \"\"\"\ndef range_csv(filename, items):\n    \"\"\"\n    Returns a range query result in CSV format.\n    The order of items", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(\"score\"), null/* c */,\n                        Scope.DEFAULT_CONTEXTS));\n            }\n        }\n        assertEquals(expected, rewrite(given));\n    }\n}\n\nThis test case demonstrates how the ASTSearchOptimizer can", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       return super(UserDetailView, self).post(request, *args, **kwargs)\n\nThis code defines a `UserDetailView` class that inherits from `CreateOrUpdateView`. It provides a form for editing a user's details, including their username, email, first name, and last", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    #endregion\n  }\n}\n\nThe Assembly class has the following properties:\n\n- Aliases: A list of aliases for the root namespace of the referenced assembly.\n- PublicKey: The encrypted", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           // Initialize the solver fields\n            // Set the convergence monitor\n            if (_iterator == null)\n            {\n                _iterator = Iterator.CreateDefault();\n            }\n            if (_preconditioner == null)\n            {\n                _preconditioner = new UnitPreconditioner();", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\tApfloat median = sortedNumbers[left];\n\t\treturn new Apfloat[] {median};\n\t} else {\n\t\tApfloat median = (Apfloat) Math.median(sortedNumbers, left, right);\n\t\treturn new Apfloat[] {median};\n\t", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "           parent[v] = edge.parent\n            v = edge.parent\n            while v != -1:\n                parent[v] = edge.parent\n                v = edge.parent\n            parent[v] = edge.parent\n            parent[v] = edge.parent\n            parent[", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       result['csv_mapping'] = csv_mapping.to_json()\n        result['enrich_mapping'] = mapping_json\n        return result\n    def test_enrich_backend(self):\n        self.enrich_backend = None\n        self.ocean_backend = None", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tslot.Value.AddBot(botController.GetBot(slot.Key));\n\t", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t    return base.ToString();\n\t\t}\n\t}\n}\n}\n\nThis code defines a SmbException class that can be used to represent any CIFS error. It provides constants and text messages for many common error codes, as well as a GetMessageByCode method that can be", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return struct.pack('!HBL', frame_header.length, frame_header.frame_type, frame_header.raw_flag_bits, frame_header.stream_id) + padding_bytes\n\nThe code defines an enumeration for the different frame types, frame flags, and error", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           var firstNode = cluster.Nodes.FirstOrDefault();\n            var lastNode = cluster.Nodes.Last();\n            var firstEdge = cluster.Edges.FirstOrDefault();\n            var lastEdge = cluster.Edges.Last();\n            if (firstNode.DebugId != lastNode", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\nvoid btKinematicCharacterController::setGhostObject (btRigidBody* ghostObject)\n{\n\tm_ghostObject = ghostObject;\n}\nvoid btKinematicCharacterController::getGhostObject()\n{\n\treturn m_ghost", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (ExpressionTree initializer : initializers) {\n            // Check if the initializer is a reference to \"this\".\n            if (TreeUtils.isExplicitThisDereference(initializer)) {\n                // If it is, then the array is not @Unique.\n                check", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound != null)\n\t\t\t{\n\t\t\t\tnbttagcompound.setInteger(\"color\", color);\n\t\t\t}\n\t}\n}\n}\n\nThis code defines an item called \"ItemArmorCyberware\" that", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\t_returnType = (Type)Type.GetType(typeAttribute.Value);\n\t\t}\n\t}\n}\n}\n\nThis code defines a FunctionItem class that represents a function comment item in the JSTools.Parser.DocGenerator. The class has properties like _access", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t}\n\t}\n\nThe test cases in this file test various properties and methods of the TrackBar control, including:\n\n- TrackBar.AutoSize: This property determines whether the TrackBar automatically adjusts its size based on the value.\n- TrackBar.LargeChange: This property", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\twhen(classType.isClass()).thenReturn(false);\n\t\twhen(classType.castToClass()).thenReturn(classType);\n\t\twhen(classType.isInitialized()).thenReturn(true);\n\t\twhen(instrumentationApplier.addInstrumentation", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.currentStmt != null) {\n\t\t\tif (other.currentStmt == null)\n\t\t\t\treturn false;\n\t\t} else if (!this.currentStmt.equals(other.currentStmt))\n\t\t\treturn false;\n\t", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideLExtent[end][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this right constituent stretch far enough to reach the left constituent?\n              continue;", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "           ['rsync', '--no-human-readable', '--list-only', '-r', 'src', 'dst'],\n            shell=False, env=None,\n            stdout=PIPE, stderr=PIPE, stdin=PIPE,\n            preexec_fn=", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.Runt", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\twriter.attribute( null, \"b\", String.valueOf( b );\n\twriter.endTag( null, name );\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( (proxyThat != null) && (getClass() == proxyThat.getClass()) ) {\n\t\t\t// Compare fields\n\t\t\tif ( !(getContactDate().equals(proxyThat.getContactDate()) ) ) {\n\t\t\t\treturn false;\n", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\nThe code is a multi-body simulation using the Lub_Solver solver. It reads in input files containing the positions, orientations, and velocities of the bodies, and then creates rigid bodies of the specified types. It then solves the equations of motion using the Lub_Solver solver, calculating", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       if cdata is None:\n            return\n        # We can remove the Subtensor\n        ret = node.op.get_outputs(node.inputs)\n        # Copy over previous stacktrace\n        copy_stack_trace(node.outputs, ret)\n        return [ret", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   class Meta:\n        model = PermissionGroup\n        fields = ('name', 'description', 'order')\n        helper_class = SubmitCancelFormHelper\n        helper_cancel_href = \"{% url 'view_community_groups' community.name %}\"\n\nThis code defines several forms", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "           return query\n        return query\n    def after_compile(self, query):\n        \"\"\"Receive the :class:`.Query` object after it has been\n        compiled into a core :class:`.Select` object.\n        This event is intended to allow changes to the query given::\n            @", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "           self.system.add_xml_node(xml_object)\n\nThis code defines a ConditionalModule class that can be used to create a conditional xmodule. The ConditionalModule class has a Conditions class that defines the conditions for which the module will be shown. The ConditionalModule class also has", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       for key, old_value, new_value in data_model_changes:\n            global_changes.append(ArrayValueChange(to_global(key), old_value, new_value)\n        return global_changes\n    def translate_filter_changes(self, filter_model_", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t}\n\t}\n\t[XmlType(\"ldtoken\")]\n\tpublic sealed class Ldtoken : Instruction\n\t{\n\t\tpublic Ldtoken() : base(OpCodes.Ldtoken)\n\t{\n\t}\n\t}\n\t[XmlType(\"ld", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\tthis.objYLabel.TabIndex = 13;\n\t\tthis.objYLabel.Text = \"Description...\";\n\nThe form has several text boxes,", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"test/mail/syncmail.1\",\n                              \"test/mail/syncmail.", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n        }\n        for (Map.Entry<String, String> entry : csvData.entrySet()) {\n            termData.add(entry.getKey(), entry.getValue());\n        }\n   ", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassiveFlower()) {\n\t\t\t// ...\n\t}\n}\n}\n\nThis class represents a Generating Flower SubTileEntity. It has a few properties and methods:\n\n- mana: The amount of mana the flower has.\n- red", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           intrinsicCohesion += this.getBelongingStrength(component, c);\n        }\n        return intrinsicCohesion;\n    }\n}\nThe code is a Java implementation of the RNHM algorithm for community detection in temporal networks. It uses a THash", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "\nThe code above is a Python script that aims to upgrade the Invenio database schema from version 1.1.0 to version 1.2.0. The upgrade involves changing the underlying data model to allow for extended BibDocs and MoreInfo. The script performs the following steps:\n\n1", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tthis.Dispose();\n\t\t}\n\t}\n}\n}\n\nThis code is a Windows Forms application that displays a tree view of computers and a list view of processes for each computer. The user can select a computer and view its processes. The user can also add, remove,", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date exceptionDate : exceptionDates) {\n      exDateList.add(toDatable(exceptionDate));\n    }\n    return exDateList;\n  }\n}\n\nThe code above is a generator of event occurrences built on the iCal4J", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.SourceEventName = SourceEventName;\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags = HideFlags.HideAndDontSave", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "       // ...\n        }\n        return resultBean;\n    }\n}\n}\n\nThe above code is a RESTful web service that provides RESTful endpoints for managing subnet gateways and span ports. The endpoints are annotated with @RequestMapping, @ResponseBody, and @Request", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t}\n\t}\n\t}\n}\n}\n\nThis is the generated code for the form. The form has several components like buttons, grids, and labels. The form also has several context menus. The form is", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return (int) (rnd.nextInt() % size);\n}\n}\n\nThe OMEData class is an abstract data container for testing. Sub-classes can set whatever values they like in the init() method. After the OMEData instance is inserted into the test class by Spring, it", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "                   la = LinkAnnotation()\n                    la.subject = man_obj.uuid  # the subordinate is the subject\n                    la.subject_type = man_obj.item_type\n                    la.project_uuid = man_obj.project_uuid\n                    la.source", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .shrinktofit = \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .mergecells = \")\n                .Append(StringUtil.ToHexString(Mer", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t// half-width kana.\n\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\tvalue = ((int) (extraToJis [value])) |\n\t\t\t\t\t(((int) (extraToJis [value", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n    if   obj.mnemonic in (\"ST_A\", \"ST_D\", \"ST_DA\", \"ST_D\", \"ST_H\", \"ST_HU\", \"ST_W\", \"ST_W\") :\n        # ...\n\nThe code is a Python function that", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.getStream();\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap map = new JRPropertiesMap(properties);\n\t\t\treturn map;\n\t\t}\n\t\tcatch (IOException", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "\n    public void save()\n    {\n        // Save the world settings to the world info\n        WorldInfo worldInfo = new WorldInfo(this.seed, this.theGameType, this.mapFeaturesEnabled, this.hardcoreEnabled, this.terrainType);\n        worldInfo.", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\tcsd.DiscretionaryAcl = null;\n\t\tcsd.DiscretionaryAclProtection = false;\n\t\tcsd.SetDiscretionaryAclProtection (false, true);\n\t\tcsd.DiscretionaryAcl", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "   def __send(self, urldata):\n        if self.__stopped:\n            return\n        gatekeeper.wait()\n        self.__done += len(urldata)\n        basedata = urlencode({\n            \"format\": \"json\",\n            \"client\": APP_", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       // Add any additional RPCs here\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       return rootLayout;\n    }\n}\n\nThis code is a fragment that displays a message view for a message in the IDEC Mobile app. The message view contains various details about the message, including the subject, from and to fields, date, and message ID. The fragment also contains buttons for replying", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           op_cc = np.linalg.inv(self.symmetry.op_scc[s])\n            op_cc = np.eye(3, dtype=int) - op_cc\n            op_cc = np.eye(3, dtype=int)\n", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 2555));\n        Response response = utkastController.createUtkast(intygs", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\t\tforeach (ILNode child in block.GetSelfAndChildrenRecursive<ILNode>();\n\t\t\t\t\t\tif (child is ILBlock) {\n\t\t\t\t\t\t\tILBlock childBlock = child as ILBlock;\n\t\t\t\t\t\t\tif", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t}\n\t    //set the ragdoll state\n\t    IsRagdoll = ragdoll;\n\t    //set the ragdoll position and rotation\n\t    if (IsRagdoll)", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def __init__(self, config={}):\n        self.name = \"Fracture\"\n        self.top = ClassFactory( [InterfaceNodeSet, InterpolatedNodeSet] )\n        self.layer_type = LayerType.fracture\n        self.polygon_", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "\n    }\n}\n\nThis code implements the GOST 28147 OFB counter mode (GCTR) using the MediaTek BlockCipher. It provides a basic constructor, an init method to initialise the cipher and IV, a processBlock method to process one block of", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source );\n        }\n        @Override\n        protected Iterator<PatternMatch> createFilteredIterator()\n        {\n            return new Iterator<PatternMatch>()\n            {\n                Iterator<PatternMatch> source = source.iterator();\n                Iterator<PatternMatch> filtered", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "       else:\n            slice_json[key] = value\n    if comments:\n        slice_json['comment'] = u'\\n\\n'.join(comments)\n    return slice_json\ndef transform_values_holder_xml_json_to_json(values_holder_xml_", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "     }\n\nThe code above is a panel that displays internal frames and allows the user to switch between them. The panel contains a toggle button for each internal frame. When the user clicks on the toggle button, the internal frame associated with the button is set to front. The user can also close the internal frame by clicking", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "   getRandLC()\n\nThis code defines a client-side function getRandLC() that generates a random LC file and returns the file name, redshift, and data. The getLC() function returns the file name, redshift, and data for a given SDSS J2000", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n    {", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table1.TABLE_NAME, newId, null, null);\n                    //Update budget items\n                    db.update(Db.Table4.TABLE_NAME, newId, null, null);\n                }\n\t\t\t}\n\t\t\tdb", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "\n    }\n    }\n}\n\nThis code provides a way to check if a file is signed using Authenticode. The AuthenticodeTools class provides methods to verify the file's signature and check if it is trusted. The IsTrusted method takes a file path as an argument and returns true", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "```\n```\nThis is a Django 1.8 configuration file for a Django project. It defines various settings and configurations for the project, including:\n\n1. The default database backend to use (PostgreSQL).\n2. The database router to use for routing database queries.\n3. The email backend", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t{\n\t\t\tqueue[0].Cancel(numberToCancel);\n\t\t}\n\t}\n\tpublic void FinishProduction()\n\t{\n\t\tif (queue", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "       self.treeView.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)\n        self.treeView.customContextMenuRequested.connect(self.rightClickMenu)\n\nThe above code is a GUI application that allows the user to browse files and directories on the local file system", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_m4.sub(re_m4, code)\n        self.outputs.append(self.path.find_or_declare(code))\n        self.outputs.append(self.path.find_or_declare(code))\n        self.", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer:\")\n        return result\n\nThis code defines a PlanningServer class that implements the ipa_pars_main.msg.LogicPlanFeedback interface", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx + reactorExtent - 2 ] + chemical[ 0 ][ idx + 2 ]\n\t\t\t\t\t\t\t\t- 4 * chemical[ 1 ][ idx - reactorExtent", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n            default:", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam.Value = entity.obj_id;\n\t\t\tqs.Parameters.Add(Param);\n\t\t}\n}\n}\n\nThis is an abstract class that defines the common parameters and methods for the ORC_ConteudoItem entity. The class has the following properties", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t}\n\tpublic System.Type ReturnedType\n\t{\n\t\tthrow new NotImplementedException();\n\t}\n\tpublic bool IsMutable\n\t{\n\t\tthrow new NotImplementedException();\n\t}\n\t", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "   self.cli_load_config([\"ntp authentication-key 32 1111\"])\n    def get_ntp_auth_exist_config(self):\n        \"\"\"Get ntp authentication existed configure\"\"\"\n        self.get_ntp_auth_conf()\n", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.store.update_item(component.location, editing_user, 'edited_on', after_create)\n        check_node(component.location, after_create, editing_user, None, after_create, editing_user)\n        # Now the component has changes\n       ", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (ch & 0xff));\n        digest.update((byte) (ch & 0xff));\n        for (int i = start; i < length; i++) {\n            digest.update((byte) ((TEXT_CODE >> 2", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict)\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict)\ndef mklogical(value):\n    return aetypes.Logical(value)\ndef mktext(value):\n    return aetypes.Text", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           return ResolveType(api, controllerName, actionName, parameterNames, sampleDirection, out formatters);\n        }\n        private Type ResolveType(ApiDescription api, string controllerName, string actionName, IEnumerable<string> parameterNames, SampleDirection sampleDirection, out Collection<MediaTypeFormatter", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "           value = entry.get_active_text()\n            self.on_quit_cell(record, column.name, value, callback=callback)\n            return True\n        else:\n            return False\n        return True\n    def on_quit_cell(self, record, fieldname,", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newTypedStringValue(newLocationList));\n        }\n        return beanProperties;\n    }\n}\n\nThe LegacyConfigPostProcessor class is a Spring BeanFactoryPostProcessor that up", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "   f.readline()\n    except IOError:\n        # No blank lines in file\n        f = None\n    finally:\n        f.close()\n    if f:\n        f.seek(0)\n        blank_lines = f.readlines()\n        f.close", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       ensureReadAccess( directedAclKeys.getAclKey() );\n        spm.addPrincipalToPrincipal( directedAclKeys.getPrincipal(), directedAclKeys.getAclKey() );\n        return null;\n    }\n}\n\nThe PrincipalDirectoryController", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element.findall('.'):\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(element):\n        \"\"\"Verify the tag of the element.\n        This verifies that the tag is what is expected.\n", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   return clone\n    def _get_node_type(node):\n        return node.nodeType\n    def _get_node_name(node):\n        return node.nodeName\n    def _get_node_namespace(node):\n        return node.namespaceURI\n    def _get", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t\nThe test cases cover the", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.KeyLocatorDigest, endOffset)) {\n\t\t\t\t// Decode a keyLocatorDigest.\n\t\t\t\tKeyLocatorDigest keyLocatorDigest = new KeyLocatorDigest", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.updateCooldown(delta);\n        }\n    }\n}\n\n}\n\nThis is a basic game", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       GameEngine.model().getGame().getGameJoin().add( action );\n        hide();\n      }\n    } );\n    m_btnOk.setEnabled( false );\n  }\n}\n\nThis is a dialog box that appears when a player joins a game. The player is asked", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\", \".join(msgs))\n    return r.data.decode('utf-8')\n    # Save the file to the CWD with the included filename\n    if progress:\n        print(\"Downloading file...\", end=\"\")\n    with open(os.path.join", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t}\n\t\t\t\tfailureReason = response.ErrorMessage;\n\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t}\n\t\tcatch (Exception e)\n\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   return [coeff * met.weight for met, coeff in reaction.metabolites.items()]\n\nThe code calculates the production envelope for a given set of reactions by:\n\n1. Finding the minimum and maximum flux values for each reaction.\n2. Calculating the", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "   return self.get_queryset().filter(store__path=pootle_path, user=user)\n\nThis code defines a TranslationStore model that stores translations for a Unit model. The TranslationStore model has a ForeignKey to the Unit model. The TranslationStore model also has", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "\n        migrations.CreateModel(\n            name='Training',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('name', models.CharField(max_length=", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "   self.ipdests.add_ip(poxpkt.srcip, None)\n    self.ipdests.add_ip(poxpkt.dstip, None)\n    self.trafgen_ip = poxpkt.srcip\n    self.trafgen_", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (m_RecentItems.contains(item))\n      return;\n    m_RecentItems.add(item);\n    if (m_AddShortcuts) {\n      // Add shortcut to menu\n      JMenu menu = (JMenu) m_Menu;\n      J", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.Follower is target)\n                return true;\n            // Checked for any other indirect target\n            return false;\n        }\n    }\n}\n\nThis code defines a skill called DetectHidden that allows the player to detect hidden enemies and items. The skill uses a", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "   if (halfTradePeriodDate == null && takeOfferDate != null)\n        halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;\n   ", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t\treturn a;\n\t}\n\treturn a;\n}\n}\n\n//---------------------------------------------------------------------------\n// Graph construction routines\n//-----------------------------------------------------------\npublic class Graph {", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tif(mAltReadMethod)\n\t\t\t\tHIDImports.HidD_Read(this.mHandle.DangerousGetHandle(), buff, (uint)buff.Length);\n\t\t\telse\n\t\t\tmStream.Read(mReadBuff,", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t}\n\t\tpublic int compare(MskJointVo o1, MskJointVo o2)\n", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\tSendEmail( filePath );\n\t\t}\n\t\tcatch\n\t\t{\n\t\t\tConsole.WriteLine( \"failed\" );\n\t\t}\n\t}\n}\n\nThis code is a crash guard that will generate a crash report when the server crashes. It will copy the", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t.SetCacheable(true)\n\t\t\t\t.List();\n\t\t\tAssert.AreEqual(3", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           for (k++; i < N1 + N2 + N3; i++, k += 4)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n        }\n    }\n}\n\nThe code is a C# implementation", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       rate.create()\n\nThis code defines a `ComputeRate` class that represents a compute chargeback rate. It has a `description` attribute and a `currency` attribute. It also has a `fields` attribute that contains a nested dictionary with the rate details. The `create` method creates a new", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, dest, length );\n\t\t\t\tshadowBuffer.Unlock();\n\t\t", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.list.append(getConfigListEntry(_(\"Frequency\"), self.scan_cab.frequency))\n\nThis code is a part of the Satfinder plugin for Kodi. It is used to create a configuration menu for the plugin. The configuration menu has several sections:\n\n", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "   else {\n        TcpAddress.TcpAddressMask filterMask = TcpAddress.parse(filterStr);\n        tcpAcceptFilters.add(filterMask);\n    }\n    }\n}\n}\n\nThis is an Options class that provides options for a ZMQ socket. It has", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               // Read the next row of data\n            }\n            return fout.ToArray();\n        }\n        }\n    }\n    }\n}\n    }\n}\n\nThe code above is a PdfObject reader class that reads a Pdf file and returns a PdfObject. It", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface(':1.23'))\n        s.set_interface", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n    def make_product_database(self):\n        e2 = self.get_E_2_page_no_mat()\n        EtwoStore.prepare()\n        for z_index in xrange(len(e2.get_cohomology(self.options)):\n", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           Assert.AreEqual(TestAllTypes.Types.NestedEnum.BAR, builder.OptionalNestedEnum);\n            Assert.AreEqual(123, builder.OptionalNestedEnum);\n        }\n    }\n    }\n}\n\nThis test class contains a variety of tests", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n}\n}\n\nThe PersistentMap class is a persistent wrapper for a Java Map. It provides the basic methods of a Map, such as containsKey, containsValue, get, put, and remove. However, it also provides some additional methods that are specific to", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n}\n\nThis code logs various events in the auction system, including:\n\n- New auction items\n- Selling items", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "   return action_message\n\nThe code above defines a `HrEmployee` model with fields like `barcode`, `pin`, `attendance_ids`, `last_attendance_id`, `attendance_state`, `start_time_different`, `start_overtime_different`,", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\tgrdResultsRow row = form.grdResults().getRows().newRow();\n\t\nThis method creates a new row in the grid for the specified order investigation lite vo. If the order investigation lite vo has a specimen, it creates a new row with the specimen details. If the", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               return new Point(c.x, c.y);\n            }\n        }\n    }\n    }\n}\n\nThis code provides a managed wrapper around the SystemListView component in Windows. It allows you to access the list view's items, columns, and other properties through managed code. The", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       return maker.new_tab(cwd, profile, self.get_property('term_zoomed'))\n\nThis code defines a `Window` class that implements a top-level Terminator window. It contains properties like `title`, `isfullscreen`, `ismaximised`, `hide", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( _ + Guid.NewGuid().ToString( \"N\" ), managedType, marshalAttribute, arraySize ) );\n            }\n        }\n        return toReturn;\n    }\n    }\n    public class StructTypeInfo {\n", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t}\n\t}\n\tpublic override TypeReference BaseType {\n\t\tget {\n\t\t\treturn base_type;\n\t}\n\t}\n\tpublic override TypeReference", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n    }\n}\n}\n\nThis code defines a Rule Engine Object Model (ROM) that can be used to represent rule engines. The ROM has several instance variables:\n\n- evidenceCollection:", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "   self.context = OpenSSL.SSL.Context(OpenSSL.SSL.Context.new_default_context())\n    self.context.set_options(OpenSSL.SSL.Context.options(\n        OpenSSL.SSL.Context.options.default_options |\n        OpenSSL.SSL", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\tthis.vbox5.Add (this.hbox3);\n\t\tglobal::Gtk.Box.BoxChild w28 = ((global::Gtk.Box.BoxChild)(this.vbox5 [this.hbox3]);\n\t\tw28.Position = 0;", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "               notebooks[\"board\"].set_current_page(new_num)\n\n    def page_reordered_callback (notebook, child, new_num, headbook):\n        notebooks[\"board\"].set_current_page(new_num)\n        log.info(\"Page", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Change-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_1),\n    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_2),\n   ", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\treturn \"MutablePersistenceUnitInfo{\" +\n\t\t\"persistenceUnitName='\" + persistenceUnitName + \"'\" +\n\t\t\", persistenceProviderClassName='\" + persistenceProviderClassName + \"'\" +\n\t\t\", transactionType=\" + transactionType +\n\t\t\", nonJ", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n}\n\n}\n\nThe above code is an abstract base class for edit parts in the Eclipse WST XSD UI ADT editor. It provides some common functionality for edit parts, such as handling actions, property changes, and feedback. It also provides some edit policies for accessibility and keyboard", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\tthis.butAttach.Location = new System.Drawing.Point(88, 656);\n\t\tthis.butAttach.Name = \"butAttach\";\n\t\tthis.butAttach.Size = new System.Drawing.Size(75, 25", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       return enc;\n    }\n}\n\nThis class provides some utilities for working with Alfresco Web Editor tags. It can get the list of marked content that has been discovered, and it can write the HTML for a content marker.\n\nThe getMarkedContent method returns a list of Marked", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1-Legacy\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC4231_TC2_Normal ()\n\t", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    sum += CDRSerializer.alignment(sum, 4); // EnumSwitcher type\n\t    \nThe method calculates the maximum size in CDR for this class by first calculating the size of the Enum type and then the size of the EnumSwitcher type. The size of the", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      else\n        return java.GetValue(\"JavaHome\") as String;\n    }\n  }\n}\n}\n\nThis is a C# class that implements the IService interface and provides a Resin service. It has a StartResin and StopResin method that execute", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "   if comment is not None:\n        return [comment, l]\n    else:\n        return None\n    return None\n    def find_env(self, name):\n        for l in self.lines:\n            if re.match(r'%s' % self.ansible,", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "\nclass MeshModifierVERTEX_WEIGHT_MIX(MeshModifierCommon):\n    ...\n\nThis code defines a MeshModifierVERTEX_WEIGHT_MIX class that inherits from MeshModifierCommon. It has some additional properties and methods that are used", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           if(rankCounts.length == 0)\n                rankCounts = new double[1];\n            rankCounts[0] = minLikelihood;\n        }\n        // calculate the likelihood for each peptide length\n        for(int peptideLength : DEFAULT_", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (int i = 0; i < vertex.neighbors().size(); i++) {\n            neighbors.add(vertex.neighbors().get(i).getEnd());\n        }\n        assertEquals(Arrays.asList(1, 2, ", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   def parser(self, choice, cap=self.cap):\n        if choice.lower() == 'list':\n            self.print_packets(cap)\n        elif choice.lower() == 'help':\n            print(\"Commands:\")\n            print(\"- list packets\")\n           ", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 161);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);\n", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "\n        'main.scan': {\n            'Meta': {'object_name': 'Scan',\n            'created': ('django.db.models.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               // If we don't have a type for the specified namespace and name, we need to check if it is a global type\n                // If it is a global type, we need to check if it is already processed\n                // If it is not a global type, we need to check if it is a", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state': 'validate', 'manager_id': False})\n    def holidays_validate_notificate(self, cr", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "       }\n        }\n        #endregion\n    }\n}\n\nThis code defines a custom grid class called GridBaseManager that provides a base class for other grids to inherit from. It contains properties and methods for loading data, filtering, searching, and displaying data. It also contains a BusinessObject collection", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "       return \"Mixer Line: \" + Name;\n        }\n    }\n}\n\nThis code defines a MixerLine class that represents a mixer line (source or destination). It has properties like Name, ShortName, LineId, ComponentType, Channels, SourceCount, ControlsCount", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = domainFactory.getDomainObject(ims.core.admin.domain.objects.CareContext.class, valueObject.getCareContext().getId());\n\t\t\tdomainObject.setCareContext(value10);\n\t}\n\t\n\treturn", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           [\"cargo\", \"build\", *env, *opts, *params]\n        build_end = time()\n        elapsed = build_end - build_start\n        if elapsed > 30:\n            notify(\"Servo build\", \"Completed in %0.2fs\" %", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tif (this.getParameterAsBoolean(PARAMETER_RELATIVE_TO_PREDICTIONS) == false || counts.length != 4) {\n\t\t\t\t// For reasonable utility functions adding just negatives", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "           Stashed.SetStashDiffs(gitStash.Name, ResourceManager.Strings.Stash, gitItemStatuses);\n        }\n        }\n        private void DropStash(object sender, EventArgs e)\n        {\n            var stashedItem = Stashes.SelectedItem", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm1_index).out_address == 0\n\nThe code is trying to assign the out_buffer0 -> bm1 address item to the lattice buffer. However, it is not able to do so because the out_buffer0 -> bm1", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (o instanceof AuthScope) {\n            AuthScope that = (AuthScope) o;\n            return match(that);\n        }\n        return false;\n    }\n}\n\nThe AuthScope class represents an authentication scope consisting of a host name, a port number, a realm name", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b,\n                        callback,\n                        asyncState);\n        }\n    }\n    }\n}\n}\n\nThis code is a sample web service proxy that can be used to encrypt messages using RSA and triple-des keys. The client application uses the AddClient class to select a", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\ts += \", \";\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n}\n}\n\nThe code is a Java class that represents a charge number and its", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\tEType = (EClassifier)value;\n\t\t\t\tbreak;\n\t\t\tcase \"eGenericType\" :\n\t\t\t\tEGenericType = (EGenericType)value;\n\t\t\tbreak;\n\t\t}\n\t\tbase.CSet", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "   if not os.path.exists(args.index_file):\n        log.msg('Index file does not exist - going through first time setup')\n        log.msg('===== First Time Setup =====')\n        log.msg('You\\'ll need to set a password used to encrypt", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.putx([134, ['Bit: %d' % ptype])\n        self.putb([135, ['Bit: %d' % mosi]])\n        self.putx([134, ['Bit: %d' % es]])\n        self.", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "         if (cursor >= limit) {\n            break lab1;\n          }\n          cursor++;\n        }\n        return true;\n      case 2:\n        // (, line 203\n        // or, line 203\n        lab2:\n        do {\n", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "\nThe code is trying to read a message from the LCM and then create a new SpyPlugin object based on the message. However, the message is not being read correctly. The fingerprint is being read as -1 instead of the actual fingerprint value.\n\nThe fingerprint value is being read as -", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   def _get_ocsp_must_staple(self):\n        return self.cert.get_extension_for_class(x509.OCSPMustStaple).value.value\n\nThe code above is a Python implementation of the CertificateInfo class from the Open", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\tstill_there = s.find(i) != s.end();\n\t\t\tif (still_there) {\n\t\t\t\t// Call the slot\n\t\t\t\tslot (i);\n\t\t\t}\n\t\t\telse {\n\t\t\t", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   # An interval below < 0x10000 remains the same\n    assert X.end >= 0x10000\n    # An interval >= 0x10000 is split up into two values.\n    # The first value is the first surrogate", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\nThe code is a Coco/R parser generator that can parse a grammar and generate a parser for it. The parser is generated using the Coco/R parser generator. The generated parser can then be used to parse strings that conform to the grammar.\n\nThe code starts by defining a Coco/R parser", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc['product_id'] = line.product_id\n            edi_doc['product_uom'] = line.product_uom\n            edi_doc['product_qty'] = line.product_qty\n            edi_doc['price_unit']", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS + \"s\");\n\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"openHAB", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "\n            nameMap.put(name, new ArrayList<PermissionEntry>(permissions));\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n}\n\nThe test cases cover the following scenarios:\n\n1. Testing that virtual nodes adhere", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "\nThe tests cover various aspects of the udev enumerator, including:\n\n- Matching devices based on different attributes (subsystem, sys_name, property, etc.)\n- Matching devices based on different types (input, output, etc.)\n- Matching devices based on different properties (DEV", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   device = Device(deviceToken)\n    user = User(device.app, loginId, password)\n    device.check_inspection()\n    device.notification_postDevicetoken(loginId, password)\n    user.login()\n    user.mainmenu()\n    user", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "   return rv\n\nThe code is a Python script that performs various tasks related to the Miriad dataset. It can be used to:\n\n1. Filter the data based on the frequency and time range.\n2. Calculate the closure phase and flagging statistics.\n3. Determine the", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           ItemID = reader.ReadInt();\n        }\n    }\n}\n\nThis is a custom item class that represents a keyring. It has properties like Resource, Crafter, and Quality, as well as methods to add and remove keys. It also has a list of keys that can be added", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Tuner tuner : devices) {\n            // Add the tuner to the list of tuners.\n            tunerList.add(new Tuner(tuner.getFullName(), tuner.getIpAddress(), tuner.getModel(), tuner.getAnal", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    return jobs;\n  }\n}\n}\n\nThis class manages application-level migrations.", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length == 3) {\n        // This is a valid entry\n        Entry entry = new Entry(split[0], split[1], split[2], ignoreCase);\n        entries.add(entry);\n      } else if (split.length == 2) {\n", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           if SCons.Util.is_List(env[n]):\n                env[n] = SCons.Util.find_file(env, n)\n            else:\n                env[n] = SCons.Util.find_file(env, n, path)\n        return", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "       return itertools.imap(make_it, features, itertools.count(1))\n    def __repr__(self):\n        return \"PythonDatasource\"\n\nThe above code defines a PythonDatasource class with a features() method that returns an iterable of Feature objects", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "   def __default(self, param):\n        return self.have[param] if self.have else self.want[param]\n\nclass F5RestClient(object):\n    def __init__(self, host, username, password):\n        self.host = host\n        self.", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   def fill(self, values):\n        changed = False\n        for key in values:\n            if key in ['name', 'display_name', 'location', 'data', 'playbook_name', 'playbook_display_name', 'repository', 'hosts', 'max_ttl',", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           result = (IAction) actionClass.newInstance();\n        }\n        return result;\n    }\n    public void setDbManager(String key, Object dbManager) {\n        if (this._dbManager.containsKey(key)) {\n            this._dbManager.remove(key", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n        self._test_request", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           # Check for existence of manifest file\n            if os.path.exists(manifestSrc):\n                # Check for existence of manifest file\n                # Check for existence of manifest file\n                # Check for existence of manifest file\n                # Check for existence of manifest file\n                # Check for existence of manifest", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           execute(getResources(), new SubProgressMonitor(getShell(), 1000));\n        } catch (CoreException e) {\n            recordError(errorStatus, e);\n        }\n        if (errorStatus.length > 0) {\n            displayError(errorStatus[", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t// Initialize the data\n\tdata.outputRowMeta = getInputRowMeta().clone();\n\tmeta.getFields(data.outputRowMeta, getStepname(), null, null, this);\n\t\n\t// Initialize the counts\n\tfor (int i=0;i<meta.", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   # XXX the `-3..-2` case seems counterintuitive.\n    # is \"{until-x}..{now-y}\" really better than \"{now-x}..{now-y}\"?\n    #\n    # (?) assert f('-3..-2', last", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           //Place the NPC\n            NPC npc = new NPC(x, y, z, map, types, fakespawnsA, fakespawnsB, fakespawnsC, fakespawnsD, fakespawnsE, sx,", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._check_guest_suspend_log(**args)\n        if s:\n            raise exceptions.TestError(\"Guest doesn't support suspend.\")\n\nThis code defines a GuestSuspend class that can suspend a guest either in memory or", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       assertThat(rc, is(true));\n\nThis test case is testing the issue #54 where the subscriber is unsubscribed from the topic but still receives messages. The test case creates a publisher and subscriber, binds the publisher to a port, and connects the subscriber", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().onSendRequest", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tvar compressedSize = GetCompressedUInt32Bytes(value);\n\t\t\tvar blob = new byte[compressedSize + value.Length];\n\t\t\tvar blobStream = new MemoryStream(blob);\n\t\t\tvar blobWriter = new BinaryWriter(blobStream", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.ui.status.add_message(desc)\n        self.fm.ui.status.add_message(os.path.basename(one_file.path))\n        self.fm.ui.status.add_message(os.path.basename(one_", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t}\n}\n\nThe test class contains several test cases that test the CreateInstance method of the Activator class. The test cases cover different scenarios like:\n\n- Creating an instance of a type with a constructor\n- Creating an instance of a type with a custom type\n- Creating an instance of a", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       locale = Locale.objects.get(code='de')\n        repo = self._setup(da, Action.ACCEPTED, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 3)\n        avs = AppVersion.objects.", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.Log.debug(\"User state changed to : %s\", userstate)\n            self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n            self.commands.answer(cmd)\n\n    def send_message(self,", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new PlayerGroupChangeLeaderEvent(group, player));\n        }\n    }\n}\n\nThis code defines a service for managing player groups. It provides methods", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "   def __str__(self):\n        s = []\n        formatter = self.rowparams[\"formatter\"]\n        outfile = self.rowparams[\"outfile\"]\n        for i in range(self.nrows):\n            if i in self.hidden_r:\n                if not", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2))\n        column.quantity_renderer.set_", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "   }\n    @Override\n    public int doEndTag() throws PageException {\n\t// provide to parent\n\tTag parent = this;\n\tdo {\n\t    parent = parent.getParent();\nNext line of code:\n    }\n    }\n}\n\nThis GridColumn class", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "           }\n        }\n        public void SaveXML(XmlNode element, FileVersion version)\n        {\n            try {\n                element.SetAttribute(\"Creature\", GUID);\n                element.SetAttribute(\"Race\", Race.ToString());\n                element.SetAttribute(\"Gfx\", G", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\telse if (m_Peerless == PeerlessList.MelisandeTrammel || m_Peerless == PeerlessList.MelisandeFelu", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(((ims.careuk.vo.beans.ChangeOfServiceVoBean)beans[i]).buildVo());\n\t}\n\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           new Version(1, new int[] { 0, 0, 0, 0 }, new ECBlocks(1, 0, 0, 0)),\n            new Version(2, new int[] { 0, 0, 0, 0 }, new ECBlocks", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t\tkdf.GenerateKey(p, pbKey, pbSalt, pbExpc);\n\t\t\t\tif(kdf.GetKeyLength() != 32) throw new SecurityException(\"Argon2-1\");\n\t\t\t\tif(Mem", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n}\n\nThe ManaItem class has the following methods:\n\n- canExportManaToItem(ItemStack, ItemStack): Whether the item can export mana to the given item.\n- can", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "```\nThis is a Django 1.11 settings file for a Django project. It defines various configuration options for the project, including database settings, authentication settings, and URL settings. The project uses Django's built-in authentication and session management systems, as well as the Haystack search engine. The project also", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\"but was {1}\"),\n\t\t\t\t\tNextFrame.PixelCount,\n\t\t\t\tLightCount);\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t}\n\t}\n\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList ==", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.number = p.readString();\n            dc.type = p.readInt();\n            dc.caller = p.readString();\n            dc.called = p.readInt();\n            dc.duration = p.readInt();\n            response.add", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\tif (licence.isApplication()) {\n\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (odrMetadata.getType().equals(MetadataEnumType", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                // Calculate the position of the vertex\n                Vector3 vertex = newVertices[x * ySizeP + y];\n                vertex.x = x * xPixelsPerTile;\n", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tresult = client.call(API_METHOD_ADD, new Object[] {testInt1});\n\t\t\t\n\t\t\tif (result != 0)\n\t\t\t{\n\t\t\t\tLog.i(TAG, \"Connection test failed. Returned result was", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\treturn new int[0];\n\t\t}\n\t\tpublic void setBlockSelectionStarts(int[] blockStarts)\n\t\t{\n\t\t}\n\t\tpublic void setBlockSelectionEnds(int[] blockEnds)\n\t\t{\n\t\t}\n\t", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"Not found\");\n        }\n        else {\n            try {\n                out.writeBoolean(true);\n                out.writeObject(found.object);\n            }\n            catch (NotSerializableException e) {\n               ", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                   16 + (~stactics_chardata_b[i] & 0x01),\n                    0, 0,\n                    0, 0,\n                    pixel_x, pixel_y,\n                    Machine.visible_area, TRANSP", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                   }\n                    case CollisionableObjects.Heroes:\n                        foreach (var hero in\n                            ObjectManager.Get<Obj_AI_Hero>()\n                            .Where(\n                                hero =>\n                                hero.IsValidTarget(\n                                    Math.", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       return graph.isInducingPath(x, y);\n}\n\nThis code implements the Fast Causal Inference algorithm with Jiji Zhang's augmented search rules R5-R10. The main methods are:\n\n- `convert()`: Converts the DAG", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   plcs.Push(pop.Parent);\n                }\n            }\n            return null;\n        }\n    }\n}\n\nThe Drawable class provides an abstract base class for elements that can be drawn in the 3DML scene. It contains properties like position, rotation, scale,", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (getFileId() == null) {\n            if (other.getFileId() == null) {\n                return true;\n            } else if (!getFileId().equals(other.getFileId())) {\n                return false;\n        }\n        } else if (getFile", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                   if (mobiles[i].AccessLevel == AccessLevel.Player)\n                    {\n                        AddDelay(mobiles[i]);\n                    }\n                }\n                }\n            }\n        }\n    }\n}\n\nThis code creates a potion that can", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\tHistory.Add(msg);\n\t\t}\n\t\treturn true;\n\t}\n}\n}\n\nThis code defines a WorldChatChannel class that represents a chat channel in the WorldChat module. It has properties like UID, Name, Summary, Token, Available", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n}\n}\n\nThe above code defines a mock OrganizationController class that can be used to test the OrganizationController class. The mock class has the same methods as the real OrganizationController class, but the", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                       final File selected = new File((String) mListView.getItemAtPosition(key));\n                        if (!selected.isDirectory()) {\n                            Intent intent = new Intent(Intent.ACTION_CREATE_ZIP_ARCHIVE);\n                            intent.putExtra(Intent.EXT", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "       this.channel.close(new ChatMessage(\"disconnect.endOfStream\", new Object[0]);\n    }\n}\n\nThe code is a NetworkManager class that handles incoming packets from a network channel. It has a channel attribute and a queued packet queue. It also has a packet listener", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "\n        z_arr[p_index] = z_dict[z_key]\n        z_err_arr[p_index] = z_dict[z_key][1]\n        t_arr[p_index] = t_dict[t_key]\n        t_", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    } else {\n      String names = recipients.stream().map(Recipient::toShortString).collect(Collectors.joining(\", \"));\n      return context.getString(resourceTwo, names);\n    }\n    return context", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env.update(extra_path)\n        env.update(extra_lib)\n        if gonk:\n            env.update([\"GONK_B2G_PRODUCT\", \"flame\"])\n        return env\n    def build_binary(self, release=False", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in iteritems(type_paths):\n                if test_cls is TestharnessTest:\n                    tests = [t for t in sorted(tests for t in tests]\n                else:\n                    tests = [t for t in sorted(tests]\n            self.", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compiledScript != null) {\n            compiledScript.remove();\n        }\n    }\n}\n\nThe code above is a Groovy scripting implementation for Freeplane. It provides a GroovyScript interface that can be used to execute Groovy scripts. The scripting implementation is based on", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "   }\n}\n\nThis code defines a base network layer class called WrappedNetworkLayer<T, R>. It provides an abstract class that can be used to implement dynamic base network layers. The class provides methods for reading, writing, and closing data adapters. It also provides methods for setting and getting", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     for i in range(energy.size):\n        Etf = energy[i]\n        grad_Etf = grad[i].flatten()\n        grad_E = Etf*grad_var+energy_var*grad_Etf+grad_means\n        grad_E =", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (this.ordinvcurrentstatus == null)\n\t\t{\n\t\t\treturn -1;\n\t}\n\t}\n}\n\n", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.size(), 2);\n    }\n}\n\nThe test class contains several tests that cover different aspects of the StackDao contract:\n\n1. Tests that the dao can get a stack by its id.\n2. Tests that the dao can create a", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       pf.addParameter(new Parameter(DEPTH, depth);\n        //EXCLUSION REGEXP\n        pf.addParameter(new Parameter(EXCLUSION_REGEXP, exclusionRegexp);\n        //INCLUSION REGEXP\n", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// Check for matching trivia\n\t\t\tif (candidate.Trivia.Any() && pattern.Trivia.Any())\n\t\t\t{\n\t\t\t\t// Check for matching trivia\n\t\t\t\tif (candidate.Triv", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "\n                    extendedWillHit += colisionList.Count;\n                    extendedFarmLocation = colisionList.FirstOrDefault(colisionList).Position;\n                }\n                int shortenWillHit = MinionManager.GetMinions(q.Range).Count;\n                int", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenu(new ContextMenu());\n\t}\n\n}\n}\n\n}\n\n", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   for line in frozen_output.splitlines():\n        if re.match(pattern, line):\n            return True\n    return False\n\nThe code above is a Python script that installs Node and Python prerequisites for a project. It uses the `sh` function from Paver to", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'm2m': [(6, 0, self.env['test_testing_utilities.sub2'].create({'name': 'a'}).ids)]\n        })\n        f = Form(r)\n        with self.assertRaises(AssertionError):\n            f", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert simplify(Sum(x, (x, 1, 2), (y, 1, 2)) - Sum(x, (x, 1, 2), (y, 1, 3)) == 0\n    assert simplify(Sum(x, (x, ", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret=", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "           this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else if (action == NotifyCollectionChangedAction.Remove)\n            {\n            this.InitializeRemove(action, changedItems, startingIndex);\n        }\n        }\n        private void InitializeMoveOr", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            InputStream is = new ByteArrayInputStream(streamWriter.toString());\n            Document testDocument = parser.parse(is);\n            streamWriter.close();\n            is.close();\n", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n            }\n        }\n        private void CheckAndOrNotConsistency(Condition g)\n        {\n            if (g.Comparison.HasValue())\n            {\n                if (g.Comparison", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "\t\t\t\tide.image = reader.ReadIconImage (width, height);\n#else\n\t\t\tide.image = reader.ReadIconImage (width, height);\n#endif\n\t\t\timageData [i] = ide.image;\n\t\t\tsizeObtained =", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               // adds the JSR block to the successor of the blocks found in the subroutine\n                // (JSR is the current block)\n                stack.addToSubroutine(id, nbSubroutines);\n            }\n        }\n    }\n}\n}\n\nThe Label", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           var result_of_this_method = instance_of_this_method.ToString();\n            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            WriteBackInstance(__domain, ptr_of_this_method, __mStack, ref", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition.select(position.getPosition());\n\t}\n}\n\nThe above code is a general page for pie chart settings. It has a title settings section, block settings section and a series settings section. The user can select the title font size, title color, title boldness", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImage=\", lastImageValue, \"newImage=\", currImageValue\n        self.assertEqual( int(currImageValue), 1, \"Failed to decre", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       self.kexgss.ssh_accept_sec_context(self.gss_host,\n                                       gss_kex=True)\n        self.kexgss.ssh_check_mic(mic_token)\n        self.kexgss.ssh_", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           // Add the new node\n            DefaultMutableTreeNode node = new DefaultMutableTreeNode(overallNodeName);\n            // Add the node to the tree\n            tree.addNode(node);\n            // Set the node's parent\n            node.setParent(tree.getRoot());\n", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "\n        return lines\n\n    def get_contract(self, employee_id, from_date, to_date):\n        contract_ids = self.env['smart_salary_simulator_se.contract'].search([('employee_id', '=', employee_id],", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "   cl1h, cl2h, cl = integrate_kkhalo(ell, lnzarr, chiarr, dVdzdOm, marr, mf, BDarr, rhobarr, rho_crit_arr, bias, Darr, pk, zsarr", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = font.getSize() * 10;\n        d.height = font.getSize() * 10;\n        return d;\n    }\n\n    @Override\n    public void paint(Graphics g) {\n        super.paint(g);\n       ", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       #print \"distance between anchor points is \",f2(p0,p1),'anstrom'\n\nThe code above is a Python implementation of a 3D shape sorter that can sort and align 3D shapes based on their surface features. The sorter uses a 3D shape sor", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t}\n\t\tprivate void OnDisconnectClick(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tTrader.Disconnect();\n\t\t\tConnectBtn.Content = LocalizedStrings.Connect;\n\t}\n}\n\n", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "           for i in xrange(self.nbins(1)):\n                self.SetBinContent(i + 1, self.GetBinContent(i + 1) + self.GetBinError(i + 1))\n        if params[1]['bins'] is None", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           connection.getXmpp().getStorage().updateFirstServerMsgId(contact);\n        }\n    }\n}\nThe MessageArchiveManagement class is responsible for managing the message archive of a user. It queries the message archive management service to retrieve messages for a given contact. It also handles the", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "\n        im1L = im1.convert(\"L\", rgb2I)\n        elif channel == \"R\":\n            im1L = im1.convert(\"L\", rgb2r)\n        elif channel == \"G\":\n            im1L = im1.convert(\"L\",", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tret.add(new byte[0]);\n\t}\n\treturn ret;\n}\n}\nThe code above is a PBoc (PBOC) reader implementation for Android. It reads NFC cards and extracts information from them. The code is quite complex and hard to understand,", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   yield PascalString16(self, \"filename\", \"Filename\")\n    yield PascalString16(self, \"av_string\", \"AV String\")\n    yield UInt16(self, \"comment_size\", \"Size of the compressed comment\")\n    if self[\"has_", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tif (socketAdapter != null) {\n\t\t\tsocketAdapter.disconnect();\n\t\t}\n\t}\n}\n\nThe TL1LanguageEngineImpl class provides an interface for external customers to interact with the TL1 engine. It has methods to add and remove listeners for autonom", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       for app in self.apps:\n            app_env = self.get_environ(app)\n            app_start_response = app.start_response(app_env)\n            yield app_start_response\n        yield self.start_response(environ, start_response)\n\n", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\t# Load the data\n\tdata = Data( sys.argv[1] )\n\t# Load the model\n\tmodel = Model( sys.argv[2] )\n\t# Calculate the BIC scores\n\tmodel.calculateprobabilities( data.fields )\n\t# Print the", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (chance > 0)\n            {\n                res = EnhanceResult.Success;\n            }\n        }\n    }\n}\n\nThis code is a C# implementation of the Enhance system in the Server.Engines.Craft module of the Server.Engines", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           entries[entry_name] = rdltypes.UserEnum(entry_value, displayname, desc)\n        return entries\n    #---------------------------------------------------------------------------\n    def parse_field(self, field: minidom.Element) -> comp.Field:\n        \"\"\"\n        Par", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"No FOG modules were found in the current directory\");\n                    this.Close();\n                }\n            }\n        }\n        private void pnlServices_Paint(object sender, PaintEventArgs e)\n        {\n            e.Graphics.Clear(pnl", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "           return (bool)this.ViewState[\"SubmitText\"];\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        }\n    }\n}\n}\n\nThis is a partial implementation of a MultiSelect field in Ext.NET.", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               for(int i = 0; i < this.trianglesUsed[textureHash]; i++)\n                {\n                    if(this.trianglesUsed[textureHash] <= 0)\n                    continue;\n                    if(this.trianglesUsed[text", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   exposedHeaders += \", 'Content-Type'\"\n    response.set_header('Access-Control-Expose-Headers', exposedHeaders)\n    return response\ndef get_course_key(request):\n    course_key = CourseKey.from_string(request.GET.get('course", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                        idlePool.Enqueue(d);\n                    }\n                }\n            }\n            return", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "       var = [var]\n    return var\n    # List format.\n    return var\n\n    # If var is a list, return it.\n    return var\n\n    # If var is a single number, return a list of that number.\n    return [var]\n\n    #", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "st = QuestState(qn, \"CREATED\")\nst.set(\"cond\", \"0\")\nst.set(\"playing\", \"0\")\nst.set(\"chosen\", \"? ? ? ? ? ? ? ? ?\")\nst.set(\"grid\", \" ? ? ? ?", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tempty = string.Format(\"{0:00}:{1:00}:{2:00}\", num, num1, seconds.Value);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t{\n\t\t\t\t\tempty = string.", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           VertexDataStride = 0;\n            VertexDataSize = 0;\n            _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Program = 0", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       self.model = self\n\nThe Model class has several methods:\n\n1. __init__: Initializes the model with a name and a list of reactions.\n\n2. add_metabolites: Adds a list of metabolites to the model.\n\n3. add_", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tTumourGroupListVo vo = (TumourGroupListVo)beans.get(i);\n\t\t\tcoll.add(vo);\n\t}\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tif(current.x>lines[selectedLine].x)\n\t\t\t\t\tcurrent.x = lines[selectedLine].x;\n\t\t\t\tif(current.y>lines[selectedLine].y)\n\t\t\t\t\tcurrent.y = lines[selected", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       set.setDuration(75);\n        set.setInterpolator(new DecelerateInterpolator(0.5f));\n        set.setInterpolator(new AccelerateInterpolator(1.0f));\n        set.setInterpolator(new Acceler", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "           HighestNumber = PartnerInterestRow.Key + 1;\n            ARow.Key = HighestNumber;\n        }\n        #endregion\n    }\n}\n}\n\nThis code is a UserControl for the Partner Interests tab in the Petra UI Connector", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tscoresSol[i] = this.predictScore(pssm, i);\n\t\t}\n\t\t\n\t\tint[] scores = new int[length];\n", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
