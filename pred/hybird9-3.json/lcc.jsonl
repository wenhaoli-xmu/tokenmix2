{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_v, e_u, **data.copy())\n\t\t\t\n\t\t\tif 'R' in roots:\n\t\t\t\troots.remove('R')\n\t\t\tif w == float('-inf'):\n\t\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r')\n        b = Sndfile(ofilename, 'w')\n        b.write_frames(buff)\n        b.close()\n        a.close()\n        \"\"\"\n        a = Sndfile(ofilename", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue style = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", style.getName());\n\t\t\t\t\twriter.addAttribute(\"value\", style.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "       for a in self.answers:\n            if a.lower() in self.question.lower():\n                ret += \" %s\" % a\n        return ret\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob.", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           s.print(\"RandomCookie:  \");\n            clnt_random.print(s);\n            s.print(\"Session ID:  \");\n            s.println(sessionId);\n            s.println(\"Cipher Suite: \" + cipherSuite);\n            s.println", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           sp = new JESpace (path);\n            spaceRegistrar.put (name, sp);\n        }\n        return (JESpace) sp;\n    }\n    public static void register (JESpace sp) {\n        spaceRegistrar.put (sp.getName (", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       return self.do_get(environ, start_response)\n\n\nA: I'm not sure if this is the right way to do it, but I've been able to get it to work.\n\nA: I've been able to get it to work.\n\nA:", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "           return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            return result\n    def action_get_files(", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\t\tAssert.IsTrue (Same (a, b), \"Union-Trusted+Untrusted\");\n\t\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, b), \"!ReferenceEquals1\");\n\t\t\t\tb = (ZoneIdentityPermission) a.", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "   return super(CompositeX509TrustManager, self).getAcceptedIssuers()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       List domains = new ArrayList();\n        domains.add(domain);\n        request.setAttribute(\"domains\", domains);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnJump);\n\t\t\t\t\tjumpWeightPercent = (double) store.GetValue (iter, columnJumpPercent);\n\t\t\t\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       return getArgValues(application, request, defaultMessages, locale, args);\n    }\n    /**\n     * Gets the message arguments based on the current <code>ValidatorAction</code>\n     * and <code>Field</code>.\n     *\n     * @param application     the", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tgetLoadedData().clear();\n\t\t\t\tgetLoadedData().putAll(DataManager.firms);\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void removeTimed(String key, String subKey)\n\t\t\t{\n\t\t\t", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tgeneralNode.setPage(new GeneralPreferencesPage());\n\t\taddChild(generalNode);\n\t\taddChild(shortcutsNode);\n\t\taddChild(playbackNode);\n\t\taddChild(shortcutsPage);\n\t\taddChild(playbackPage);\n", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               m_Owner.Caster.SendAsciiMessage(\"Target is not in range\");\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getClassName().toString();\n\t\t\tfinal List<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t\t\tnamed", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   @addslash\n    def get(self, *args, **kwargs):\n        ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   args = parser.parse_args()\n\n    if args.coordfile:\n        args.outpath = args.coordfile\n        args.outpath = args.outpath.replace('coord.remain', 'wigle.pkl')\n    else:\n        args", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetSkill(0) > 0)\n                        return GetNameForAttribute(i.SkillBonuses.GetSkill(0", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "   for platform in platforms:\n        if platform == 'os_windows':\n            builds.append({'os': 'os_windows',\n                         'os_pretty': 'Windows',\n                         'download_link': download_urls['windows'],\n                         'force_direct': force", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && projectID.equals(projectID)) {\n\t\t\tstateBeansList = StatusBL.getByProjectID(projectID);\n\t\t}\n\t\tif (issueTypeID!=null && issueTypeID.equals(issueTypeID)) {\n", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                if (argument.Parent is LabeledStatementSyntax) {\n                    var label = (LabeledStatementSyntax)argument.Parent;\n                    var labelName = label.GetText();\n                    var argumentName = argument.GetText", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       self.get_item_from_modulestore(self.split_test_usage_key, verify_is_draft=True)\n        self.assertEqual(0, self.get_item_from_modulestore(self.split_test_usage_key, verify_", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           if (cff) {\n                tmp.Add(new PdfString(\"CIDFontType0\"));\n                tmp.Add(new PdfString(\"Identity\"));\n            }\n            else {\n                tmp.Add(new PdfString(\"CIDFontType2\"));\n                tmp.", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tif (cell.getNumUsagesIn() == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\t\tcgn.depth = 0;\n", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<Bitmap>(callable);\n        return task;\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      Log.w(TAG, \"loading page \" + model.getSprite());\n      return BitmapFactory.decodeStream(new", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n                }", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp,\n\t\t\tLabanPoseVector", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               ScriptManager sm = ScriptManager.GetCurrent(Page);\n                sm.RegisterScriptControl(this);\n            }\n            base.Render(writer);\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getShort(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolBlastProtection\"))", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return \"Effect{\" +\n            \"probability=\" + probability +\n            \", scopes=\" + scopes +\n            '}';\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_search(t, {\n        'itype': 'fqdn',\n        'groups': ['staff'],\n        'lasttime': arrow.utcnow().datetime,\n        'reporttime': arrow.utcnow().datetime\n   ", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       p = Person.objects[0].select_related()\n        o = Organization.objects.first()\n        self.assertEqual(p._delta(),\n                         ({'owns.0': 1, 'employer': 1}, {}))\n        self.assertEqual(", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (path.IsNullOrWhiteSpace())\n                {\n                    throw new ArgumentNullException(\"path\");\n                }\n                toScan.Add(path);\n            }\n            foreach (var item in ignored)\n            {\n                toScan.Remove(item);\n            }\n", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E computeIfPresent(K key,\n\t\t\t\t\t\t\t  BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\treturn read(key, internal", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       if viewtype == 'threadedview':\n            objcommentslist = pdt.getThreadedComments(uid,itemindex,lasttimestamp,lastcommentcount,lastcommentid,viewtype)\n        else:\n            objcommentslist = pdt.getListedComments(uid,", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t}\n\t\tinternal byte m_X;\n\t\tinternal byte m_Y;\n\t\tinternal short m_Hue;\n\t}\n\t[System.Runtime.InteropServices.StructLayout( System.Runtime.InteropServices.LayoutKind.Sequential, Pack = ", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): avatar \\\"{3}\\\": request: {4}, path: {5}, param: {6}\",\n                                 ", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodCur.DateStart=textDateStart.Text;\n\t\t\tPayPeriodCur.DateStop=textDateStop.Text;\n\t\t\tPayPeriodCur", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "   return _build_cubes(header, column_headings, coords, data_arrays, cell_methods)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   if not authz.check_config_permission('group_create'):\n        return {'success': False, 'msg': _('User %s not authorized to create groups') % user}\n    else:\n        return {'success': True}\ndef _group_or_org_member_", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tExample parent = splittedSet.getChild(parentIndex);\n\t\t\t\t// setting parent node\n\t\t\t\texample.setParent(parent);\n\t\t\t\t// setting child node\n\t\t\t\texample.setChild(new Node(parent.getClassName()));", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new[] { new SearchResults() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           return _range.contains(codePoint) ? offset + 1 : -1;\n         }\n         return -1;\n      }\n   }\n   static class NotSet extends AbstractCharNode {\n      @Override\n      int match(StringValue string, int strlen, int offset,", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tState = ServerState.WaitingPlayers;\n\t\t\t", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(((CatsReferralPendingEmergencyNonEDAdmissionListVoBean)beans[i]).buildVo());\n\t\t}\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "   xbmc.executebuiltin(\"Reboot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plotname\n  if not 'plotName' in pD:\n    return S_ERROR( \"Missing plot name!\" )\n  plotName = pD[", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (Info.ConstructionYardTypes.Contains(e.Attacker.Info.Name))\n\t\t\t\tforeach (var b in builders)\n\t\t\t\t\tb.SetRallyPointsForNewProductionBuildings(bot);\n\t\t}\n\t\t", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       return plan.getPlanNodes();\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(121, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.com", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = parity;\n\t\t\tdcb.ByteSize = data_bits;\n\t\t\tdcb.StopBits = bits;\n\t\t\tdcb.Handshake", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n\n    if args.keep_tempdir:\n        _keep_tempdir = True\n\n    if args.cfgfile:\n        cfgfile = args.cfgfile\n    else:\n        cfgfile = os.path.join(td", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tnewListIndex = newList.index(tmpList[0])\n\t\t\t\tcurrentListEntry = newList[newListIndex]\n\t\t\t\tcurrentListIndex = newList.index(currentListEntry)\n\t\t\t\tnewList.insert(currentListIndex", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               return new Rectangle(fontX, fontY, fontX + fCode.Length, fontY + fCode.Length);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return ArrayUtils.toPrimitive(results);\n  }\n  \n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a value\",'", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-90.0, +90.0, 73.123)\n        # Test points on a regular global with unrelated steps + offsets\n        # and an extended range of latitude values.\n        z_points = np.ar", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           if (currPacket != null)\n            {\n                Clipboard.SetText(currPacket.ToString());\n            }\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            if (_newStyleLogViewer)\n", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "       }\n    }\n}\n\n\nA: I have a similar problem. I have a class that has a Dictionary<string, int> and I want to add a method that will remove a key from the dictionary.\npublic class MyClass\n{\n    public Dictionary<string, int> MyDictionary", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.SuspendLayout();\n            // \n            // \n            // \n            // \n            // \n            // \n            // \n            // \n            // \n            // \n            // \n            // \n            // \n            // \n", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "       return self.createBaseFunction(\n            original.functionName,\n            original.dll,\n            resultType = original.resultType,\n            argTypes = original.argTypes,\n            doc = original.doc,\n            argNames = original.argNames,\n            extension = original.", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           baos.write(NID.kEmptyStreams);\n            baos.write(emptyStreams.toByteArray());\n            header.write(baos.toByteArray());\n        }\n    }\n    private void writeFileEmptyStreams(final DataOutput header) throws IOException", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   if (rampUp)\n                    {\n                        alphaLevel = rampUp ? 255 : 0;\n                        inRamp = true;\n                    }\n                    else\n                    {\n                        alphaLevel = rampDown ? 0 : ", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_be_removable_and_should_allow_", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "               if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellation", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       f.writelines(['F) 1\t\t\t# PSF oversampling factor '\\\n        f.writelines(['G) 1\t\t\t# PSF oversampling factor '\\\n        f.writelines(['H) 1\t\t\t# PSF oversam", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   break;\n                case 0x02:\n                    /* C */\n                    i = b;\n                    break;\n                case 0x03:\n                    /* D */\n                    i = b & 0x23;\n                    i += ((", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return '/courses/{org}/{number}/{run}/{display_name}/'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tfor(int i=0;i<splitNumber.length;i++) {\n\t\t\tif(splitNumber[i].equals(\"\")) continue;\n\t\t\tchance=chance*100/100;\n\t\t}\n\t\treturn (int)ch", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 6);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           parent.alertError(parent, \"Error importing message: \" + e.getMessage());\n                            return false;\n                        }\n                        return true;\n                    }\n                };\n                result = new MessageImportResult(messageWriter = messageWriter,\n                        new MirthMessage", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\t\t\tlayer = ((Scriptable) value).get(LAYER, (Scriptable) options);\n\t\t\t\t} else if (value instanceof Map) {\n\t\t\t\t\tlayer = ((Map) value).get(LAYER);\n\t\t\t\t}\n\t", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null) {\n            currentSession.fetchUserInfo();\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions){\n\t\t\tif (emotion != null) sum += emotion.strength;\n\t\t}\n\t\tif (sum == 0) {\n\t\t\tfor (Emotion emotion : emotions){\n\t\t\t\t", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n            },\n            {\n                'stage': {\n                    'duration': 10,\n                    'finished_at': constants.SPLIT_TIMESTAMP4,\n                    'name': '", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   return (UTMZone, UTMEasting, UTMNorthing)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       form = ReportUserForm(request.POST, instance=user)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Reported user successfully!\")\n            return HttpResponseRedirect(reverse('profile'))\n    else:\n        form = Report", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeftLayout = true;\n\t\t\t}\n\t\t\tform.Refresh();\n\t\t}\n#endif\n\t\tpublic void ApplyTo(Form form, IXmlSerializerEx xs)\n\t\t{\n\t\t\tif(form == null)", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}\n\n\nA: I'm not sure if this is the right way to do it, but I'm trying to create a class that can store a number of bytes.\npublic class ByteArray", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "           new_positional_tags_list.append((flag, re.compile(regex)))\n            return new_positional_tags_list\n    def compile_variant_regex(variant_tags):\n        if not variant_tags:\n            return variant_tags\n        else:\n            new", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return null;\n            }\n            public override object[] GetCustomAttributes (Type attributeType)\n            {\n                return null;\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override Constructor", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "   }\nclass OBD_PID1D(OBD_Packet):\n    name = \"PID_1D_VehicleSpeed\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=100 / 128., unit", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tbus.add_signal_receiver(on_name_owner_changed,\n\t\t                      'org.freedesktop.Secret.Collection',\n\t\t                      in_signature='ss',\n\t\t                      out_signature='v')\n\t\tbus.add", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "\t\t\t\tthis.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);\n\t\t\t\tthis.AddRes(index, typeof(SulfurousAsh), 1044", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   return session.query(\n        PubSubConsumer.id,\n        PubSubConsumer.is_active,\n        PubSubConsumer.max_depth,\n        PubSubConsumer.sub_key,\n        PubSubConsumer.delivery_mode,\n        HTTPSOAP", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getConsumedRelatedResourcesByRelease(ResourceEntity resource, ReleaseEntity release) {\n        List", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "   if pitch == 0:\n        raise ValueError('Parker weighting window is only defined with '\n                             '`pitch==0`')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "       return regx\n    def _getCacheEntry(self, title):\n        \"\"\" Return the Proxyfied Cache Entry \"\"\"\n        if self.isEnabled():\n            return self.cache.getCacheEntry(title)\n    def _getCacheEntryByUrl(self, url):\n       ", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn String.Format (fmt, \"{0} {1}\", type, unit);\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\t\tvar o8 = (JObject)obj.Properties[0].Value;\n\t\t\t\tAssert.That(o8[\"The outermost value\"].ToString(), Is.EqualTo(\"must be an object or array.\"));\n\t\t\t\tAssert.That(o8[\"In", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int w = 0; w < width; w++) {\n                    edges.add(new T2(h, w));\n                }\n            }\n            return edges;\n        }\n        @Override\n        public Collection<String> getVertices() {\n            ArrayList<", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   ds.add_px_err(False)\n    ds.add_px_err(False)\n    ds.add_px_err(False)\n    ds.add_px_err(False)\n    ds.add_px_err(False)\n    ds.add_", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       final String[] args = new String[] { \"src/main/resources/bigdata/bigdata.db\" };\n\n        final LocalTripleStore db1 = new LocalTripleStore(args[0]);\n        final LocalTripleStore db2 = new LocalTripleStore(args[", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                    u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u'SpotPrice': '0.105200',\n                     u'AvailabilityZone': 'us-east-1b'},\n                ", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performDownload();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should download and install Yarta.\n\t * \n\t * When the function returns true Yarta will be installed.\n\t * \n\t * @return true/false\n", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDisable(OpenGL.GL_BLEND);\n\t\t\tOpenGL.CheckGLError();\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._data_container.data_cov_mat_inverse\n    @property\n    def has_x_errors(self):\n        \"\"\"True if the *x* data has errors.\n        :rtype:", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * Converts this to a CmsLinkInfo.\n     *\n     * @return a new CmsLink", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "               } else {\n                  LOG.warn(\"Account ID \" + walrusObject.getOwnerId() + \" does not have a canonical ID. Changing the ownership of \"\n                      + walrusObject.getObjectKey() + \" in bucket \" + walrusObject.getBucketName", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public event EventHandler FolderInvalidated\n        {\n            add { _folderInvalidated += value; }\n            remove { _folderInvalidated -= value; }\n       ", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       doReturn(true).when(command).validateNameSizeImport(any(String.class));\n        doReturn(true).when(command).validateNameSpecialCharImport(any(String.class));\n        doReturn(true).when(command).validateNameSizeImportAsCloned(any(", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.TopAttach = ((uint)(1));\n\t\t\tw10.BottomAttach = ((uint)(2));\n\t\t\tw10.LeftAttach = ((uint)(1));\n\t\t\tw10.RightAttach = ((uint)(", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "           environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\\n                self.category\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic ConstructorBuilder DefineTypeInitializer(Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)\n\t\t{\n\t\t\tMethodBuilder mb = DefineMethod(ConstructorInfoTypeInitializer,", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return new Builder().MergeFrom(prototype);\n    }\n}\n\n}\n\n#endregion\n\n", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "               vertices[x] = getVertices(i, x);\n            }\n        }\n    }\n    /**\n     * Stores in the <code>vertices</code> array the vertex values of quad\n     * <code>i</code>. If <code>i</code>", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (showDateData.equals(\"search\")) {\n            result.add(\"date created\");\n        }\n        if (showDateData.equals(\"search\")) {\n            result.add(\"date last modified\");\n        }\n        if (showDateData.equals(\"search\")) {\n           ", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds (animationDuration);\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       m_State = eButtonState.Down;\n        Invalidate();\n        base.OnSizeChanged(e);\n      }\n      else\n      {\n        m_State = eButtonState.Down;\n        Invalidate();\n        base.OnSizeChanged(e);\n      }", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!string.IsNullOrEmpty(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            // send emails to all users\n            foreach (string user in Users)", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions;\n", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           return TSubmitChangesResult.Success;\n        }\n        private TSubmitChangesResult StoreManualCode(ref ConferenceSetupTDS ASubmitChanges, out TVerificationResultCollection AVerificationResult)\n        {\n            TSubmitChangesResult Result = TSubmitChangesResult.Success;\n           ", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                args.Add (filename, buffer);\n            }\n        }\n        /*\n         * Loads a text file and appends as string into args.\n         */\n        static void LoadTextFile (\n            Node args,", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return _copyOption == CopyOption.CopyCustom; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (!value)\n\t\t\t\t{\n\t\t\t\t\t_copyOption = CopyOption.CopyRange;\n\t\t\t\t\tNot", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic string DisplayName {\nNext line of code:\n\t\t\tget {\n\t\t\t\treturn display_name;\n\t\t\t}\n\t\t}", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation instanceof BugAnnotation) {\n                BugAnnotation bugAnnotation2 = (BugAnnotation) bugAnnotation;\n                if (bugAnnotation2.getBugType() == null) {\n                    throw new BugInstanceException(\"BugInstance \" + bugInstance + \" has null bug type", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                }\n            }\n        }\n        private void LaneClear()\n        {\n            if (Menu", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t *", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "   return Specials(self._retr_file(filename))\n\n\nA: I'm not sure what you're trying to do here.  You're trying to create a class that inherits from a class that doesn't exist.  You're also trying to create a class", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(\n            field_def['name'], field_model_def['name'])\n        self.assertEquals(\n            field_def['type'], field_model_def['type'])\n        self.assertEquals(\n            field_def['default'], field_model_def", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new[] {new object[] {\"10\", 10, \">10<\", \"?10?\"}});\n                env.CompileDeploy(\"drop index MyInfraWIndex1\", path);\n                env.CompileDeploy(\"create index MyInfraWIndex", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "       clibrebound.reb_particle_imul(byref(self), c_double(other))\n        return self\n    \n    def __div__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n\nA: I'm not sure if this is the right way to do it, but I've managed to get it working.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = new HTML(text);\n        } else {\n            value = oldValue;\n        }\n        c.putClientProperty(BasicHTML.propertyKey, value);\n    }\n    /**\n     * Gets the default font for the given component.\n     */\n    static Font", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, contents=content)\n    assert s.name_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    for item in items:\n        assert item.timeout is None\n", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new SqlLoader(namedReference);\n\t\t\t}\n\t\t}\n\t\tpublic void Loader(string namedReference, string sqlLoader)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n\t\t\t{\n\t", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int)m_FactionItems.Count );\n\t\t\tfor ( int i = 0; i < m_FactionItems.Count; ++i )\n\t\t\t{\n\t\t\t\twriter.WriteEncodedInt( (int", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "   }\n}\n\n\nA: I'm not sure if this is the right place to ask this, but I'm trying to understand the code in this file.\nI'm trying to understand the code in this file.\nI'm trying to understand the code in this file.\nI", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "               print(\"  PYTEST: {}\".format(pytest))\n            if sprout_appliances:\n                print(\"  SPROUT: {}\".format(sprout_appliances))\n        else:\n            print(\"  PYTEST: {}\".format(self.args", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    states.get(0).readCache.remove(key);\n                }\n                states.get(0).readCache.put(key, value);\n            }\n        }\n    }\n}\n\n\nA: I'm not sure if this", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#onSetCameraPreviewSize */\n    public void", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendLocalizedMessage(1019005); // You are not allowed to travel there.\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void OnAfterDelete()\n\t\t{\n\t\t\tif (Parent is MoonstoneC", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   \"\"\"\n    from invenio.modules.collections.cache import get_all_recids\n    from invenio.modules.collections.cache import is_record_in_any_collection\n    from invenio.modules.collections.cache import is_record_in_any_collection", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "       if domain not in self._domains:\n            raise BackendError('Backend does not serve domain %s.' % domain)\n        user = '%s@%s' % (username, domain)\n        data = self.module.get(user)\n        if data is None:\n", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "       - *fpath*: string, full or relative to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath)\n    def save_as_mofile(self, fpath):\n        \"\"\"\n        Save the binary representation of the file to *fpath*.", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to get Transformation Problematics\", res['Message'] )\n      return res\n    transDict = res['Value']\n    if not transDict:\n      gLogger.info( \"No problematics found in Trans", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\treturn action;\n\t\t} catch (URISyntaxException e) {\n\t\t\tthrow new CommentException(l10n(\"invalidFormURI\"), e);\n\t\t}\n\t\t}\n\t}\n\t@Override\n\tpublic void onError(String s) {", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.type = 'text'\n    self.category.text = 'Less: &lt;'\n    self.assert_(self.category.type == 'text')\n   ", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           _engine.Memory.Map.CurrentMapper = _engine.Memory.Map.Cartridge.MapperNo;\n            _engine.Memory.Map.CurrentMapper.SaveState(this);\n            _engine.Memory.Map.CurrentMapper.Mapper1Register8000BitPosition = _engine", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           JMenuItem oJMenuItem = new JMenuItem(\"Open Document\");\n            oJMenuItem.addActionListener(oActionListener);\n            _jMnuRoot.add(oJMenuItem);\n        }\n        private void addMenuBar(JMenu _jMnuRoot){\n            JMenu", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Red Bears]\nNext", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn SizeHeightToFitWithMin (min, min);\n\t\t}\n\t\tpublic int SizeHeightToFitWithMin (int min, int max)\n\t\t{\n\t\t\treturn SizeHeightToFitWithMin (min, max, min);\n\t\t", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "       return self.tweet_id\n\n\nA: I'm not sure if this is the right way to do it, but I'm trying to get the announcement to render the text in the template.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "# Load Pygments\nfrom pygments.formatters import HtmlFormatter\n\n# Load Sphinx's built-in theme\nfrom sphinx_rtd_theme import SphinxRtdTheme\n\n# Load Sphinx's built-in extensions\nextensions = [\n    '", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "   cursor.execute('''INSERT INTO flight_group(groupID, sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration\n                 FROM flight_group WHERE groupID=?\n''', (i,))\n    i = i +", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "   run_on_minion(\"rethinkdb-set-last-snapshot\", {\"project_id\": project_id, \"timestamp\": timestamp})\n\n\nA: I'm not sure if this is the right way to do it, but I'm trying to get this to work.", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"I'm not sure what you mean by that.<br/>I'm not sure what you want me to do.<br/>I'm not sure what you want me to say.<br/>I'm not sure what you want me to do.<br/>I'm not", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead = ()\n        self.codetail = ('name', 'value", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               if (noConnectionError)\n                    Toast.makeText(context, getString(R.string.toast_message_no_connection) + uri, Toast.LENGTH_LONG).show();\n                if (connectionError)\n                    Toast.makeText(context, getString(R.", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "           inputs.extend(self.get_outputs())\n        return inputs\n    # get_inputs ()\n    def get_finalized_command (self, command):\n        \"\"\"Get the finalized command string for the given command.\n        This is the command string that will be passed to the", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tif (disassembledValues != null)\n\t\t\t{\n\t\t\t\tresult = (object)cacheEntry.DisassembledState;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = (object)cacheEntry.", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '-o', log_name,\n        '-o', 'stderr',\n        '-o', 'stdout',\n        '-o', 'stdin',\n        '-o', 'pbs_o_submit',\n        '-o', 'pbs_nodelist',\n        '-o',", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new EventViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]  \n        public ActionResult SaveEventDelegate(int id)\n        {\n            var", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                       var circle = (Circle) obj;\n                        return string.Format(\"({0},{1},{2},{3})\", circle.R, circle.G, circle.B, circle.A);\n                    }\n                    if (obj is Vector)\n                    {\n                       ", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t\tif (path.Count > 0)\n\t\t\t\t{\n\t\t\t\t\tvar closestHarvestableCell = ClosestHarvestablePos(self);\n\t\t\t\t\tif (closestHarvestableCell.HasValue)\n\t\t\t\t", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return new Event.Builder();\n\n    }\n    @Override\n    public Event.Builder newEvent(String type) {\nNext line of code:\n        return new Event.Builder(type);\n\n    }\n    @Override\n    public Event.Builder newEvent(String type, String", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           while (true)\n            {\n                if (state.Suffix == PpmContext.ZERO)\n                {\n                    goto NoLoop;\n                }\n                if (state.Suffix == PpmContext.ONE)\n                {\n                    goto No", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Short String VR.\n        /// </summary>\n        public static readonly DicomVr SSvr = new DicomVr(\"SS\", false, false, true,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(tFull[3]);\n\t\t}\n\t\tSqliteSession.DeleteAll(false, Sqlite.Orders_by.DEFAULT, sessionValuesArray.ToArray());\n\t\thideWindow();\n\t}\n\tprotected virtual void on_button_", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 32/", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   plt.plot(cr['combined'][app][VC]['durations'], cr['combined'][app][VC]['stats']['values'], 'o')\n    plt.fill_between(cr['combined'][app][VC]['durations'],\n                  cr['combined", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\telse if(model.", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " if not failures:\n    print(\"All tests passed\")\n  else:\n    print(\"Some tests failed\")\n    print(failures)\n\nA: I'm not sure if this is the right way to do it, but I've been able to get the code to work by", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       final int index = (offset - headerSize()).aligned().asSize();\n        mirror.writeElement(kind, index, value);\n    }\n    @HOSTED_ONLY\n    public void writeValue(Kind kind, ObjectMirror mirror, int offset, Value value) {\n       ", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           return ResolveAssemblyReference(relativePath);\n        }\n        /// <summary>\n        /// Resolves an assembly reference using a path relative to the project \n        /// directory.\n        /// </summary>\n        /// <returns>\n        /// The full path of the assembly, or <see", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return str.format(string, *args, **kwargs)\n\ndef str_format_with_dict(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using {% and %}\n    instead of { and }\n    \n    string", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       i20 = i16 + i19;\n        i21 = i18 + i20;\n        i22 = i19 + i21;\n        i23 = i20 + i22;\n        i24 = i21 +", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"  \" + s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               });\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new User(\"test.user\"));\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       with self.assertRaises(OSError) as cm:\n            subprocess.Popen(['/bin/sh', '-c', 'echo hello'])\n        self.assertEquals(errno.ECHILD, cm.exception.errno)\n    @testlib.with_", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tPropertyService.Start();\n\t\t\tResourceService.Start();\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Stops the core services.\n\t\t/// This stops the PropertyService and ResourceService.\n\t\t/// </summary>\n\t\tpublic", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\tinternal abstract void AddToConstraintCollectionSetup (ConstraintCollection collection);\n\t\tinternal abstract bool IsConstraintViolated ();\n\t\tinternal static void ThrowConstraintException ()\n\t\t{\n\t\t\tthrow new ConstraintException (\"Failed to enable constraints. One or more rows contain values", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.setLayout(self.verticalLayout_2)\n        self.setWindowTitle(self.window_title)\n        self.setWindowIcon(self.window_icon)\n        self.setWindowModality(self.window_modality)\n        self.setWindowFlags(", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               return false;\n            }\n            Cursor wx = result[ 1 ];\n            if ( wx == null || !wx.moveToFirst() ) {\n                // No TAF was found nearby\n                return false;\n            }\n            String stationId = wx.getString( wx.get", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\ttx = s.BeginTransaction();\n\t\t\t\tFillDb(s);\n\t\t\t\ttx.Commit();\n\t\t\t\ts.Close();\n\t\t\t\ts = OpenSession();\n\t\t\t\ttx = s.BeginTransaction();\n\t\t", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum ^= (uiByteValue >> 8);\n                uiCRCITTSum ^= (uiByteValue & 0xff);\n            }\n            return (ushort)uiCRCITTSum;\n        }\n        public ulong crctable", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn 0;\n\t}\n\tpublic void setShootingSpeed(int speed) {\n\t\tthis.shootingSpeed = speed;\n\t}\n\tpublic int getShootingSpeed() {\n\t\treturn shootingSpeed;\n\t}\n\tpublic void setS", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                    new CeylonHyperlinkDetector() };\n        }\n        return new IHyperlinkDetector[] { \n                new CeylonHyperlinkDetector(), \n                new CeylonParseControllerHyper", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.l.addWidget(self.drawingModeWidget)\n        self.l.addWidget(Object3DProperties(self))\n        self.l.addStretch(1)\n        self.setLayout(self.l)\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif ( toSet != null )\n\t\t\t\t{\n\t\t\t\t\tm_Mobile.Target.SetGumpID = 0;\n\t\t\t\t\tm", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    chosenObj = selectConverter.convert(value);\n                  }\n                  if (chosenObj != null)\n                  {\n                     result = chosenObj;\n                  }\n               }\n            }\n            else\n            {\n               result = value;\n            }\n", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                           foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                                int line", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskMethodResult {\nNext line of code:\n\t\t\tget { throw new", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final int groupId = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n        final int userId = new Random().nextInt(SecurityManagerImpl.MAX_USER_ID);\n        final int secondUserId = new Random().nextInt(SecurityManagerImpl.MAX_", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn new Vector2 (v.X, v.Y) - viewport.Bounds (v).Center;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 center)\n\t\t{\n\t\t\treturn new", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\tConsole.WriteLine(\"dpslamServer/Send(\" + PortNumber.ToString() + \")/\" + msg);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if(type == Portal.RequestType.Activity) {\n                mSettingsManager.setConnectedServices(list);\n                mSettingsManager.setConnected(true);\n                mConnected = true;\n                notifyPortalConnectionStateChanged();\n            }\n        }\n    }\n", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " print '};'\n  print ''\n  # generate the single-use version of the callback\n  print textwrap.dedent(\"\"\"\\\n  /**\n   * @brief A %d argument callback which can be called multiple times.\n   */\"\"\" % number_of_args)", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   response = HttpResponse(simplejson.dumps(json_data), content_type=\"application/json\")\n    \"\"\"\n    response = HttpResponse(simplejson.dumps(json_data), content_type=\"application/json\")\n    return response\ndef range_csv(filename, items", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n            expected.setWhereClause(whereClause);\n        }\n        assertEquals(expected, given);\n", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The name of the module containing the assembly manifest. This can be different from the name of the assembly itself.\n    /// </summary>\n    public IEnumerable<string> ModuleName {", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           var vt = new DenseVector(input.Count);\n            var vtt = new DenseVector(input.Count);\n            var vttt = new DenseVector(input.Count);\n            var vtttt = new DenseVector(input.Count);\n            var v", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t\t} else {\n\t\t\tApfloat[] medians = new Apfloat[2];\n\t\t\tmedians[0] = sortedNumbers[left];\n\t\t\tmedians[1] = sortedNumbers[", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "               if reference_set_map[v] != -1:\n                    break\n                v = parent[v]\n    for j in range(K):\n        for u in reference_set[j]:\n            if reference_set_map[u] != -1:\n                break\n", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.AllowBots)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar bot = new LobbyBot(slot, botController);\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           var b = cluster.BoundingBox;\n            var bb = cluster.BoundingBox;\n            var bb2 = cluster.BoundingBox;\n            var bb3 = cluster.BoundingBox;\n            var bb4 = cluster.BoundingBox;\n            var b", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeDegrees = m_maxSlopeRadians * 57.295779513082320871142857724458707;\n}\ndouble btK", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (ExpressionTree initializer : initializers) {\n            if (canBeLeaked(initializer)) {\n                checker.report(Result.failure(\"unique.leaked\"), initializer);\n            }\n        }\n        return super.visitNewArray(node, p);", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound != null)\n\t\t\t{\n\t\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\t\tif (nbttagcompound1 != null", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = new ClassItem(Context, null, typeAttribute.Value, null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tdoReturn(Collections.singleton(annotationType)).when(searchNarrower).narrowByAnnotationType(annotationType);\n\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(annotationType", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.pathCache == null) {\n\t\t\tif (other.pathCache != null)\n\t\t\t\treturn false;\n\t\t} else if (!this.pathCache.equals(other.pathCache))\n\t\t\treturn false;\n\t\tif (this", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideRExtent[end][r.rightChild];\n            int min = (min1 < min2 ? min1 : min2);\n            if (min > start) {\n              skip = true;\n              break;\n            }\n            if (start == min)", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.Runt", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a parameter with a point value. The value typically represents a\n\t * point in space, and may be transformed to", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( !(proxyThat instanceof Contact) ) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal Contact that = (Contact)proxyThat;\n\t\tif ( !this.getId().equals(that.getId()) ) {\n\t\t\treturn false;\n", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "   if cdata is not None and cdata.shape == shape_of:\n        return\n    if isinstance(node.op, AdvancedSubtensor1):\n        cdata = node.op.get_constant_idx(node.inputs, allow_partial=True,\n                                        ", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "                   return fn(*arg, **kw)\n        event_key.listen(fn, retval=retval, **kw)\n\n    @classmethod\n    def init_collection(cls, target, collection, collection_adapter):\n        \"\"\"Initialize a collection attribute.\n        This event", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       for key in data_model_changes:\n            self.change_filter(self.data, self.current_filter, key, data_model_changes)\n        return global_changes\n    def change_filter(self, data, filter, key, data_model_changes):\n       ", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\treturn false;\n\t\t}\n\t}\n\t[XmlType(\"ldtoken\")]\n\tpublic sealed class Ldtoken : Instruction\n\t{\n\t\t[XmlAttribute(\"type\")]\n\t\tpublic string type;\n\t\t[XmlAttribute(\"class\")]\n\t\t", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(72, 24);\n\t\t\tthis.objYLabel.TabIndex = 17;\n\t\t\tthis.objYLabel.Text = \"\";\n\t\t\t// \n\t\t\t", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new MultiValuedMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> entry : csvData.entrySet()) {\n           ", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(wand.getItem() == this.getItem()) {\n\t\t\tif(wand.getItemDamage() == 0) {\n\t\t\t\tif(wand.getItem() == this.getItem()) {\n\t\t\t\t\tif(wand.get", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           if (this.getIntrinsicCohesion(component) > 0)\n                intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohes", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "   if are_equal:\n        run_sql(\"UPDATE bibdocmoreinfo SET data_value=%s WHERE id_bibdoc=%s AND namespace=%s AND data_key=%s\" % (str(docid), docid, ''), (docname, ))\n    else:\n       ", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tif(tvComputerCluster.SelectedNode!=null) \n\t\t\t{\n\t\t\t\tif(tvComputerCluster.SelectedNode.Text.ToString().Equals(\"Computer\"))\n\t\t\t\t\tupdateListViews(\"Computer\");\n\t\t\t}", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   exDateList.add(new Date(exceptionDates.get(0).getTime()));\n    exDateList.add(new Date(exceptionDates.get(1).getTime()));\n    exDateList.add(new Date(exceptionDates.get(2).getTime()));", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.Bind( gameObject, sourceComponent, sourceProperty, sourceEvent, targetComponent, targetProperty, targetEvent );\n\t}\n\tprivate void bindSourceEvent()\n\t{\n\t\tsourceEventBinding = gameObject.AddComponent<dfEventDrivenPropertyBinding>();\n", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           resultBean.setStatus(true);\n            resultBean.setMessage(\"Added port to container \" + containerName);\n        } catch (Exception e) {\n            resultBean.setStatus(false);\n            resultBean.setMessage(e.getMessage());\n        }\n        return result", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t\t\n\t\t\tpublic Image getImage(int id)\n\t\t\t{\n\t\t\t\treturn super.getImage(id);\n\t\t\t}\n\t\t\t\n\t\t", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .border_top  = \")\n                .Append(StringUtil.ToHexString(BorderTop)).Append(\"\\n\");\n            buffer.Append(\"          .border_left = \")\n                .Append(StringUtil.ToHexString(BorderLeft)).Append(\"\\n", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// This range contains the bulk of the CJK set.\n\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = ((int) (cjkToJis [value])) |\n\t\t\t\t\t\t", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.getInputStream();\n\t\t\tJRPropertiesMap properties = new JRPropertiesMap(stream);\n\t\t\tclose = false;\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new JRException(e);\n", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE || this == SPECTATOR;\n        }\n        /**\n         * Returns true if this is the SPECTATOR game type\n         */\n        public boolean isSpectator()\n        {\n            return this == SPECTATOR ||", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd.PurgeDefaultDacl ();\n\t\t\tAssert.AreEqual (0, csd.DiscretionaryAcl.Count);\n\t\t}\n\t\t[Test]\n\t\tpublic void SetDiscretionaryAclProtection ()\n\t", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       if (PhotonEditor.Current.UseCloud)\n        {\n            additionalRpcs.Add(PhotonEditor.Current.AppID);\n        }\n        PhotonEditor.AdditionalRpcs = additionalRpcs;\n    }\n}\n}\n\n\n", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "\n        fullNewMessageBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Intent intent = new Intent(getActivity(), DraftEditor.class);\n                intent.putExtra(\"task\", \"new_answer\");\n                intent.", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           if time_reversal:\n                return psit_G.conj()\n            else:\n                return psit_G\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       Response response = utkastController.createUtkast(intygsTyp, buildRequest(\"luse\"));\n        assertEquals(OK.getStatusCode(), response.getStatus());\n        ArgumentCaptor<CreateNewDraftRequest> requestCaptor = ArgumentCaptor.forClass(Create", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    IsRagdoll = ragdoll;\n\t    if (delay > 0) {\n\t\tInvokeRepeating(\"SetRagdoll\", ragdoll, delay);\n", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   \"\"\"Fracture layer\"\"\"\n    def __init__(self, config={}):\n        self.topo_dim = TopologyDim.invalid\n        \"\"\"Topology index\"\"\"\n        self.nodes = [ (float, float) ]\n        \"\"\"list of nodes\"\"\"\n       ", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       System.arraycopy(num, 0, out, outOff, num.length);\n    }\n}\n\n\nA: I'm not sure if this is the right way to do it, but I'm trying to use the GOFBBlockCipher class to encrypt a file", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new FilteredIterator<PatternMatch>( new FilterIterator<PatternMatch>( source ) ) );\n        }\n        public Iterator<PatternMatch> iterator()\n        {\n            return new FilteredIterator<PatternMatch>( new FilterIterator<PatternMatch>( this ) );\n        }", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "\ndef transform_values_holder_xml_json_to_json(value):\n    if value:\n        return value\n    return None\ndef transform_values_holder_xml_json_to_json(value):\n    if value:\n        return value\n    return None\ndef transform", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           frameToClose = (InternalFrame)buttons.get(btn);\n            try {\n              frameToClose.closeFrame();\n            }\n            catch (PropertyVetoException ex) {\n            }\n          }\n        }\n      });\n    }\n  }\n}\n\n", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "\n\nA: I'm not sure if this is the right way to do it, but I've been able to get this to work.\nimport zmq\nimport time\nimport os\nimport sys\n\n\ndef getCommandResult(cmd):\n    context = zmq.Context()\n   ", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   for (int y = Math.max(cy-toolDiameter/2, 0); y < Math.min(cy+toolDiameter/2, p.getRasterHeight()); y++)\n    {\n      for (int x = Math.max(cx-toolDiam", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table3.TABLE_NAME, new ContentValues(), Db.Table3._ID + \" = \" + newId, null);\n                    //Update budget items\n                    db.update(Db.Table4.TABLE_NAME, new ContentValues(), Db.Table", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               else if (m_meth == AllocMethod.CoTaskMem)\n                {\n                    Marshal.FreeCoTaskMem(m_ptr);\n                }\n                m_ptr = IntPtr.Zero;\n            }\n        }\n        #endregion\n    }\n}", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (self.World.AllowDevCommands && developerMode.AllTech)\n\t\t\t\treturn;\n\t\t\tif (self.World.AllowDevCommands && developerMode.AllTech)\n\t\t\t\treturn;\n\t\t\tif (self.", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "       self.currentDirTxtLine.setText(infoText)\n        \n        self.treeViews[self.activeTreeview].setModel(self.fileSystemModels[self.activeTreeview])\n        self.treeViews[self.activeTreeview].setRootIndex(self.roots", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_m4.sub('%%%s%s%%', code, self.inputs[0].name)\n        self.outputs[0].write(code)\n    def get_hook(self, node):\n        \"Substitutes variables in a .in file", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx + reactorExtent ] + chemical[ 0 ][ idx + reactorExtent + 1 ]\n\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx +", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(dateFormatFactory.get(pattern), timestampLocale));\n                break;\n            default", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\treturn qs.ReturnsIdentity;\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object DeepCopy(object cached, ISessionImplementor session)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object DeepCopy(object cached, object", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.store.publish(component.location, editing_user)\n        self.assertTrue(self.store.has_published_version(component))\n        self.assertTrue(self.store.has_published_version(child))\n        self.assertTrue(self.store", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        digest.update((byte) (ch[start] & 0xff));\n        digest.update((byte) (ch[start + 1] & 0xff));\n        digest", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict)\ndef mklocationnamerec(rec):\n    return aetypes.LocationNameRecord(rec)\ndef mklocationnamerec(rec):\n    return aetypes.LocationNameRecord(rec)\ndef mklocationnamerec(rec", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           return ResolveType(api, controllerName, actionName, parameterNames, type, formatter, mediaType, sampleDirection);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "               value = entry.get_active_text()\n            self.on_quit_cell(record, column.name, value, callback=callback)\n        return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanFactory.registerBeanDefinition(LegacyConfigPostProcessor.BEAN_NAME_GLOBAL_PROPERTIES,\n                    new RuntimeBeanReference(LegacyConfigPostProcessor.BEAN_NAME_GLOBAL_PROPERTIES));\n            // Reconfigure the bean according to", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           f.readline()\n        except ValueError:\n            f.close()\n            module.fail_json(msg=\"File %s is empty\" % path)\n    ht = HtpasswdFile(path, new=False, default=crypt_scheme)\n    if", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.IUnknown)] object o\n            );\n        [PreserveSig]\n        int QueueEventParam(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.IUnknown)] object o\n", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       return null;\n    }\n}\n\n\nA: I'm not sure if this is the right way to do it, but I've been able to get it working.\n\nI've created a new class that extends the Principal class and implements the Principal interface.\n\npublic", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element.findall('.'):\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_extra_text(self, element):\n        \"\"\"Verify the extra text of an element.\n        This verifies the text of the", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   return clone\n\n\ndef _get_elements_by_tagName_ns_helper(doc, namespaceURI, localName,\n                                  result):\n    if namespaceURI is None:\n        return doc.getElementsByTagName(localName)\n    else:\n        return doc.getElementsByTagName", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.getLength() != saveLength)\n\t\t\t\tdecoder.writeTypeAndLength\n\t\t\t  (TlvTypeCodes.KeyLocatorDigest, encoder.getLength() - saveLength);\n\t\t}\n\t\tprivate static void", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        \n        //updates the player's view\n        viewx = (int)(mapw/2);\n       ", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        action.setPlayerName( m_playerName.getValue() );\n        action.setPassword( m_password.getValue() );\n        action.setTeam( GameEngine.model().getGame().getTeams().get( 0 ) );\n       ", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "   raise RuntimeError(\"Error downloading file: %s\" % r.reason)\n    return r.data.decode(\"utf-8\")\ndef get_url_json(socket_path, url):\n    \"\"\"Get the JSON response from the server\n    :param socket_path: Path to the", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t\treturn response;\n\t\t\t\t\t});\n\t\t\t\tif (response != null)\n\t\t\t\t{\n\t\t\t\t\tmergedOrder = new OrderDetail(response", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if c_input is not None:\n        input_components = [_reaction_elements(rxn) for rxn in c_input]\n        output_components = _reaction_elements(c_output)\n        try:\n            input_weights = [_reaction_weight", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return (\n            super(UnitManager, self).get_queryset().select_related(\n                'store', 'submitted_by', 'commented_by', 'reviewed_by',\n            )\n        )\nclass Unit(models.Model, base.TranslationUnit):", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "           ],\n        ),\n        migrations.CreateModel(\n            name='PermissionType',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('name', models.CharField", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (m_IgnoreChanges)\n      return;\n    if (m_RecentItems.contains(item))\n      return;\n    m_RecentItems.add(item);\n    m_IgnoreChanges = true;\n  }\n  \n  /**\n   * Removes", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.IsInRange(target, 1))\n                return false;\n            return true;\n        }\n    }\n}\n\n\nA: I'm not sure if this is the right place to ask this, but I'm trying to make a script that will detect if", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       if (halfTradePeriodDate == null && getOffer().getPaymentMethod().getHalfTradePeriod() != null)\n            halfTradePeriodDate = new Date(getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\ta = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic Node LeadingAny(Node p) {\n\t\tif (p == null) return null;\n\t\tNode a = null;\n\t\tif (", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)((address & 0x000000ff)  >>  4);\n\t\t\tbuff[5] = (byte)((address & 0x00000000)  >>  0);\n\t\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t}\n\t\tpublic int compare(MskJointVo o1, MskJointVo o2)\n", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tEmail.Send( Email.FromAddress, Email.CrashAddresses, \"Crash Report\", op.ToString() );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           for (i = 0; i < N2; i++, k += 2)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (i = 0; i < N2; i++, k += 2", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "   rate.create()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tIntPtr destData = IntPtr.Zero;\n\t\t\t\tif ( length < MapBufferThreshold )\n\t\t\t\t{\n\t\t\t\t\tdestData = ( (GLESHard", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.scan_ter.setValue(self.scan_ter.frequency)\n\t\tself.scan_ter.setValue(self.scan_ter.inversion)\n\t\tself.scan_ter.setValue(self.scan_ter.symbolrate)\n\t\t", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                tcpAcceptFilters.add(new TcpAddress.TcpAddressMask(filterStr));\n            }\n            return;\n        default:\n            throw new IllegalArgumentException(\"unknown option \" + optval);\n        }\n    }\n\n    public void setOption", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               return fout.ToArray();\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "               \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"optional_string\\\".\",\n                \"optional_string: 123\");\n            AssertParseError(\n                \"1:1: Message type \\\"protobuf", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void clear() {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tqueueOperation( new Clear() );\n\t\t}\n\t\tmap.clear();\n\t}\n\t@Override\n", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Writes the current highest bid in an auction\n\t\t/// </summary>\n\t\t", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "   return action_message\n\n\nclass hr_attendance_group(models.Model):\n    _inherit = 'hr.attendance'\n\n    def _get_attendance_ids(self):\n        return self.env['hr.attendance'].search(\n            [('employee", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\treturn (grdResultsRow)super.createRowFromVo(orderInvestigationLiteVo);\n\t}\n\tprivate void addResult(OrderInvestigationLiteVo orderInvestigationLiteVo)\n\t{\n\t\tgrdResultsRow row =", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The state of this item.\n        /// </summary>\n        public uint State { get { return state; } }\n        /// <summary>\n        /// The index of", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       return(maker.new_tab(cwd, profile, debugtab))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( \"_\"+Guid.NewGuid().ToString( \"N\" ), managedType, marshalAttribute, arraySize ) );\n                }\n                else {\n                    toReturn.Add( new StructTypeInfo( \"_\"+Guid.NewG", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t}\n\t\tpublic override bool IsByRef {\n\t\t\tget {\nNext line of code:\n\t\t\t\treturn base_type != null && base_", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               return null;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"sender\"></param>\n        /// <param name=\"args\"></param>\n        /// <returns></returns>\n        private XmlNode evidence_Ev", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.vbox3 = new global::Gtk.VBox ();\n\t\t\tthis.vbox3.Name = \"vbox3\";\n\t\t\tthis.vbox3.Spacing = 6;\n\t\t\t// Container child vbox3.Gtk.", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "               notebooks[\"board\"].set_tab_reorderable(child, True)\n                notebooks[\"board\"].set_tab_reorderable(child, False)\n                notebooks[\"board\"].set_tab_reorderable(child, True)\n                notebooks[\"", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Move-Tab-to-top\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_1),\n   ", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo [persistenceUnitName=\" + this.persistenceUnitName + \", persistenceProviderClassName=\" + this.persistenceProviderClassName + \", transactionType=\" + this.transactionType + \", nonJtaDataSource=\" + this.nonJtaDataSource + \", jtaDataSource=\" + this.", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n  }\n  \n  protected boolean isFileWritable()\n  {\n    return false;\n  }\n  \n  protected boolean isFileModifiable()\n  {\n    return false;\n  }\n  \n  protected boolean isFileDeletable()\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Cursor = System.Windows.Forms.Cursors.Hand;\n\t\t\tthis.butAttach.Depth = 0;\n\t\t\tthis.butAttach.DisabledImage = null;\n\t\t\tthis.butAttach.", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       return sb.toString();\n    }\n    \n    /**\n     * Encodes the given string, so that it can be used within an HTML page.\n     * \n     * @param string     the String to convert\n     * @param urlPrefix   the URL prefix\n     * @return", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"RFC4231_TC1_Legacy\", hmac, data, digest);\n\t\t}\n\t}\n}\n\n\nA: I'm not sure if this is the right way to do it, but I've been able to get it to", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(current_align) {\n\t        case 0:\n\t            current_sum = 0;\n\t            break;\n\t        case 1:\n\t            current_sum = 1;\n\t            break;\n\t        case 2:\n\t            current_", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      return java.GetValue(\"JavaHome\").ToString();\n    }\n    static String GetJdkHome()\n    {\n      return FindJdkInRegistry(\"SOFTWARE\\JavaSoft\\Java Runtime Environment\");\n    }\n    static String GetJdkEx", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               comment = name\n        return comment, l\n    def get_job(self, name):\n        comment, l = self.find_job(name)\n        if comment:\n            return l\n        return None\n    def get_all_jobs(self):\n        return self.", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "   modifier = MeshModifierVERTEX_WEIGHT_MIX(modifier_json['modifier_name'], modifier_json['modifier_type'], modifier_json['modifier_json'])\n\n\nA: I'm not sure what you're trying to do here. You'", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           if(rankCounts == null)\n            {\n                rankCounts = Lists.newArrayListWithCapacity(rankCounts.size());\n                pepLenRankCounts.put(peptideLength, rankCounts);\n            }\n            double[] pepLenR", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n    }\n    @Test\n    @DisplayName(\"neighbors() should return iterator with all the", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(100, 138);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(112, 21);", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'object_name': 'Scan'},\n            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               throw SDOException.referencedPropertyNotFound(((SDOProperty) nextQName).getUri(), nextQName.getLocalPart());\n            }\n        }\n        return alreadyProcessed;\n    }\n    private void processGlobalAttributes(SDOType sdoType) {\n       ", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       return self.write(cr, uid, ids, {'state':'validate2', 'manager_id': manager})\n    def holidays_first_validate(self, cr, uid, ids, context=None):\n        return self.write(cr, uid, ids, {'", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets and sets whether the Control is visible or not\n        /// </summary>\n        bool IBOColSelector.ControlVisible\n        {\n            get { return this.Visible; }\n            set", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return mixerLine.szPname;\n        }\n        /// <summary>\n        /// Gets the Mixer Line Component Type\n        /// </summary>\n        public MixerLineComponentType ComponentType\n        {\n            get\n            {\n                return mixerLine.dwComponentType", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = (ims.core.admin.domain.objects.CareContext) domainObject.getCareContext();\n\t\t}\n\t\tif ( value10 != null ) \n\t\t{\n\t\t\tdomainObject.setCareContext(value10", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           \"cargo build --target %s --release --no-default-features --features %s\" % (target,\n                                                                        \" \".join(features)),\n            env=self.build_env(),\n            verbose=verbose)\n        if status:\n            return status\n", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0 }, true), this.getScore(new double[] { 0, n }, false));\n\t\t}\n\t}\n\t/**\n\t *", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               var headId = Module.RevParse(\"HEAD\");\n                var headRev = new GitRevision(headId);\n                var indexRev = new GitRevision(ObjectId.IndexId)\n                {\n                    ParentIds = new[] { headRev }\n                };", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   job.execute()\n\n\nA: I'm not sure if this is the right way to do it, but I've been able to get this to work by using the following:\n\n    # --------------------------------------------------------------------------\n    # Create the job:\n    job = st.", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (o instanceof AuthScope) {\n            final AuthScope other = (AuthScope) o;\n            return match(other) == 0;\n        }\n        return false;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        public System.IAsyncResult AddInt(int a, int b) {\n            return this.BeginInvoke(\"AddInt\", new object[] {\n                        a,\n                        b});\n        }\n        public int AddInt(", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tdefault : \n\t\t\t\t\tthrow new CRuntimeException(\"Invalid feature \" + feature.Name +", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "\n\nA: I'm not sure if this is the right way to do it, but I've been able to get it to work by using the following:\nimport argparse\nimport logging\nimport os\nimport sys\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.putc(ptype, 'Received packet %s' % ptype)\n        self.putc(msi, 'Received packet %s' % msi)\n        self.putc(esi, 'Received packet %s' % esi)\n        self.putc(", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "       // <-, line 200\n        slice_from(\"i\");\n        break;\n      case 2:\n        // (, line 202\n        // <-, line 203\n        slice_from(\"a\");\n        break;\n      case 3:", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               if (cls != null) {\n                    o = handlers.getObject(cls, dins);\n                }\n            } catch (Exception ex) {\n                System.out.println(\"ex: \"+ex);\n            }\n            if (o != null) {\n                cd.v", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tif (s.find (i) != s.end()) {\n\t\t\t\t\tstill_there = true;\n\t\t\t\t\tr.push_back (i->second);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (st", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   if X.begin >= 0x10000: return [Interval(X.begin, 0x10000), get_trigger_sequence_for_interval(X.end)]\n    else:                 return [Interval(X.begin, X.end)]\n\n", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tif (StartOf(12)) {\n\t\t\t\tGet();\n\t\t\t\tint beg = la.pos; int col = la.col;\n\t\t\t\twhile (StartOf(11)) {\n\t\t\t\t\tGet();\n\t\t\t\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc_list.append(edi_doc)\n        return super(sale_order_line,self).edi_export(cr, uid, records, edi_struct, context=context)\n\n\nA: I'm not sure if this is the right way to", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local._https.local.\",", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    private void setUpTestPermissions() throws Exception\n    {\n        this.permissionService = new Perm", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   from config import deviceToken, loginId, password\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "   return rv\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           if (m_Keys.Count > 0)\n            {\n                m_Keys[0].KeyValue = m_Keys[0].KeyValue + 1;\n            }\n            else\n            {\n                m_Keys[0].KeyValue = 1;\n            }\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Tuner tuner : devices) {\n            if (tuner.isLiveDevice()) {\n                tuner.setLiveDevice(true);\n                tuner.setLiveModel(liveModelMap.get(tuner.getDeviceName()));\n                tuner.set", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   return jobs;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length == 3) {\n        entries.add(new Entry(split[0], split[1], ignoreCase, split[2]));\n      } else if (split.length == 2) {\n        entries.add(new Entry(split[0], ignoreCase", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           if os.path.exists(os.path.join(source_dir, n)):\n                return n\n        return sub_path\n    def find_file(self, filename, source_dir, path):\n        if not os.path.exists(path):\n            return None\n       ", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "       return mapnik.PythonDatasource.wkt_features(keys, features)\n    @classmethod\n    def wkt_features_at_point(cls, point, features):\n        \"\"\"A convenience function to wrap an iterator yielding pairs of WKT format geometry and dictionaries of", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "       return self.ip + ':' + str(self.port)\n    @property\n    def description(self):\n        if self.want.description is None:\n            return None\n        return self.want.description\n    @property\n    def ip(self):\n        if", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   def _add_button.click(self):\n        if self.location.is_displayed and self.inline_display_name.is_displayed and self.inputs.is_displayed and self.playbook_name.is_displayed and self.playbook_display_", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           result = (IAction) cons.newInstance(argTypes);\n        }\n        return result;\n    }\n    public void setDbManager(String key, IAction dbManager) {\n        if (key == null) {\n            key = \"default\";\n        }\n        if", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n        self._test_", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           errorStatus[0] = execute();\n        } catch (CoreException e) {\n            errorStatus[0] = recordError(e);\n        }\n        if (errorStatus[0] != null) {\n            MessageDialog.openError(shell, getProblemsTitle(), errorStatus", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tif (super.init(meta, data))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\tpublic void dispose(StepMetaInterface smi, StepDataInterface sdi)\n\t{\n\t\tmeta=(A", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           }\n        }\n    }\n}\n\n\nA: I'm not sure if this is the right way to do it, but I'm trying to make a script that will add a bunch of npcs to a map.\n\nA: I'm not sure if this is the right", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       rc.get(10, TimeUnit.SECONDS);\n\n        service.shutdown();\n        return rc.get(10, TimeUnit.SECONDS);\n    }\n}\n\n\nA: I'm not sure if this is the right place to", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfter(r, res);\n            }\n            return res;\n        } catch (RemoteException e) {", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\treturn (uint)((value >> 24) | 0xC0);\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.notify(descr)\n        self.fm.thisdir.vcs_outdated = True\n        try:\n            self.fm.thisdir.vcs.add(filelist)\n        except VcsError:\n            self.fm.notify(\"Could not extract", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\tpublic void CreateInstance_StringString_2 ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "               userstate.texture = cmd.parameters[\"texture\"]\n            if \"avatar\" in cmd.parameters:\n                userstate.avatar = cmd.parameters[\"avatar\"]\n            if \"avatar_url\" in cmd.parameters:\n                userstate.avatar_url =", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new PlayerLeaderChangedEvent(group, player));\n        }\n    }\n}\n\n\nA: I'm not sure if this is the right place to", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t} while (parent != null);\n\treturn EVAL;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               nl = element.SelectSingleNode(\"Lands\").ChildNodes;\n                Lands = new string[0];\n                Lands = new string[nl.Count];\n                for (int i = 0; i < nl.Count; i++) {\n                    XmlNode n =", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\t\telse if (m_Peerless == PeerlessList.MelisandeFelucca)\n\t\t\t\t\t\tm_key[i] = new", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add((ims.careuk.vo.beans.ChangeOfServiceVoBean)beans[x]);\n\t\t}\n\t\treturn coll;\n\t}\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           new Version(1, 0, 0),\n            new Version(1, 1, 0),\n            new Version(1, 2, 0),\n            new Version(1, 3, 0),\n            new Version(1, 4, 0),\n", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tp.SetByteArray(Argon2Kdf.ParamExpc, pbExpc);\n\t\t\tp.SetByteArray(Argon2Kdf.ParamOutput, pbS);\n\t\t\tp.SetByteArray(Argon2Kdf.ParamOutput", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\tif(stack == null)\n\t\t\treturn false;\n\t\tIInventory mainInv = player.inventory;\n\t\tIInventory baublesInv = BotaniaAPI.internalHandler.getBaublesInventory(player);\n\t\tint invSize = main", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\"but Lights has {1}\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t}\n\t\t/// <summary>\n\t\t/// Removes the current frame from", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.actionTraceList == null)) {\n            if ((other.actionTraceList != null))\n                return false;\n        } else if ((!this.actionTraceList.equals(other.actionTraceList)))\n            return false;\n        if ((this.screenshots", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.request = requestFromCLCC(p.readInt());\n            dc.response = responseFromCLCC(p.readInt());\n            dc.mRequest = requestFromCLCC(p.readInt());\n            dc.mResponse = responseFromCLCC(p", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isApplication()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType().", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                newVertices[x + y * xSizeP] = new Vector3(x, y, 0);\n                newNormals[x + y * xSizeP] = new Vector3", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\n\t\t\t\n\t\t\tresult = client.add(testInt1, testInt2);\n\t\t\t\n\t\t\tif (result == 0)\n\t\t\t{\n\t\t\t\t", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn null;\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\nNext line of code:\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t@Nonnull", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(name);\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeObject(found);\n        }\n        out.flush();\n        out.close();\n        in.close();\n   ", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                   .To3D()\n                                    .IsValid()\n                                    .IsValidTarget(spell.RangeCheckFrom.To2D(), true, spell.RangeCheckFrom.To2D(), spell.From.To2D(), a, b)\n                                    .", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       if (graph.isDefCollider(x, y)) {\n            if (!(graph.isAncestorOf(y, x) || graph.isAncestorOf(y, x))) {\n                return true;\n            }\n        }\n        return false;\n", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   var child = pop[i];\n                    if (child is PlaceBase)\n                        plcs.Push(child as PlaceBase);\n                    else if (child is Drawable)\n                        plcs.Push(child as Drawable);\n                }\n            }\n            return", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.getFileId() == null) {\n            if (other.getFileId() != null) {\n                return false;\n            }\n        } else if (!this.getFileId().equals(other.getFileId())) {\n            return false;\n        }\n", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (m_Item.From == null || mobiles[i] == null)\n                            continue;\n                        if (m_Item.From == mobiles[i])\n                            continue;\n                        if (m_Item.From.Deleted)\n                            continue;", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(user, msg);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual bool Message(PlayerMobile user, string text, bool message = true, bool history = true)\n\t\t{\n\t\t\tif (!CanMessage", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId, String sComponentName) {\n    return mock.getAvailCom", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           final String[] files = new String[checkedItemSize];\n                            for (int j = 0; j < checkedItemSize; j++) {\n                                final int key = items.keyAt(j);\n                                if (items.get(key)) {\n                                    files", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "       this.j.writeLock().lock();\n        try {\n            this.channel.attr(NetworkManager.c).set(enumprotocol);\n            this.channel.config().setAutoRead(true);\n            NetworkManager.g.debug(\"Enabled auto read\");\n        } catch (Exception", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    } else {\n      String name = recipients.get(0).toShortString();\n      return context.getString(resourceMany, name);\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, items in iteritems(type_paths):\n                for item in items:\n                    if isinstance(item, test_cls):\n                        tests[path].append(item)\n            if not tests:\n                continue\n            for path, items in iteritems(type_", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compileTimeStrategy != null) {\n            compileTimeStrategy.scriptCompiled();\n        }\n    }\n    private void handleScriptRuntimeException(final Throwable e, final PrintStream outStream, final IFreeplaneScriptErrorHandler errorHandler) {\n        if (e instanceof Script", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           return 0;\n        }\n        /// <summary>\n        /// Method to override setting a timeout for a wrapped client adapter\n        /// </summary>\n        /// <param name=\"timeout\">The timeout in milliseconds</param>\n        protected virtual void ClientSetTimeout(int timeout)\n       ", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "   for i in range(energy.size):\n      Etf = energy[i]\n      grad_Etf = grad[i].flatten()\n      grad_E = Etf\n      transformed_grad.append(grad_E)   \ntransformed_grad = np.asarray(", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif(obj instanceof ims.ocrr.vo.OrderedInvestigationForStatusChangeVo)\n\t\t{\n\t\t\timsocrrvoorderinvestigationforstatuschangevo obj = (imsocrrvoorderinvestigationforstatuschangevo)obj;", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.get(0).getTags(), asList(\"search-tag1\", \"search-tag2\"));\n    }\n    @Test(dependsOnMethods = \"shouldFindStacksWithSpecifiedTags\")\n    public void shouldFindStacksWithSpecifiedTagsAndLimit()", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       pf.addParameter(new ParameterImpl(FULL_SITE_CRAWL_URL_KEY, siteUrl));\n        pf.addParameter(new ParameterImpl(FULL_SITE_CRAWL_MAX_DOCUMENTS_KEY, maxDocuments));\n", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tif (kind == LNodeKind.LNodeList)\n\t\t\t{\n\t\t\t\tLNodeList list = (LNodeList)candidate;\n\t\t\t\tLNodeList patternList = (LNodeList)pattern;\n\t\t\t\tif (list", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   if (colisionList.Count > 0)\n                    {\n                        extendedWillHit += colisionList.Count;\n                        extendedFarmLocation = colisionList[0];\n                    }\n                }\n                if (extendedWillHit > 0)", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenu(contextMenus);\n\t}\n\n\tpublic ims.framework.utils.Image getIMG()\n\t{\n\t\treturn (ims.framework.utils.Image)this.getContext().getExternalContext().getImage();\n\t}\n\tpublic", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   if re.search(pattern, frozen_output, re.MULTILINE):\n        return True\n    return False\n\ndef get_frozen_output():\n    \"\"\"Get the output of pip freeze\"\"\"\n    return subprocess.check_output([\"pip\", \"", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'name': 'test',\n            'value': 1,\n            'v': 1,\n        })\n        f = Form(r, view='test_testing_utilities.o2m_parent')\n        with f.subs.new() as sub:\n            sub", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert simplify(Sum(x, (x, a, b)) + Sum(x, (x, b, c))) == \\\n        Sum(x, (x, a, c))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tvar ret=UnityEngine.WWW.EscapeURL(checkSelf(l));\n\t\t\tpushValue(l,true);\n\t\t\tpushValue(l,ret);\n\t\t\treturn 2;\n\t\t}\n\t\tcatch(Exception e)", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this._newStartingIndex = -1;\n                this._oldStartingIndex = -1;\n                if (changedItems == null)\n                {\n                    throw new ArgumentNullException(\"changed Items\");\n                }\n                if (startingIndex < -1)\n                {\n", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           writer.close();\n            streamWriter.close();\n            writer.close();\n            streamWriter.close();\n            writer.close();\n            streamWriter.close();\n            writer.close();\n            streamWriter.close();\n            writer.close();\n            streamWriter.close();\n", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                case Param.OrgType1:\n                    c.OrgType1 = Token2Csv();\n                    break;\n                case Param.OrgType3:\n                    c.Org", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"Width: {0}\", ide.width);\nConsole.WriteLine (\"Height: {0}\", ide.height);\nConsole.WriteLine (\"Color Count: {0}\", ide.colorCount);\nConsole.WriteLine (\"Reserved: {0}\", ide.reserved);\nConsole.WriteLine (\"Pl", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               // add the JSR to the stack\n                stack = JSR;\n                JSR = null;\n            }\n            // add the subroutine to the stack\n            stack = new Label(id, nbSubroutines);\n        }\n    }\n    /**\n     * Returns", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 2);\n            WriteBackInstance(__domain, ptr_of_this_method, __mStack, ref instance_of_this_method);\n            __intp.Free(ptr_of_this", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tthis.position = position;\n\t\t\tlblPosition.setText(\"Position: \" + String.valueOf(position));\n\t\t}\n\t\t\n\t\tprivate void setPosition(int position) {\n\t\t\tthis.position = position;\n\t\t\tlblPosition.setText", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       self.transport._send_message(m)\n        self.transport._expect_packet(MSG_KEXGSS_COMPLETE,\n                                      MSG_KEXGSS_ERROR)\n        \"\"\"\n        client_token = m.get_string()\n        self", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           tree.setSelectionRow(0);\n            tree.setSelectionColumn(0);\n            tree.setRowHeight(100);\n            tree.setColumnWidth(0, 100);\n            tree.setColumnWidth(1, 100);\n            tree.", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "           return result\n\"\"\"\n            def _sum(self, code, from_date, to_date=None):\n                if to_date is None:\n                    to_date = datetime.now().strftime('%Y-%m-%d')\n                result = 0.0", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "   dVdzdOm[i] = (rhobarr[i] - rho_crit_arr[i]) / rho_crit_arr[i]\n    dlnm = lnmarr[i] - lnmarr[i-1]\n    dlnmd", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = font.getSize();\n        d.height = font.getSize();\n        return d;\n    }\n    \n    @Override\n    public void setFont(Font font) {\n        super.setFont(font);\n        this.font = font;\n   ", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       if flag=='off_center':\n            x1_v=f3(np.zeros(3),ref_point-origin)\n            y1_v=f3(np.zeros(3),p1-origin)\n            z1_v=f3(np", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.ShowDialog();\n\t\t}\n\t\tprivate void GuiAsync(Action action)\n\t\t{\n\t\t\tDispatcher.BeginInvoke(new Action(() =>\n\t\t\t{\n\t\t\t\taction();\n\t\t\t}));\n\t\t}\n\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "                   for n in xrange(1, params[0]['nbins'])]\n            else:\n                params[0]['bins'] = params[0]['bins']\n            if params[1]['bins'] is None:\n                step = (params[1]['high'] - params", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           if (query.getWith() != null) {\n                contact.setLastMessageTransmitted(query.getLastMessageTransmitted());\n            }\n        }\n        if (query.getPagingOrder() == PagingOrder.REVERSE) {\n            query.setAll", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "           im1L = im1.convert(\"L\", rgb2I)\n        elif channel == \"R\":\n            im1L = im1.convert(\"L\", rgb2r)\n        elif channel == \"G\":\n            im1L = im1.convert(\"L\", rg", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tif (rsp.isOkey()) {\n\t\t\t\taddLog24(rsp, ret);\n\t\t\t} else {\n\t\t\t\tif (rsp.isOkey()) {\n\t\t\t\t\taddLog24(rsp, ret", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   yield UInt16(self, \"num_blocks\", \"Number of blocks the data is split into\")\n    yield UInt16(self, \"size_blocks\", \"Size of the blocks\")\n    yield textHandler(UInt32(self, \"rec_blk", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       \"\"\"\n        return [bton(req.body), bton(req.status), bton(req.headers)]\n        \"\"\"\n        # The WSGI spec says that the body should be a bytes object, but\n        # Python 2.7 and 3.2 don't", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(chance) == 0)\n                return; // we've already succeeded..\nNext line of code:\n            if (Utility.Random(chance) == 1)\n                return; // we've already succeeded..\nNext line of code:", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           return rdltypes.UserEnum(\n                name=entry_name,\n                value=entry_value,\n                displayName=displayname,\n                description=desc\n            )\n        return entry_value\n    #---------------------------------------------------------------------------\n    def parse_integer(self,", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"Fatal Error:\\nUnable to locate coniguration file for FOG Service!\");\n                    this.Close();\n                }\n            }\n        }\n        private void btnSave_Click(object sender, EventArgs e)\n        {\n            if (headless", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               return (bool)this.ViewState[\"SubmitText\"] ?? true;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta]", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(this.trianglesUsed[textureHash] == 0)\n                {\n                    insideEnd = true;\n                    break;\n                }\n                if(!insideEnd)\n                {\n                    beginTriangle(this.textureArray[textureHash]);\n", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   if header not in exposedHeaders:\n        exposedHeaders = exposedHeaders + ', ' + header\n    response['Access-Control-Expose-Headers'] = exposedHeaders\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver driver = idlePool.Dequeue();\n                    if (now.Subtract(driver.LastUsed).TotalSeconds > 0.5)\n                    {\n                        oldDrivers.Add(driver);\n                        idlePool.Remove(driver);\n                   ", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   return var\n\n\ndef _validate_variable(var, new_var, name, input_list):\n    \"\"\"Validate variable.\n    Parameters are used in a specific order to determine if variable is valid.\n    The order of the parameters used is:\n    1. name\n    ", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.start()\n\n\nA: I'm not sure if this is the right way to do it, but I've been trying to figure out how to do this for a while.\nI've been trying to make a quest that has a random chance of giving a reward. I've tried", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\t\tempty = string.Format(\"{0:00}:{1:00}:{2:00}\", num, num1, nullable.Value);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           Attributes = new AttributeCollection(this, \"a_Position\", 3, 0, 1, 0, 0, VertexAttribPointerType.Float);\n        }\n        public void SetUniform(String name, int value)\n        {\n            if (name ==", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       for reaction in self.reactions:\n            reaction._model = self\n        for metabolite in self.metabolites:\n            metabolite._model = self\n        for gene in self.genes:\n            gene._model = self\n        if rebuild_relationships:", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tcoll.add(beans.get(i));\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static TumourGroupListVoBean buildFromBean", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tif(current.y>lines[selectedLine].y){\n\t\t\t\t\tcurrent.height = (lines[selectedLine].y+lines[selectedLine].height)-current.y;\n\t\t\t\t}\n\t\t\t\tif(current.y<lines[", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       set.setAnimationRepeatCount(0);\n        set.setRepeatMode(Animation.REVERSE);\n        set.setRepeatCount(0);\n        set.setRepeatMode(Animation.REVERSE);\n        set.setRepeatCount(0);\n       ", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.PPartnerInterestInterestCategory.GetSelectedString() != String.Empty)\n                {\n                    if (PartnerInterestRow.PPartnerInterestInterestCategory.GetSelectedString() != HighestNumber.ToString())\n                    {", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tint[] \t\tscoresHyp \t= new int[length];\n\t\t\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tscoresSol[i] \t= pssm.getScore(i", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
