{"pred": "\t\t\t\tfor ( int j = 0; j < m_Participants[i].Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tif ( m_Participants[i].Players[j] != null )\n\t\t\t", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_u, e_v, **data.copy())\n\t\t\t\n\t\t\tif e_u == e_v:\n\t\t\t\tcontinue\n\t\t\t\n\t\t\tif e_u in roots:\n\t\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       # Open the test file for reading\n        a = Sndfile(ofilename, 'r')\n        nframes = a.nframes\n        buffsize = 1024\n        buffsize = min(nframes, buffsize)\n        # First, read some frames,", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\nA:\nimport re\nimport urllib.parse\nimport urllib.request\nimport urllib.error\nimport urllib.parse\nimport urllib.request\nimport urllib.error\nimport urllib.parse\nimport urllib.request\nimport urllib.error\nimport urllib", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           s.print(\"Certificates: \");\n            for (X509Certificate cert : chain) {\n                s.print(cert);\n                s.print(\" \");\n            }\n            s.println(\"\");\n        }\n    }\n}\n/*\n * ServerKey", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public synchronized static JESpace getSpace (String name)\n    {\n        JESpace sp = (JES", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (item.quantity() == 1) {\n\t\t\t\tRedButton btnAlchemize = new RedButton(Messages.get(this,", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       environ['PATH_INFO'] = environ['PATH_INFO'] + '/'\n        environ['QUERY_STRING'] = environ['QUERY_STRING'] + '&'\n        environ['REQUEST_METHOD'] = 'POST'\n        environ['wsgi.input'] = environ['", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       self.webview.execute_javascript(\"setRepeated('%s');\" % status_id)\n    def lock_status(self, status_id):\n        mark = \"lock('%s');\" % status_id\n        self.webview.execute_javascript(mark", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "   return {\"error\": False}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsFalse (a.Union (b).Equals (a), \"Trusted+Untrusted\");\n\t\t}\n\t\t[Test]\n\t\tpublic void Union_DifferentZones ()\n\t\t{\n\t\t\tZoneIdentityPermission a = new ZoneIdentity", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "   return self.trust_managers\n\n\nA:\n\nI'm not sure what you're trying to do, but I'm guessing that you're trying to use a custom SSL context.\nThe problem is that you're trying to use a custom SSL context, but you", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n    /**\n     * Finds the forward to the domain admin page.\n     *\n     * @param mapping The action mapping\n     * @param domain The", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "           self.__tmp_dir,\n            'datastream_%s' % uuid.uuid4().hex)\n        self.__datastream_transport = asyncio.StreamReader(\n            self.__datastream_address, loop=self.__event_loop)\n        self", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool2);\n\t\t\t\t\tif (jumpID == 0) {\n\t\t\t\t\t\t//don't change anything\n", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMED(new ConfigFile<UUID, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(UUID id, ConfigurationSection conf)\n", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new IntegerFieldEditor(SHELL_HEIGHT,\n\t\t\t\t\t\t\"Shell height", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               m_Owner.FinishSequence();\n            }\n        }\n    }\n}\n\nOutput:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       for state in states:\n            if state.state in self._new:\n                self._new[state.state].detach()\n                del self._new[state.state]\n            elif state.state in self._deleted:\n                self._deleted[state.state].", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t\t\tnamed =", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   like ``r'/foo/*'`` in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if not self.request.path.endswith(\"/\"):\n", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tif (viewIndex != -1) {\n\t\t\t\tif (Controls.Count == 0) {\n\t\t\t\t\tif (InitialView != null)\n\t\t\t\t\t\tSetActiveView (InitialView);\n\t\t\t\t\telse\n\t\t", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   args = parser.parse_args()\n    wigle_downloader = WigleDownloader(args.user, args.password, args.coordfile, args.outpath)\n    wigle_downloader.run()\n", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Possible", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds.extend(android_builds(build, platforms))\n    else:\n        builds.extend(android_builds(build, platforms, mobile=True))\n    # Build the button\n    if small:\n        button_text = 'Download Firefox'\n    else:\n       ", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.loadByProjectTypeIssueTypeAssignments(projectID, issueTypeID, objectID);\n\t\t}\n\t\tif (stateBeansList!=", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach ( ArgumentSyntax argumentSyntax in argumentSyntaxs ) {\n                ArgumentSyntax argument = argumentSyntax;\n                if ( argument.Parent.GetType() == typeof (MemberDeclarationSyntax ) ) {\n                    MemberDeclarationSyntax memberDeclaration = (MemberDeclarationSyntax) argument.Parent;", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self._update_partition_id(0)\n        # Verify that the user_partition_id is set to the first group configuration.\n        self.assertEqual(0, split_test.user_partition_id)\n        # Set to second group configuration.\n", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           tmp.Add(new PdfIndirectReference(fontDescriptor));\n            tmp.Add(new PdfIndirectReference(toUnicode));\n            tmp.Add(new PdfIndirectReference(cmap));\n            tmp.Add(new PdfIndirectReference(cmap3", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcgn.depth = maxDepth + 1;\n", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       return new ListenableFutureTask<Bitmap>(callable);\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      Util.assertMainThread();\n      if (task != null) {\n        task.cancel(true);\n      }\n      task = new Listenable", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "# -*- coding: utf-8 -*-\n# added new list_tbl definition\nfrom functools import partial\nimport random\nimport itertools.imap\nfrom navmazing import NavigateToAttribute, NavigateToSibling\nfrom widgetastic.widget import View", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequences, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               ScriptManager sm = ScriptManager.GetCurrent(Page);\n                sm.RegisterScriptControl(this);\n            }\n            base.Render(writer);\n        }\n    }\n}", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\tsharpness = compound.getShort(\"sharpness\");\n\t\tfire = compound.getShort(\"fire\");\n\t\tblast = compound.getShort(\"blast\");\n\t\tsmite = compound.getShort(\"smite\");\n\t\tbane = compound.", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return \"Effect{\" + super.toString() + \"probability=\" + probability + \"scopes=\" + scopes + '}';\n    }\n}\n", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "\n\nA:\n\nThe problem is that you are using the same instance of Person for both Person and Organization.\nYou need to create a new instance of Person for each Organization.\n\n", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   def line(self, x=None, y=None, sel_dim=False):\n        \"\"\"\n        Plot two 1D-variables against each other.\n        :param x: Name of a 1D-variable\n        :param y: Name of another 1D-variable", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (rootFolder.IsNullOrWhiteSpace())\n                {\n                    continue;\n                }\n                if (ignored.Contains(path))\n                {\n                    continue;\n                }\n                toScan.Add(path);\n            }\n            foreach (var path in", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform(remappingFunction));\n", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       resbrains = pdt.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\n            if contobj.isDiscussable() and canreply(contobj):\n               ", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t\t}\n\t\tinternal byte m_X;\n\t\tinternal byte m_Y;\n\t\tinternal byte m_Z;\n\t\tinternal short m_Hue;\n\t\tinternal byte m_Patch;\n", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   channelUri = String.Format(\"sip:{0}@{1}\", land.LocalID, m_freeSwitchRealm);\n                }\n                //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Par", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(textDateStart.Text==\"\"){\n\t\t\t\ttextDateStart.Text=PayPeriodCur.DateStart.ToShortDateString();\n\t\t\t}\n\t\t\tif(textDateStop.Text", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column_", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   return authz.is_authorized('group_member_create', context, data_dict)\ndef group_member_create(context, data_dict):\n    model = context['model']\n    user = context['user']\n    if not user:\n        return {'success':", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tint partitionId = splittedSet.getActualPartitionId(resultIndex);\n\t\t\t\t// setting outcome\n\t\t\t\toutcomes[resultIndex] = parentIndex;\n\t\t\t\t// setting confidences\n\t\t\t\tconfidences[", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new SearchResults[0];\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"segments\">The array containing", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = ch - '\\uD800';\n            if (codePoint < 0x10000) {\n               codePoint += '\\uDC00';\n            }\n         }\n         if (codePoint < 0x10000) {", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "     if (existingRequired && studyFormName == null) {\n        return ValidationResults.REQUIRED_FAIL;\n      } else if (existingRequired && studyFormName != null) {\n        return ValidationResults.SAMPLE_NOT_FOUND;\n     ", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != ModData.Manifest", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(((ims.core.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionListVoBean)beans[x]).build", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "   xbmc.executebuiltin(\"Notification(\"+localtxt2+\",\"+localtxt8+\", 5000, %s)\" % (image))\nelif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    views", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plotname\n  if not 'plotName' in pD:\n    return S_ERROR( \"Missing plot name!\" )\n  plotName = pD", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (bot.World.LocalRandom.Next(100) < Info.PlaceDefenseTowardsEnemyChance)\n\t\t\t{\n\t\t\t\tvar rallyPoint = bot.World.WorldActor.GetNearestBuilding(bot.", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       return plan.getPlan();\n    }\n    public List<AbstractPlanNode> compile(String sql, int paramCount, String joinOrder, Object partitionParameter, boolean inferSP, boolean lockInSP, DeterminismMode detMode, List<AbstractPlanNode> plan) {\n       ", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(241, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = parity;\n\t\t\tdcb.StopBits = bits;\n\t\t\tdcb.XonLimited = true;\n\t\t\tdcb.X", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=admin)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    if args.keep_tempdir:\n        _keep_tempdir = True\n    else:\n        _keep_tempdir = False\n    unittest.main()\n\nif __name__ == '__main__':\n    main()", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tif entry[0] == currentListIndex:\n\t\t\t\t\tcurrentListIndex = None\n\t\t\t\t\tcurrentListEntry = entry\n\t\t\t\t\tnewListIndex = tmpList.index(entry)\n\t\t\t\t\tif newListIndex is", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               float fFontX = fontX;\n                float fFontY = fontY;\n                if (fCode != null)\n                    fFontX = fontX + fCode.Length * font.GetWidthPoint(fCode, size);\n                return new Rectangle(0, ", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return results;\n  }\n  \n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value'\n", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-90.0, +90.0, 18.0)\n        x_points, y_points = np.meshgrid(x_points, y_points)\n        sample_points = [\n            (\"longitude\",", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetText(currPacket.Frame.ToBytes());\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\n            Clipboard.Set", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "import matplotlib.pyplot as plt\nplt.style.use('ggplot')\nplt.style.use('ggplot')\nplt.style.use('ggplot')\nplt.style.use('ggplot')\nplt.style.use('ggplot')\npl", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "       }\n    }\n}\n", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(245, 2", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           writeUint64(header, emptyStreams.length);\n            header.write(emptyStreams.toByteArray());\n        }\n    }\n    private void writeFileEmptyFiles(final DataOutput header) throws IOException {\n        boolean hasEmptyFiles = false;\n        for", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   if (System.currentTimeMillis() - start > rampDelay)\n                        inRamp = !inRamp;\n                }\n                else\n                {\n                    alphaLevel += inRamp ? 128 : -128;\n                    if (", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_removable_if_max", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "               if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, can", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x02:\n                    /* C", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return u\"{0}/{1}/{2}\".format(self._course_dict['org'], self._course_dict['number'], self._course_dict['run'])\n    def _create_course(self):\n        \"\"\"\n        Create the course.\n        \"\"\"\n       ", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tfor(String splitNumberPart : splitNumber) {\n\t\t\tif(splitNumberPart.length() > 0) {\n\t\t\t\tchance = chance * Integer.parseInt(splitNumberPart);\n\t\t\t}\n\t\t}\n\t\treturn (int)", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "   for cert_type in types:\n        try:\n            os.remove('%s/%s.pem' % (config_directory,cert_type))\n        except OSError:\n            pass\n        try:\n            os.remove('%s/%s.pem' %", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 36);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "   def getRoomFullName(self):\n        \"\"\" Session Room \"\"\"\n", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           throw new MessageWriterException(e);\n                        }\n                    }\n                };\n                result = new MessageImportResult(messageWriter);\n            } else {\n                MessageWriter messageWriter = new MessageWriter() {\n                    @Override\n                    public boolean write(Message message", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\tif (value instanceof Integer) {\n\t\t       \t\t\tlayer = ((Integer) value).intValue();\n\t\t       \t\t}\n\t\t       \t\tif (value instanceof String) {\n\t\t       \t\t\tlayer = Integer.parseInt((String)", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null && currentSession.isOpened()) {\n            userInfoSession = currentSession;\n            user = userInfoSession.getCurrentUser();\n            if (user != null) {\n                userProfilePicID = user.getId();\n                userProfileP", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions){\n\t\t\tsum += emotion.strength;\n\t\t}\n\t\tfor (Emotion emotion : emotions){\n\t\t\temotion.strength = (float) (sum / emotions.length);\n\t", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n            }],\n            self.build.stages_to_list())\n    def test_to_xml(self):\n        \"\"\"Test exporting as XML.\"\"\"\n        # read and parse sample file\n       ", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   phi2Rad = (mu + (3*e1/2-27*e1*e1*e1/32)*sin(2*mu)\n               + (21*e1*e1/16-55*e1*e1*e", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       form = ReportUserForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Reported successfully!\")\n            return HttpResponseRedirect(reverse('profile-user', args=[user.username]))\n    else:\n", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @property\n    def page_title(self):\n        \"\"\"The HTML page title.\"\"\"\n        return \"Add %s series\" % self.context.title\n    @action(\"Add\", name='add')\n    def add_action(self, action, data):\n        self.", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t}\n#endif\n\t\tpublic static KPTranslation Load(string strFileName, IXmlSerializerEx xs)\n", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    /**\n     * @return the datatype converted to a byte array\n     */\n    public byte[] toByteArray()\n    {\n        return writeByteArray();\n    }\n   ", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "               new_positional_tags_list.append((flag, TagRegex(flag, regex)))\n            return new_positional_tags_list\n    def default_length_regex(length_regex):\n        if not length_regex:\n            return length_regex\n        else:", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                throw new NotIm", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tif ready_pipe == -1:\n\t\t\tready_pipe = os.open(os.devnull, os.O_RDWR)\n\t\t\tos.dup2(ready_pipe, 0)\n\t\t\tos.dup2(ready_pipe,", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "               this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);\n                this.AddRes(index, typeof(PrismItem), 1073464, 1, ", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "   if exc is not None:\n        self.app.do_teardown_request(exc)\n        if self.app.debug:\n            self.app.do_teardown_request(exc)\n        self.app.do_teardown_request(", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ################################################################################################################################\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition default", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       dx = (rot_dir[0] * angles[1] + rot_dir[1] * angles[2])\n    else:\n        dx = (rot_dir[0] * angles[1] + rot_dir[1] * angles[2] +\n              rot_", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "   def _buildRE(self, regx):\n        \"\"\" Return the Proxyfied RE string \"\"\"\n        if self.isEnabled():\n            regx = re.sub('//1', self.option, regx).replace('&', '&amp;')\n\n\n\n\n", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn type.ToString (fmt) + \" \" + unit.ToString (fmt);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, IFormatProvider fmt)\n\t\t{\n\t\t\treturn new FontUnit (s, fmt);\n\t\t", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tAssert.That(obj.Properties[0].Value.Properties[0].Value.Value, Is.EqualTo(\"must be an object or array.\"));\n\t\t\tAssert.That(obj.Properties[0].Value.Properties[0].Value.Properties[1].Value.", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int w = 0; w < width; w++) {\n                    edges.add(new T2<String,String>(w, h));\n                }\n            }\n            return edges;\n        }\n        @Override\n        public Collection<String> getVertices()", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   ds.config[\"setup\"][\"lut identifier\"] = \"LE-2D-FEM-19\"\n    ds.config[\"setup\"][\"add px err\"] = True\n    ds.config[\"setup\"][\"px um\"] = .34\n    ds.config[\"setup", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       log(\"modelsEqual(expected, actual)\");\n        log(\"modelsEqual(expected, actual)\");\n        log(\"modelsEqual(expected, actual)\");\n        log(\"modelsEqual(expected, actual)\");\n        log(\"modelsEqual(expected, actual)\");\n        log(\"models", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                   {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performDownload();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should download and install Yarta.\n\t * \n\t * When the function returns true Yarta will be installed.\n\t * \n\t * @return true/false", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tif (context != IntPtr.Zero)\n\t\t\t{\n\t\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\t\tcontext = IntPtr.Zero;\n\t\t\t}\n\t\t\twindow.Dispose();\n\t\t", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       (projected onto the *y* axis).\n        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._data_container.data_cov_mat_inverse\n    @property\n    def x_data_cor_mat(self):\n        \"\"\"2", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * Converts this to a CmsLinkInfo.\n     *\n     * @return a new Cms", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "               }\n                else {\n                  accountIdAccountMap.put(walrusObject.getOwnerId(), owningAccount);\n                }\n              } catch (AuthException e) { // In case the account is deleted, transfer the ownership to eucalyptus admin\n                LOG.warn", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public event EventHandler Initialized\n        {\n            add { _intialized += value; }\n            remove { _intialized -= value; }\n        }", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplateCommand command = new ImportVmTemplateCommand(createParameters());\n        command.setIsImportAsNewEntity(isImportAsNewEntity);\n        command.setParameters(createParameters());\n        command.setParameters(createParameters());\n        command.setParameters(createParameters", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.LeftAttach = ((uint)(1));\n\t\t\tw10.RightAttach = ((uint)(2));\n\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw10.", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineConstructor(string name, MethodAttributes attribs, CallingConventions callConv, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)\n", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return (Builder) new Builder().MergeFrom(prototype);\n    }\n    \n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                   vertices[x] = getVertex(getVertIndex(i, x));\n                else\n                    vertices[x] = new Vector3f(vertices[x]);\n            }\n        }\n    }\n    /**\n     * Stores in the <code>normals</", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (showDateData != null) {\n            result.add(COLUMN_NAME_DATECREATED);\n            result.add(COLUMN_NAME_DATEMODIFIED);\n        }\n        return result;\n    }\n    /**\n     * Returns the page type.<", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds (0.25f);\n\t\t\tif (dynamicHeight)\n\t\t\t{\n\t\t\t\ttextRect.sizeDelta = displayTextRect.sizeDelta;\n\t\t\t\tdisplayText.text = inputField.text;", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnMouseMove(MouseEventArgs e)\n    {\n      m_State = eButtonState.MouseOver;\n      Invalidate", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!Users.Contains(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            foreach (string user in Users)\n            {\n                SendEmailForUser(", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions;\n", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           if (CriteriaCodesUsed.Count == 0)\n            {\n                ValidationColumn = FMainDS.PcConference.Columns[PcConferenceTable.ColumnConferenceId];\n                VerificationResult = new TScreenVerificationResult(new TVerificationResult", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && CopyRange; }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (_customRange == value)\n\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t}\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t\tget {\n\t\t\t\treturn cacheDir;\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation.getBugPattern() == null) {\n                throw new BugInstanceException(\"BugInstance has no BugPattern\");\n            }\n        }\n    }\n}\n", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Menu.GetBool(\"LaneClearQ\") && Q.IsReady() && min", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        try:\n            year, month, day = re.findall(r\"\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\", fb)[0].split('-')\n        except:\n", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(field_def['field_name'], field_model_def['field_name'])\n        self.assertEquals(field_def['field_name'], field_model_def['field_name'])\n        self.assertEquals(field_def['field_name'],", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new object[] {\"E1\", 10L});\n                // widen to short\n                env.CompileDeploy(\n                    \"@Name('create') create window MyInfraW#keepall as (f1 short, f2 string)\"\n                    , path);\n", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "   return super(view, self).save(cr, uid, res_id, value, xpath=xpath, context=context)\n\n\nA:\n\nThe problem is that the view_obj is not a view object, but a string.\nYou can't use it as a", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = createHTMLView(c, text);\n        }\n        if (oldValue != null) {\n            oldValue.dispose();\n        }\n        if (value != null) {\n            c.setClientProperty(BasicHTML.propertyKey, value);\n        }\n", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, contents=content)\n    assert s.name_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    expected_urls = [\n        \"/html/test.html", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmSqlLoader(namedQueryReference);\n\t\t\t}\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, string namedQuery)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n\t", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tm_Members[i].Serialize(", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       invocationQueue.pop();\n    }\n    private boolean contains(Graph graph) {\n        for (Graph g : graphQueue) {\n            if (g.equals(graph)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    private", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "               pytest_con = pytest\n                pytest_bindings = self.create_pytest_bindings()\n                pytest_bindings['VNC_PORT'] = self.sel_vnc_port\n                pytest_bindings['VNC_HOST'] = self.", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValuePhiNode phi = getCachedPhi(value, value.getStamp());\n                    if (value != null) {\n                        states.get(0).readCache.put(key, phi);\n                    }\n                }", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#onCameraCapabilitiesChanged */\n    public void", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonWallMapGump(from));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.Serialize(writer);\n\t\t", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   'Bibxxx',\n    'BibrecBibxxx',\n])\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   \"\"\"Remove a user from the cache.\n    :params username: The username of the user to remove.\n    :params domain: The domain of the user to remove.\n    \"\"\"\n    user = '%s@%s' % (username, domain)\n    self.module.set(", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def percent_translated(self):\n        \"\"\"\n        Convenience method that return the percentage of translated", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n    elif not res['Value']:\n      res = self.transClient.setTransformationParameter( transID, 'Status', 'ValidatedOutput", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(uri.getPath() == null)\n\t\t\t\tthrow new CommentException(l10n(\"invalidFormURI\"));\n\t\t\tif(uri.getPath().equals(\"/\"))\n\t\t\t\tthrow new CommentException(l10n(\"invalidFormURI", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n        msg = yield self.run_fake_single_build(gsp, buildResult, verifiedScore)\n        result = makeReviewResult(msg,\n                                  (GERR", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.text = 'foo'\n    self.assert_(self.category.text == 'foo')\n    new_category = atom.CategoryFromString(self.category.ToString", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "               Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> r = new HashMap<String, AnnotationMirror>();\n            for (Map.Entry<String, AnnotationMirror> e : r1.entrySet())", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                timer_irq_Latch_16 = map16.timer_ir", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           JMenuItem jMenuItem = new JMenuItem(sTDocUrl);\n            jMenuItem.addActionListener(oActionListener);\n            _jMnuRoot.add(jMenuItem);\n        }\n        private void insertMenus(){\n            JMenuBar jMenuBar = new JMenu", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Red Bears]\n", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint h = Frame.H;\n\t\t\tif (h > min) {\n\t\t\t\treturn h;\n\t\t\t}\n\t\t\treturn min;\n\t\t}\n\t\tpublic int SizeWidthToFit ()\n\t\t{\n\t\t\t", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "   return self.announcement.title\n", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "# lexers.add_lexer(PhpLexer)\n# Enable highlighting for PHP code not between <?php ... ?>\n# lexers.add_lexer(PhpLexer, 'php')\n# Enable highlighting for PHP code not between <?php ... ?>", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                ORDER BY sdate, stime ''', (i,))\n    row_count = cursor.fetchall()\n    print \"Row count is: \", row_count\n    for row in row_count:\n        print \"Row is: \", row\n        time_str = row[4", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "   print(\"db_set_last_snapshot\", project_id, timestamp)\n    try:\n        conn.db.projects.update({'id': project_id}, {'$set': {'last_snapshot': timestamp}})\n    except Exception as err:\n        log(\"Error setting", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"Haha! You're joking, right?<br/>Why would this small town ever need a town office?<br/>Don't worry...if you've lost something, it's usually kept at the Chief's House.\");\n\t\t\t\tbreak", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\tname\t- aname/ename/gname\n\tvalue\t- vote value\n\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n       ", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "   def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n    def add_host_data(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               else if (toastType.equals(TOAST_NONE))\n                    Toast.makeText(context, getString(R.string.toast_message_done) + uri, Toast.LENGTH_LONG).show();\n                else\n                    Toast.makeText(context, get", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary.keys()) > 0):\n        print(\"primary.xml contains additional packages:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name, pkg", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "           build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    def get_finalized_command (self, cmd_name):\n        \"\"\"", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(disassembledValues, lazyPropertyColumnAliases[j], session, entity", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '-q', '1',\n        '-o', 'log=%s' % log_name,\n        '-o', 'log_file=%s' % log_name,\n        '-o', 'log_file_size=1000000000',\n       ", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        //[RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        public ActionResult SaveEventDelegate(Delegate", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                       var circle = (Circle) obj;\n                        return string.Format(\"({0},{1},{2})\", circle.X, circle.Y, circle.Radius);\n                    }\n                    if (obj is Vector2)\n                    {\n                        var vector = (", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "       elif self.__name__ == \"FilejungleCom\":\n            #try api download\n            res = self.load(\"http://api.filejungle.com/api/download/premium/\",\n                            post={\"username\": self.user,\n                                 ", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count == 0)\n\t\t\t\treturn null;\n\t\t\treturn path[0];\n\t\t}\n\t\tCPos? GetSearchFromLocation(Actor self)\n\t\t{\n\t\t\tif (deliverActor != null", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                      self.logger.error(\"dhcpd -t failed\")\n                       return False\n                else:\n                    self.logger.info(\"dhcpd -t not restarted\")\n                    return True\n            elif which_dhcp_module == \"manage_isc_dh", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder();\n    }\n    @Override\n    public void sendEvent(Event e) {\n        Event.Builder eventb = newEvent().setSeverity(e.getSeverity()).setMessage(e.getMessage());\n        if (e.hasType())", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           while (true)\n            {\n                if (context.Suffix == PpmContext.ZERO)\n                {\n                    goto NoLoop;\n                }\n                if (context.NumberStatistics == 0)\n                {\n                    goto NoLoop;", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Short VR.\n        /// </summary>\n        public static readonly DicomVr SSvr = new DicomVr(\"SS\", false, false, true,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(tFull[3]);\n\t\t}\n\t\t//we have to sort the tests\n\t\tArray.Sort(sessionValuesArray);\n\t\t//we have to select the test that is the same as the one selected\n\t\t//we have to", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "       o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 10)\n        self.assertEquals(b'abcdefghij\\x00\\x00ij\\x00\\x00\\x00\\", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": " <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X (", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   ax.plot(cr['combined'][app][VC]['durations'],\n            cr['combined'][app][VC]['stats']['intervals'][0]['interval'],\n            color='g', linestyle='--', label='95% CI')\n    ax.", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "       self._testUIDGIDSwitch(1, 0, 0, 1, [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t}\n\t\t\t\telse if(model.isPressed()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, control", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[1])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult,", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        mirror.writeElement(kind, index, value);\n    }\n    @HOSTED_ONLY\n    public boolean writeHeaderValue(ObjectMirror mirror, int offset, Value value)", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (relativePath == null) {\n                return null;\n            }\n            // if the relative path is not empty, then we need to resolve it\n            // relative to the project directory\n            string assemblyFile = FileUtils.CombinePaths(Parent.ProjectDirectory, relativePath);", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       n = m + i16 - 2;\n        i27 = i26 + i16 - 1;\n        i29 = i28 + i16 - 1;\n        i25 = 1;\n        if ((paramInt1 != ", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"\\t\" + s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tfor( int i=0 ;i < states", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               });\n            #endregion Lucian\n            #region Malphite\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Malphite\",\n                    SpellName = \"MalphiteQ\",\n                    Slot = Spell", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.password\"));\n\t}\n\tprotected void mockLabelService() {\n\t\twhen(labelService.getLabel(anyString(), anyString())).then(invocation -> {", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(\n            OSError,\n            lambda: subprocess.Popen(\n                ['/sbin/modinfo', '-d', 'somemodule'],\n                stdin=subprocess.PIPE,\n                stdout=subprocess.PIPE,\n", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (propertiesName == null)\n\t\t\t\tthrow new ArgumentNullException(\"propertiesName\");\n\t\t\tif (configDirectory == null)\n\t\t\t\tthrow new ArgumentNullException(\"configDirectory\");\n\t\t\tif (dataDirectory == null)\n\t\t\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\tinternal void SetIndex (Index index)\n\t\t{\n\t\t\tif (_index != null) {\n\t\t\t\t_index.RemoveRef();\n\t\t\t\tTable.DropIndex(_index);\n\t\t\t}\n\t\t\t_index = index;\n\t", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.retranslateUi(Dialog)\n        Dialog.setWindowTitle(QtWidgets.QApplication.translate(\"Dialog\", \"Preferences\", None, QtWidgets.QApplication.UnicodeUTF8))\n        self.setWindowTitle(QtWidgets.QApplication.translate(\"Dialog", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               TextView text = (TextView) findViewById( R.id.wx_status_text );\n                text.setText( R.string.no_taf_available );\n                return false;\n            }\n            Cursor wxs = result[ 1 ];\n            if ( wxs == null", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring continents = \"from Continent\";\n\t\t\t\tint results = s.CreateQuery(continents).List().Count;\n\t\t\t\tQueryStatistics continentStats = stats.GetQueryStatistics(continents);\n\t\t\t\tAssert.Is", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum ^= uiByteValue;\n            }\n            return (ushort)uiCRCITTSum;\n        }\n        /// <summary>\n        /// Reflects a byte in the given order.\n        /// </summary>\n        private ulong reflect", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn entityData.get(HAS_SPEED_MODULE) ? 1 : 0;\n\t}\n\tpublic boolean isTargetingAllowedMob(LivingEntity potentialTarget) {\n\t\tif (potentialTarget != null) {\n\t\t\t", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                new CeylonHyperlinkDetector(), \n                new JavaHyperlinkDetector(), \n                new JavascriptHyperlinkDetector(), \n                new CeylonNativeHeaderHyperlinkDetector(), \n               ", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "self.drawingModeWidget.setParameters()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Target.Target );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        Object convertedObj = selectConverter.convert(valueChoice);\n                        if (convertedObj.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tsb.append(\"\"+i+\"->\"+j+\" \\t\"+fractionWithAmount[i][j][0] +\"\\t\"+fractionWithAmount[i][j][1] +\"\\t\"+fractionWithAmount[i][j][2] +\"\\n\");\n\t", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                           foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                                int", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic MethodInfo TaskMethod2 {\n\t\t\tget { throw new NotImplemented", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final int groupName = \"group\" + ownerGroupId;\n        final int groupId = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n        final int userId = new Random().nextInt(SecurityManagerImpl.MAX_USER_ID);\n        final int", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v * viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 offset)\n\t\t{\n\t\t\treturn v * viewport.ScaleFactor () + offset;\n", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "   def __repr__(self):\n        parts = []\n        parts.append('endpoint_stats(')\n        parts.append('packets=')\n        parts.append(repr(self.packets))\n        parts.append(\", \")\n        parts.append('bytes=')", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\tRemoveClient(i, m_workerSocketList, disconnect_client);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n        /// <summary>\n        /// sends a message to a specific client\n        /// </summary>\n        /// <param name", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           switch (type) {\n                case Step:\n                    logDataSet(convertToStepBucketList(list));\n                    break;\n                case Activity:\n                    logDataSet(convertToActivityBucketList(list));\n                    break;\n                default:\n                ", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " PrintLongLine('                               %s%d%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   \"\"\"\n    response = HttpResponse(mimetype='application/json')\n    response['Content-Disposition'] = (\n        u'attachment; filename=\"{0}.json\"'.format(filename)\n    )\n    writer = simplejson.JSONEncoder()\n    writer.", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(\"score\"), null/* c */,\n                        Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n        }\n        {\n            final ASTContainer container = new ASTContainer();\n            container", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       if self.request.POST.get(\"set_is_active\"):\n            self._handle_set_is_active()\n        return super(UserDetailView, self).post(request, *args, **kwargs)\n", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return UnitHelper.ComputePublicKeyToken(this.ResolvedAssembly.PublicKey); }\n    }\n    /// <summary>\n    /// A list of named byte sequences persisted with the assembly and used during execution, typically via .NET Framework helper classes.\n    /// </summary", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           var w = new DenseVector(input.Count);\n            var x = new DenseVector(input.Count);\n            var y = new DenseVector(input.Count);\n            var z = new DenseVector(input.Count);\n            var q = new DenseVector", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[0];\n\t\t}\n\t\t\n\t\tApfloat[] medians = new Apfloat[2];\n\t\tmedians[0] = sortedNumbers[left];\n\t\tmedians[1] = sortedNumbers[right];\n\t\t\n", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "               if sample_count[v, j] > 0:\n                    L[v] += 1\n                sample_count[v, j] -= 1\n                v = parent[v]\n        for edge in edges_in:\n            parent[edge.child] = edge", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       for mapping in mapping_json['mappings']:\n            if mapping['type'] == 'sh':\n                if mapping['properties'] == csv_mapping.properties:\n                    result['csv_mapping'] = csv_mapping\n        return result\n    def _test_enrich_to", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.LockTeam)\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots)\n\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn _rootCause.ToString();\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}\n", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + padding_bytes + self.data\n    def parse_flags(self, flag_byte):\n        super().parse_flags(flag_byte)\n        if FrameFlag.END_STREAM in self.flags:\n            self.data = b''\n       ", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           foreach (var node in cluster.Nodes)\n                CheckClusterConsistency(node);\n        }\n#endif\n        /// <summary>\n        /// Checks the consistency of the clusters.\n        /// </summary>\n        /// <param name=\"cluster\">The cluster.</param", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeCosine = (double)(1.0) / (double)(sin(m_maxSlopeRadians));\n}\nvoid btKinematicCharacterController::setInterpolateUp(bool interpolateUp)\n{\n\tm_interpol", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (ExpressionTree initializer : initializers) {\n            if (canBeLeaked(initializer)) {\n                checker.report(Result.failure(\"unique.leaked\"), initializer);\n            }\n        }\n        return super.visitNewArray(node, p", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\tif (nbttagcompound != null)\n\t\t{\n\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\tif (nbttagcompound1 != null)\n\t", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = new ClassItem(Context, _returnNode, _returnNode.Attributes[TYPE_ATTRIB]);\n\t\t\t\t}\n\t\t\t}\n\t\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\tmyTrackBar.Width = 80;\n\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tdoReturn(Collections.singleton(annotationType)).when(lookup).findAll();\n\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(instrumentationApplier));\n\t\t\t//", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isImplicit != other.isImplicit)\n\t\t\treturn false;\n\t\tif (this.postdominators == null && other.postdominators == null)\n\t\t\treturn true;\n\t\tif (this.postdominators != null &&", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideRExtent[start][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this left constituent stretch far enough to reach the right constituent?\n              continue", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "               'pg_dump', 'src', 'dst',\n            ],\n            shell=False, env=None,\n            stdout=PIPE, stderr=PIPE, stdin=PIPE,\n            preexec_fn=mock.ANY, close_fds=True\n       ", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.R", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a parameter with a color value.\n\t *\n\t * @param   name    Name of the parameter.", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat == null ) {\n\t\t\t return false;\n\t\t}\n\t\tif ( !( proxyThat instanceof Contact ) ) {\n\t\t\t return false;\n\t\t}\n\t\tfinal Contact that = (Contact)proxyThat;\n\t\tif (", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "   if n % n_save == 0:\n      print((\"SAVING CONFIGURATION : %s\" %n))\n      if (reject_wall+reject_jump) == 0:\n        body_offset = 0\n        for i, ID in", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       if cdata is None:\n            return\n        if cdata[0].type == T.TensorConstant:\n            cdata = cdata[0].value\n        if cdata == 0:\n            return\n        if cdata == 1:\n            return\n       ", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "from django.contrib.auth.models import Group\nfrom common.forms import ModelFormWithHelper\nfrom common.helpers import SubmitCancelFormHelper\nfrom community.models import Community, CommunityPage, RequestCommunity\nfrom community.utils import get_groups\nfrom users.models import SystersUser", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "               return fn(*arg, **kw)\n            event_key = event_key.with_wrapper(wrap)\n        event_key.base_listen(retval=retval, **kw)\n    def after_compile(self, query):\n        \"\"\"Receive the :class:`.", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "\n\nA:\n\nThe problem is that the ConditionalModule class is not defined in the ConditionalDescriptor class.\nYou need to import it.\n\n", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       for change in data_model_changes:\n            if change.type == 'value_change':\n                change.value = to_global(change.key)\n        return data_model_changes\n    def update_filtered_data_from_selection(self, data_model_", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class != null && Method == null && Field == null && Sig == null)\n\t\t\t{\n\t\t\t\tif (type != null)\n\t\t\t\t{\n\t\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 19;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t//", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.getNoPrefix(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"test/mail/syncmail.5\"]))\n        self.assertEqual(", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> entry : csvData.entrySet()) {\n", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\treturn false;\n\t}\n\t@Override\n\tpublic boolean onWanded(EntityPlayer player, ItemStack wand, boolean isRightClick) {\n\t\treturn false;\n\t}\n\t@Override\n\tpublic boolean onWanded(EntityPlayer player, ItemStack wand", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        return intrinsicCohesion;\n    }\n    private void birthCase3(ArrayList<Community> newCommunitiesToReturn, THashSet<Community> commonCom", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t/*\n\t\t\tif(tvComputerCluster.SelectedNode!=null) \n\t\t\t{\n\t\t\t\tif(tvComputerCluster.SelectedNode.Text.ToString().Equals(\"Computer\"))\n\t\t\t\t\tupdateListViews(\"Computer", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date exceptionDate : exceptionDates) {\n      exDateList.add(new Date(exceptionDate));\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Converts the specified date to a Datable.", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.OnEvent += OnSourceEvent;\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags = HideFlags.HideAndDontSave", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class, containerName, this);\n            SpanConfig cfgObject = new SpanConfig(jsonData);\n            Status result = switchManager.addSpan(cfgObject);\n            if (", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width.intValue(), height.intValue());\n\t\t\t}\n\t\t}\n\t\tprivate final class LocalFormName extends ims.framework.utils.ImagePath\n\t\t{\n\t\t\tprivate static final long serialVersionUID =", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n    public String randomString(int length) {\n        return randomString(length, rnd.nextInt(length));\n    }\n    public String randomString(int length, int random) {\n        return randomString(length", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "   def make_alt_uri(self, uri):\n        \"\"\" make an alternative uri for a given uri\n        \"\"\"\n        uuid = hashlib.sha1(uri.encode('utf-8')).hexdigest()\n        return 'http://opencontext.org/items/0", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .shrinkfit  = \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .mergegcells = \")\n                .Append(StringUtil.ToHexString", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width kana\n\t\t\t\tbytes[posn++] = (byte)0xFF;\n\t\t\t\tbytes[posn++] = (byte)0x60;\n\t\t\t} else {\n\t\t\t\tthrow new Argument", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "   src = off1//off2//off3\n    obj.operands = [dst, composer([env.cst(src.int(),28),env.cst(off4,4)])]\n    obj.type = type_data_processing\n@ispec(\"3", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.getStream();\n\t\t\treturn new JRPropertiesMap(stream);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tif (close)\n\t\t\t{\n\t\t\t\tstream.close();\n\t\t\t}\n", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE || this == SPECTATOR;\n        }\n        /**\n         * Returns true if this is the SPECTATOR game type\n         */\n        public boolean isSpectator()\n        {\n            return this == SPECTATOR", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");\n\t\t\tSecurityIdentifier groupSid = new SecurityIdentifier (\"BA\");\n\t\t\tCommonSecurityDescriptor csd; DiscretionaryAcl dacl; CommonAce ace;\n\t\t\tcsd = new", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "       if error:\n            print_w(\"[fingerprint] Lookup failed: \" + error)\n        # emit progress\n        self.__idle(self.__progress_cb,\n                float(len(releases)) / len(self.__queue.queue))\n    def run(", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       if (PhotonEditor.Current.RpcList.Length > 0)\n        {\n            // check for outdated RPCs\n            if (PhotonEditor.Current.RpcList.Length > 10)\n            {\n                Debug.LogWarning(Current", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       Button full_delete_button = rootLayout.findViewById(R.id.full_delete_button);\n        full_delete_button.setCompoundDrawablesWithIntrinsicBounds(null, new IconicsDrawable(getActivity(), GoogleMaterial.Icon.gmd_delete).sizeD", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           op_cc = np.linalg.inv(self.symmetry.op_scc[s]).round().astype(int)\n            op_cc = np.linalg.inv(op_cc)\n            op_cc = np.linalg.inv", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygs", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tfor (int i = 0; i < block.Body.Count; i++) {\n\t\t\t\t\tILNode curr = block.Body[i];\n\t\t\t\t\tif (curr is ILLabel) {\n\t\t\t\t\t\tflatBody.", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    if (delay <= 0f) {\n\t\treturn;\n\t    }\n\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 3] = (byte)(num >> 24);\n        out[outOff + 2] = (byte)(num >> 16);\n        out[outOff + 1] = (byte)(num >> 8);\n        out[outOff", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new SimpleRegexValueGetter( objectVariables,\n                source, null ) );\n        }\n\t}\n\tprivate static class PatternFinder\n\t    extends FilteringIterable<PatternMatch>\n\t{\n\t    private PatternMatch match;\n\t   ", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "       elif key == 'VALEUR':\n            slice_json['valeur'] = transform_values_holder_xml_json_to_json(value[0])\n        else:\n            slice_json[key] = value\n    if comments:\n        slice_json['comment", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           if (ClientSettings.ICON_ENABLE_FRAME!=null)\n              btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_ENABLE_FRAME)));\n          }\n        }\n      });\n      btn.addActionListener", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "   if sys.argv[1] == '--test':\n        print getIDList()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n   ", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.delete(Db.Table1.TABLE_NAME, Db.Table1.ID_GROUP + \" = \" + deleteId, null);\n                    //Update budget items\n                    db.delete(Db.Table4.TABLE_NAME, Db.Table4.ID_GROUP", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               else\n                {\n                    Marshal.FreeCoTaskMem(m_ptr);\n                }\n                m_ptr = IntPtr.Zero;\n            }\n        }\n        #endregion\n    }\n}\n\nA:\n\nThe problem is that you're passing", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (numberToCancel == 0)\n\t\t\t\treturn;\n\t\t\tvar ps = produceable[itemName];\n\t\t\tif (ps.Done)\n\t\t\t\treturn;\n\t\t\tps.Done = true;\n\t\t\tps", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_m4.sub(r'%(\\w+)%', '%\\1%%', code)\n        self.outputs[0].write(code)\n        self.outputs[0].flush()\n        self.outputs[0].close()\n        self.", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx + reactorExtent ] + chemical[ 0 ][ idx + 2 ]\n\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx + reactorExtent", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n           ", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\treturn true;\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Configura os parametros do metodo de Buscar\n\t\t/// </summary>\n\t\t/// <param name=\"qs\">Objeto da Store Procedure</param>\n", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Replace(object original, object target, object owner)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Assemble(object cached, object owner", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       self.cli_load_config(commands)\n    def config_ntp_auth_enable_by_cli(self):\n        \"\"\"Config ntp authentication enable by the way of CLI\"\"\"\n        self.cli_load_config(commands)\n    def get_ntp_", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.store.update_item(component, editing_user)\n        self.assertTrue(self.store.has_changes(component))\n        # Publish and verify that there are no unpublished changes\n        component = self.store.publish(component.location, self.user_", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        digest.update((byte) 0);\n        digest.update((byte) 0);\n        digest.update((byte) 0);\n        digest.update((byte) ", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           Type type = null;\n            foreach (var parameterName in parameterNames)\n            {\n                if (parameterName == \"*\")\n                {\n                    type = typeof(object);\n                    break;\n                }\n                else\n                {\n                    type = api.ParameterDes", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "               value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                entry, callback=callback)\n            return True\n        elif event.keyval == gtk.keysyms.Delete:\n            if is", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n}\n", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           f.next()\n        except StopIteration:\n            f.close()\n            module.fail_json(msg=\"No file found at %s\" % path)\n    if f is None:\n        module.fail_json(msg=\"No file found at %s\" % path", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.IUnknown)] object pUnkState\n            );\n    }\n    [ComImport, System.Security.SuppressUnmanagedCodeSecurity,\n    Guid(\"36F846FC-2256-48B", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       ensureAdminAccess();\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = { USERS + USER_ID_PATH }\n    )\n    public User addUser( @RequestBody Auth0UserBasic user ) {\n", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "if __name__ == '__main__':\n    from twisted.python import log\n    log.startLogging(sys.stdout)\n    reactor.run()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   elif node.nodeType == Node.ENTITY_REFERENCE_NODE:\n        clone = newOwnerDocument.createEntity(node.nodeName, node.publicId,\n                                               node.systemId, node.notationName)\n    elif node.nodeType == Node", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.NameComponent, endOffset))\n\t\t\t\tkeyLocator.setKeyName(new Name.Component\n\t\t\t\t  (new Blob(decoder.readBlobTlv(TlvType", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        \n        //Updates the player's target\n        if(myPlayer.target != -1){\n           ", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        GameEngine.model().getGame().getGameJoinManager().addGameJoin( action );\n        hide();\n      }\n    } );\n    hpanel.add( m_btnOk );\n    m_panel.add( hpanel );\n", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(r.data.decode(\"utf-8\"))\n    if progress:\n        log.debug(\"Downloading %s\", url)\n    filename = get_filename(r.headers)\n    log.debug(\"Downloading %s\", filename)\n    if filename == \"", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\tfailureReason = response.FailureReason;\n\t\t\t}\n\t\t\tcatch", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if len(reaction.metabolites) > 1:\n        raise ValueError(\n            \"Reaction must have only one metabolite component.\"\n        )\n    return [met.weight * met.stoichiometric_coefficient for met in reaction.metabolites]\n", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return self.get_queryset().filter(\n            store__path__startswith=pootle_path,\n            user__isnull=False,\n        )\n    def get_for_path_and_user(self, pootle_path, user):\n        \"\"\"", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Students',\n            fields=[\n                ('id',", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "                   pinfo = self.ports[portnum]\n                    if pinfo.link.egress_name == self.controller_name:\n                        self.controller_links[self.controller_name] = pinfo.link\n                        self.controller_links[self.controller", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (m_IgnoreChanges)\n      return;\n    m_RecentItems.add(item);\n    writeProps();\n    if (m_Menu instanceof JMenu)\n      ((JMenu) m_Menu).updateUI();\n    else if (m_Menu instanceof JPop", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.Map.CanFitMobiles(src.Map.GetMobilesInRange(src.Location, 16), src.Map.GetItemsInRange(src.Location, 16), src.Map.GetItemsInRange(src.Location, ", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       if (halfTradePeriodDate == null && takeOfferDate != null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;\n", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\ta = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic Node LeadingAny(Node p, int n) {\n\t\tif (p == null) return null;\n\t\tNode a = null;\n", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)((address & 0x000000ff)   );\n\t\t\tWriteReport(buff);\n\t\t\tif(mStream != null)\n\t\t\t{\n\t\t\t\tmStream.Read(mRead", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t\tif (caseInsensitive)\n\t\t\t\tthis.caseInsensitive = caseInsensitive;\n", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           for (i = 0, k = 1; i < N1 + N2 + N3; i++, k += 3)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (i = 0", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       rate.create()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, shadowBuffer.Lock(), length );\n\t\t\t\tshadowBuffer.Unlock", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.satfinder_scan_nims.value = self.satfinder_scan_nims.value\n\t\tself.satfinder_scan_nims.save()\n\t\tself.satfinder_scan_nims.value = self", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                tcpAcceptFilters.add(TcpAddress.TcpAddressMask.parse(filterStr));\n            }\n            return;\n        case ZMQ.ZMQ_TCP_ACCEPT_FILTER_MAX:\n            tcpAcceptFilters.clear();", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               // Decode the row\n                for (int i = 0; i < width; i++) {\n                    int n = dataStream.Read(curr, 0, width);\n                    if (n <= 0)\n                        return fout.ToArray();\n                   ", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface(':1.23'))\n        s.set_", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n\nA:\nimport pickle\nimport pickle_storage\nimport options\nimport module_map\nimport E2_page\nimport db.etwo\nimport os.path\nimport logging\nimport matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt\nimport matplotlib.pyplot", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "               \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n            AssertParseError(\n                \"1:1: Message type \\\"proto", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic Object set(Object key, Object value) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfinal Object old = readElementByIndex( key );\n\t\t\tif ( old !=", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member buying an item\n\t\t/// </summary>\n\t\t///", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       if modified_attendance.check_in:\n            action_message['check_in'] = True\n        elif modified_attendance.check_out:\n            action_message['check_out'] = True\n        else:\n            action_message['check_in'] = False\n", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow row = null;\n\t\tif (orderInvestigationLiteVo.getInvestigationIsNotNull() && orderInvestigationLiteVo.getInvestigation().getInvestigationIndexIsNotNull())\n\t\t{\n\t\t\t", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The index of this item", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       if cwd is None:\n            cwd = maker.get_cwd()\n        if profile is None:\n            profile = maker.get_profile()\n        if cwd is None:\n            cwd = maker.get_cwd()\n        if profile is", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( \"_\"+Guid.NewGuid().ToString( \"N\" ), managedType, marshalAttribute, arraySize ) );\n                }\n                else {\n                    throw new UnknowTypeNameException( typeFragment );\n                }\n           ", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base_type != null && base_type.IsValueType;\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsGeneric {\n\t\t\tget {\nNext line of code:\n\t\t\t\treturn base_type != null && base_type", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n        #region private\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"modelId\"></param>\n        /// <", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.protocol = protocol\n        self.cipher_list = None\n        self.verify_mode = None\n        self.verify_depth = None\n        self.session_cache = None\n        self.session_timeout = None\n        self.session_retry = None\n       ", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label8 = new global::Gtk.Label ();\n\t\t\tthis.label8.Name = \"label8\";\n\t\t\tthis.label8.LabelProp = global::Mono.Unix.Catalog.GetString (\"_White Spaces:\");\n", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "               notebooks[\"board\"].page_num(key2gmwidg[child].boardvbox) = new_num\n                headbook.set_tab_reorderable(notebooks[\"board\"].page_num(key2gmwidg[child].boardvbox),", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_1),\n    \"Move-Tab-to-left-reverse\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_2", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"MutablePersistenceUnitInfo [persistenceUnitName=\" + this.persistenceUnitName + \", persistenceProviderClassName=\" + this.persistenceProviderClassName + \", transactionType=\" + this.transactionType + \", jtaDataSource=\" + this.jtaDataSource + \", nonJtaDataSource=\" + this", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n  }\n  \n  public boolean isSelected()\n  {\n    return isSelected;\n  }\n  \n  public boolean isFocus()\n  {\n    return hasFocus;\n  }\n  \n  public boolean isFocusable()\n  {\n   ", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(802, 65);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(75", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       if (sb != null)\n        {\n            return sb.toString();\n        }\n        return string;\n    }\n}\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\t// Test with a key shorter than the length of the HMAC output.\n\t", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(m_d) {\n\t        case option_1:\n\t            current_align += CDRSerializer.alignment(current_align, 4); // I32 type\n\t            current_sum += CDRSerializer.alignment(current_align, 4);", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      else\n        return java.GetValue(null) as String;\n    }\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {\n      if (javaHome == null)\n        javaHome = GetJavaHome(resin", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               if job is not None:\n                    if l.strip() == job:\n                        return [l, None]\n                else:\n                    return [l, None]\n            elif re.match(r'%s' % job, l):\n                return [l, None", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           double[] rankCounts = pepLenRankCounts.get(peptideLength);\n            double[] rankCounts = pepLenRankCounts.get(peptideLength);\n            double[] rankCounts = pepLenRankCounts.get(pe", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertTrue(neighbors.contains(1));\n        assertTrue(neighbors", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "\n\nA:\n\nThe code is trying to read the file, but it's not finding it.\nYou're probably running the script from the directory where the file is, but the script is looking for the file in the directory where it's running.\nYou can fix this by changing the", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 163);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               return false;\n            } else {\n                return false;\n            }\n        }\n    }\n    private boolean isReturnAllTypes() {\n        return returnAllTypes;\n    }\n    private void setReturnAllTypes(boolean returnAllTypes) {\n        this.returnAll", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate', 'manager_id': False})\n    def holidays_validate_notificate(self, cr", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets and sets the delegate that checks whether the user wants to delete selected rows\n        /// </summary>\n        public CheckUserConfirmsDeletion CheckUserConfirmsDeletionDelegate", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return mixerLine.szName;\n        }\n        /// <summary>\n        /// Gets the specified source\n        /// </summary>\n        public MixerLine GetSource(int sourceIndex) \n        {\n            if(sourceIndex < 0 || sourceIndex >= SourceCount", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tif (valueObject.getCareContext() instanceof HibernateProxy) // If the proxy is set, there is no need to lazy load, the proxy knows the id already. \n\t\t\t{\n\t\t\t\tHibernateProxy p = (HibernateProxy) valueObject.get", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           [\"cargo\", \"build\",\n             \"-f\", \"release\",\n             \"-p\", \"servo\",\n             \"-v\",\n             \"-C\", \"servo\",\n             \"-C\", \"servo-test\",\n             \"-C\", \"servo-bench\",\n            ", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\treturn Math.max(this.getScore(new double[] { p, estP }, true), this.getScore(new double[] { 0, estN }, false));\n\t\t}\n\t}\n\t/**\n", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               var indexItems = gitItemStatuses.Where(item => item.Staged == StagedStatus.Index).ToList();\n                var workTreeItems = gitItemStatuses.Where(item => item.Staged != StagedStatus.Index).ToList();\n                Stashed.SetStash", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm1_index).out_address != 0\n    assert lattice.cbuffer.get_object(bm2_index).out_address != 0\n    assert job.total_num_assign_items == 3\n    assert job", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (o == this) {\n            return true;\n        }\n        if (!(o instanceof AuthScope)) {\n            return false;\n        }\n        final AuthScope scope = (AuthScope) o;\n        if (LangUtils.equals(this.host, scope.", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n    //\n", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic String getCSeriennrChargennr() {\n\t\treturn cSeriennrChargennr;\n\t}\n\tpublic void setCSeriennrCh", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \nNext line of code:\n\t\t\t\t\tE", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "   log.msg('cryptostasis', 'Verbosity level: {}'.format(args.verbosity))\n    log.msg('cryptostasis', 'Verbosity level: {}'.format(args.verbosity))\n    log.msg('cryptostasis',", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "   self.mosi_bits = mosi\n    self.cmd_token_bits = miso\n    # Check for command tokens.\n    if ptype == 'DATA':\n        if len(self.cmd_token) == 0:\n            self.cmd_token = []\n", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "         if (cursor >= limit) {\n            break lab1;\n          }\n          cursor++;\n        } while (false);\n        return false;\n      case 2:\n        // (, line 203\n        // literal, line 204\n        if (!(", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               if (cls != null) {\n                    o = cls.newInstance();\n                    if (o instanceof SpyPlugin) {\n                        ((SpyPlugin) o).getAction(jdp, cd).actionPerformed(null);\n                    }\n                }\n               ", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "               return result\n        return None\n    def _get_key_usage(self):\n        try:\n            key_usage = self.cert.get_key_usage()\n            key_usage_names = dict(\n                digital_signature='Digital Signature',\n                content_", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tif (s.find (i->first) != s.end ()) {\n\t\t\t\t\tstill_there = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!still_there) {\n\t\t\t\t/* This", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   # The first value is the first word of the interval.\n    # The second value is the second word of the interval.\n    # The first word is the same as the second word, if the interval is\n    # contigous.\n    # The second word is the same as the first", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tif (t.pos > la.pos)\n\t\t\t sym.attrPos = new Position(la.pos, t.pos, la.col);\n\t\t} else SynErr(47);\n\t}\n\tvoid SimSet(out CharSet s) {\n", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc['__import_module'] = 'purchase'\n            edi_doc['product_id'] = line.product_id.id\n            edi_doc['product_uom'] = line.product_uom.id\n            edi_doc['product", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS + \"s\");\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\",", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testHasPermission_virtualNode() throws Exception\n    {\n        //", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "       subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))\n        for device in devices:\n            assert device.subsystem == 'input'\n            assert device.asbool('ID_INPUT_MOUSE')\n            assert device.sys_", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   device = Device(deviceToken)\n    user = User(device, loginId, password)\n    user.login()\n    user.mainmenu()\n    user.endTutorial()\n    user.cardUpdate()\n    user.cardCategoryUpdate()\n    user.cardCombo", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "   elif (index_elements[0] == \"Fit:\"):\n        if (index_elements[1] == \"Coeff:\"):\n            for j in xrange(1, len(index_elements)):\n                try:\n                    rv['fitScatter'].append(", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           if (m_Keys.Count > 0)\n                ItemID = m_Keys[0].ItemID;\n            else\n                ItemID = 0;\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (String device : devices){\n            // DRS 20181025 - Added 1 - Check if device is live\n            if (liveModelMap.get(device) == 1){\n                // DRS 20181025 - Added", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new AttributesMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS) {", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length != 4) {\n        throw new IOException(\"Invalid RegexNER mapping line: \" + line);\n      }\n      String regex = split[1];\n      String type = split[2];\n      Set<String> overwritableTypes = Generics.newHash", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           if os.path.exists(os.path.join(sub_path, n)):\n                return n\n        # try to find it in the search path\n        for p in path:\n            if os.path.exists(os.path.join(sub_path, p)):\n", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "   @property\n    def description(self):\n        if self.want.description != self.have.description:\n            raise F5ModuleError(\n                \"The description of the monitor cannot be changed\"\n            )\n    @property\n    def security(self):\n        if self", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   @property\n    def is_displayed(self):\n        return (\n            self.in_explorer and\n            self.title.text == 'Add Automate Method' and\n            self.datastore.is_opened and\n            check_tree_path(\n               ", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           notifyListeners(new EventObject(this), EventStatusType.INFORMATION,\n                    getClass().toString() + \", getClassByName(), \"\n                    + \"class (\" + className + \") instantiated.\", null);\n        }\n        return result;\n    }\n", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n        self._test", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           return embedManifestDllAction(target[0], source[0], env)\n    return 0\ndef embedManifestExeCheck(target, source, env):\n    \"\"\"Function run by embedManifestExeCheckAction to check for existence of manifest\n    and other conditions,", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           execute(getSelectedResources(), new SubProgressMonitor(new ProgressMonitorJobsDialog(shell), 1000));\n        } catch (CoreException e) {\n            errorStatus[0] = e.getStatus();\n        }\n        if (errorStatus[0]", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tif (super.init(smi, sdi))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif (getInputRowMeta().getSize()<meta.getFieldName().length)\n\t\t{\n\t\t\tlogError", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   assert f('+5..', last) == (d(2014,1,30, 22,21), now)\n    assert f('-5..', last) == (d(2014,1,31, 19,47", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            //WalkingRange\n            string swalkingrange = swalkingrange;\n            if (swalkingrange.Contains(\"s\")", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\"Guest doesn't support suspend.\")\n    @error_context.context_aware\n    def verify_guest_", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       rc.get();\n        service.shutdown();\n    }\n    @Test\n    public void testUnsubscribeIssue5542() throws Exception\n    {\n        final int port = Utils.findOpenPort();\n        final ExecutorService service = Executors", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().onSend", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\treturn (uint)((value >> 24) | 0x80) + (uint)((value >> 16) | 0x40) + (uint)((value >> 8) | 0x20) + (uint)((value >> ", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "   def execute(self):\n        \"\"\" Extract copied files to current directory \"\"\"\n        copied_files = tuple(self.fm.env.copy)\n        if not copied_files:\n            return\n        def refresh(_):\n            cwd = self.fm.env.get_directory", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\tpublic void CreateInstance_StringString_Null ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, null);\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.Id", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       locale = Locale.objects.get(code='fr')\n        repo = self._setup(da, Action.ACCEPTED, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 3)\n        avs = AppVersion.objects", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "               userstate.texture = cmd.parameters[\"texture\"]\n            if \"voice_target\" in cmd.parameters:\n                userstate.voice_target = cmd.parameters[\"voice_target\"]\n            if \"voice_target_id\" in cmd.parameters:\n                userstate.", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new PlayerGroupLeaderChangedEvent(group, player));\n        }\n    }\n    public static void changeLeader(Player player, Player newLead", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "       if formatter is None:\n            formatter = Formats.get(conf.UI.formatter)\n        if outfile is None:\n            outfile = StringIO()\n        if formatter is not None:\n            formatter = formatter(**params)\n        if form", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2))\n        column.quantity_renderer.set", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t} while (parent != null && !parent.getTagName().equalsIgnoreCase(\"cfgrid\"));\n\treturn EVAL_BODY_INCLUDE;\n    }\n    @Override\n    public int doEndTag() throws PageException {\n\treturn EVAL_PAGE;", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                Dialog = new DialogEntry();\n                Dialog.LoadXML(element.SelectSingleNode(\"Dialog\").ChildNodes[0], version);\n            } catch (Exception ex) {\n                throw new Exception(\"CreatureEntry.", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                   else if (m_Peerless == PeerlessList.MelisandeTrammel || m_Peerless == PeerlessList.MelisandeFelucca)\n                    {\n                        m_key[i] = new MelisandeActivation", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(((ims.careuk.vo.beans.ChangeOfServiceVoBean)beans[x]).buildVo());\n\t\t}\n\t\treturn", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           new Version(1, new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pb = kdf.ComputeKey(pbMsg, p);\n\t\t\tif(!MemUtil.ArraysEqual(pb, pbExpc))\n\t\t\t\tthrow new SecurityException(\"Argon2-1\");\n\t\t\t// ==================================", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (int) (requestManaExact(stack, player, cost, remove) / multiplier);\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory. Note that this method\n\t * does not automatically remove mana from", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" but Lights has {1}\"));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Adds a frame to", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.number = p.readString();\n            dc.callerId = p.readString();\n            dc.callerIdType = p.readInt();\n            dc.callerIdNumber = p.readString();\n            dc.callerIdType", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isDomainData()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.get", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                newVertices[y * xSizeP + x] = new Vector3(x * xPixelsPerTile, y * yPixelsPerTile, 0);\n               ", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\n\t\t\t\n\t\t\trawResult = client.call(API_METHOD_ADD, new Object[]{testInt1, testInt2});\n\t\t\t\n\t\t\tif (rawResult", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpublic boolean isBlockSelectionEnabled()\n\t\t\t{\n\t\t\t\t", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"Object not found\");\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeObject(found.object);\n        }\n        out.flush();\n        out.close();\n        in", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                       16 + (~stactics_display_buffer.read(i) & 0x0f),\n                        16,\n                        0, 0,\n                        pixel_x, pixel_y,\n                        Machine.visible_area, TRANSPAR", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                       .Distance(position.To2D()) <= spell.Range + spell.Width + target.BoundingRadius - 40)\n                                {\n                                    result.Add(minion);\n                                }\n                                break;\n                            }\n                            break;", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       List<Node> path = new LinkedList<>();\n        path.add(x);\n        for (Node b : graph.getAdjacentNodes(y)) {\n            if (b.getNodeType() == NodeType.MEASURED) {\n                path.add(b", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   plcs.Push(pop[i]);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descendants of this element.\n        /// </summary>\n        /// <param name=\"", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.attachmentFile == null) {\n            if (other.attachmentFile != null) {\n                return false;\n            }\n        } else if (!this.attachmentFile.matches(other.attachmentFile)) {\n            return false;\n        }\n       ", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (mobiles[i].CanBeHarmful(from, false))\n                        {\n                            m_Item.DoHarmful(mobiles[i]);\n                            AOS.Damage(mobiles[i], m_Item, GetD", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(user, msg);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual bool Kick(PlayerMobile user, bool message = true)\n\t\t{\n\t\t\tif (!IsUser(user))\n\t\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public List<ComponentInstLight> getAvailComponentInstLights(String userId, String componentName,\n          String sComponentId) {\n    return mock", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog1 = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog1.show", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "       this.m();\n    }\n    public void a(EnumProtocol enumprotocol) {\n        this.channel.attr(NetworkManager.c).set(enumprotocol);\n        this.channel.config().setAutoRead(true);\n        NetworkManager.g.debug(\"Enabled auto read", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "           z_arr[p_index, kk] = z_dict[z_key][per]\n            z_err_arr[p_index, kk] = z_dict[z_key][per]\n            t_arr[p_index, kk] = t", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    } else {\n      String name = recipients.get(0).toShortString();\n      String pluralized = context.getString(resourceTwo, name);\n      for (int i = 1; i < recipients.size", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = \"%s:%s\" % (env[\"PATH\"], \":\" + \" \".join(extra_path))\n        if hosts_file_path:\n            env[\"HOSTS_FILE\"] = hosts_file_path\n        if gonk:\n            env[\"GON", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in iteritems(type_paths):\n                for test in tests:\n                    tests.add(test.to_json())\n                tests.add(test)\n                source_files[path] = test_cls(tests)\n        for path, test in iter", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compiledScript != null) {\n            compiledScript.remove();\n        }\n    }\n    private CompileTimeStrategy compileTimeStrategy;\n    private ScriptClassLoader scriptClassLoader;\n    private CompilerConfiguration createCompilerConfiguration() {\n        return new CompilerConfiguration();\n    }", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     for i in range(energy.size):\n        Etf = energy[i]\n        grad_Etf = grad[i].flatten()\n        grad_E = Etf*grad_var+energy_var*grad_Etf+grad_means\n        grad_E", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (obj == this)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t\tif (obj != null && obj.getClass() != this.getClass())\n\t\t{\n\t\t\treturn this.getClass().getName().compareTo(obj", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.size(), 2);\n        assertTrue(found.containsAll(asList(stacks[0], stacks[2]));\n    }\n    @Test(expectedExceptions = NotFoundException.class)\n    public void shouldThrowNotFoundExceptionWhenSearching", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter parameter = new ParameterImpl();\n        parameter.setParameterFamily(pf);\n        parameter.setParameterName(\"depth\");\n        parameter.setParameterValue(depth);\n        parameter.setParameterType(ParameterType.INTEGER);\n        parameter.setParameterValueType(ParameterValue", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tswitch (kind) {\n\t\t\tcase LNodeKind.Expr:\n\t\t\t\tif (pattern.Kind == LNodeKind.Expr) {\n\t\t\t\t\tif (MatchesPattern(candidate, pattern.Expr, ref captures, out unmatch", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   foreach (Vector2 colision in colisionList)\n                    {\n                        if (colision.X < shadow.Position.X)\n                        {\n                            extendedFarmLocation = objAiBase.Position;\n                            break;\n                        }\n                   ", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tcontextMenus = new ims.framework.ContextMenus();\n\t\tcontextMenus.initialize(form.getFormInfo(), startControlID, context, loader, form.getFormContext());\n\t\tcontextMenus.contextMenu1().setVisible(false);\n\t\t", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   for line in frozen_output.split(\"\\n\"):\n        if re.search(pattern, line):\n            return True\n    return False\n", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'subs': [(6, 0, False)]\n        })\n        f = Form(r)\n        with f.subs.new() as sub:\n            sub.value = 5\n        with self.assertRaises(AssertionError):\n            f.sub", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert simplify(Sum(x, (x, 1, 2))) == Sum(x, (x, 1, 2))\n    assert simplify(Sum(x, (x, 1, 2), (x, 1, 3))) == Sum(x, (", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this._notifyAction = action;\n                this._newItemList = (changedItems == null) ? null : ArrayList.ReadOnly(changedItems);\n                this._newStartingIndex = startingIndex;\n            }\n            else\n            {\n                this._notifyAction = action;\n", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           streamWriter.close();\n            writer.close();\n            int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            InputStream is = new ByteArrayInputStream(writer.toString().getBytes());\n            Document testDocument = parser.parse(", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                case Param.OrgType:\n                    c.OrgType = Token2Csv();\n                    break;\n                case Param.OrgType3:\n                    c.OrgType", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "ide.imageOffset = reader.ReadUInt32 ();\nConsole.WriteLine (\"Entry: {0}\", i);\nNext line of code:\nide.imageOffset = reader.ReadUInt32 ();\nConsole.WriteLine (\"Entry: {0}\", i);\nNext line of code:\n", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               JSR.successors = JSR;\n                JSR.successors.next = null;\n            }\n            if (l.status & Label.REACHABLE) {\n                l.status &= ~Label.REACHABLE;\n                l.status |= Label.", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\tlblLabelPosition.setText(\"Label Position: \" + position.toString());\n\t\tcomboLabelPosition.select(position.toString());\n\t\t}\n\t\t\n\t\tprivate boolean getPosition() {return comboLabelPosition.getSelection();}\n\t\tprivate void setPosition", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\",currImageValue\n        self.assertEqual( int(currImageValue), int(lastImage", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       K = pow(self.f, self.x, self.p)\n        # okay, build up the hash H of\n        # (V_C || V_S || I_C || I_S || K_S || min || n || max || p || g || e ||", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           DefaultMutableTreeNode node =\n                    new DatabaseNode(this.handler, connectionData, overallNodeName, disableTreeSelection);\n            treeModel.insertNodeInto(node, null, 0);\n        }\n    }\n    /**\n     * Sets the node.\n", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                          (self.employee_id, from_date, to_date, code))\n                res = self.cr.fetchone()\n                return res or 0.0\n        class SalaryBase(BrowsableObject):\n\"\"\"            \"\"\"a class that will be used into the", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       mf.append(cosmo.MassFunction(rcrit, zi))\n        dlnmdlnm.append(cosmo.dlnm(rcrit, zi))\n    #Need to give mass * h and get the sigma without little h\n    #The", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = font.getSize() * 10;\n        d.height = font.getSize() * 10;\n        return d;\n    }\n    \n    @Override\n    public Dimension getPreferredSize() {\n        Dimension d = new Dim", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "for i in range(1,18):\n    self.container[i]=self.cal_point_in_fit(self.r,theta_res,phi)\n    if print_path:\n        print self.container[i]\n\n\n\n\n\n\n\n\n\n", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Visibility = window.Visibility == Visibility.Visible ? Visibility.Hidden : Visibility.Visible;\n\t\t}\n\t\tprivate void OrdersWindow_Closed(object sender, EventArgs e)\n\t\t{\n\t\t\t_ordersWindow.DeleteHideable", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "                   for n in xrange(params[0]['nbins'])]\n            if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                    / float(params[1]['nbins'])\n                params", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           protocol.getStorage().updateFirstServerMsgId(contact);\n        }\n    }\n    public void query(XmppConnection connection, Contact contact, long start, long end) {\n        Query query = new Query(connection.getXmpp().getUserId(), contact.get", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "       if channel == \"I\":\n            im1L = im1.convert(\"L\", rgb2I)\n            h1 = im1L.histogram()\n        else:\n            im1L = im1.convert(\"L\", rgb2r)\n            h1", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tfor (int i = 0; i < MAX_LOG; i++) {\n\t\t\t\tret.add(new byte[0]);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected void parseLog24(Application app,", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   return Parser(self, self.createFields, self.createDescription)\n", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tsocketAdapter.dispose();\n\t}\n\t/**\n\t * This method is called when the underlying socket is closed.\n\t */\n\t@Override\n\tpublic void socketClosed() {\n\t\tsetConnected(false);\n\t\tcleanEngine();\n\t}\n\t", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "   def __call__(self, environ, start_response):\n        \"\"\"Process incoming WSGI request.\n        Ref: :pep:`3333`\n        Args:\n            environ (Mapping): a dict containing WSGI environment variables\n            start_response (callable):", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tmodelfile = sys.argv[ 1 ]\n\t\tdataobj = Data( sys.argv[ 2 ] , sys.argv[ 3 ] )\n\t\tmodel = Model( dataobj , modelfile )\n\t\tmodel.setnetwork( model.network , model", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(chance) < 1)\n                res = EnhanceResult.Failure;\n        }\n        public static EnhanceResult Invoke(Mobile from, CraftSystem craftSystem, BaseTool tool, Item item, CraftResource resource, Type resType", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           if displayname is None:\n                displayname = entry_name\n            if desc is None:\n                desc = entry_name\n            if entry_value is None:\n                entry_value = entry_name\n            if entry_value < 0:\n                self.msg.error", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"Fatal Error:\\nUnable to locate coniguration file for FOG Service!\");\n                    this.Close();\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Fatal Error:\\nUnable to locate coniguration file", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               return (bool)this.ViewState[\"SubmitText\"];\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// True to submit value of selected items\n        /// </summary>\n", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(this.trianglesUsed[textureHash] <= 0)\n                    continue;\n                if(!this.textureArray[textureHash].getImage().isSelected())\n                {\n                    this.textureArray[textureHash].getImage().selectTexture", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   if not exposedHeaders:\n        exposedHeaders = []\n    exposedHeaders.append(header)\n    response['Access-Control-Expose-Headers'] = exposedHeaders\n    return response\ndef ensure_valid_course_id(view_func):\n    \"\"\"\n    This decorator should", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.IdleSince.AddMinutes(1) > now)\n                        oldDrivers.Add(d);\n                }\n            }\n            return oldDrivers;\n        }\n        /// <", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "       var = [var]\n    return var\ndef _verify_list(name, var, list_name, input_list):\n    \"\"\"Verify that parameter is list-like.\n    Used to let resolution and radius be single numbers if their elements are equal.\n    \"\"\"\n   ", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.setInitialState(STARTED)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tempty = string.Concat(new string[] { \"[\", num.ToString(\"D2\"), \":\", num1.ToString(\"D2\"), \":\", seconds.Value.ToString(), \"]\" });\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           VertexDataStride = 0;\n            VertexDataSize = 0;\n            _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Program = ", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "   def _trimmed(self):\n        return self._trimmed\n    def _trimmed_genes(self):\n        return self._trimmed_genes\n    def _trimmed_reactions(self):\n        return self._trimmed_reactions\n    def _trim", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(int x = 0; x < beans.size(); x++)\n\t\t{\n\t\t\tcoll.add((TumourGroupListVo)beans.get(x));\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static Tum", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcx = lines[selectedLine].getCenterX();\n\t\t\t\tright = lines[selectedLine].x+lines[selectedLine].width;\n\t\t\t\tcy = lines[selectedLine].getCenterY();\n\t\t\t\th = lines[selectedLine].", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       new LayoutAnimationController(set, LayoutAnimationController.RELATIVE_TO_SELF, 0.5f);\n        mListView.setLayoutAnimation(controller);\n    }\n    \n    /**\n     * Set the list loading animation.\n     */\n    private void", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.FieldKey = HighestNumber + 1;\n            ARow.SetFieldKey", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tint[] \t\tscoresCons \t= new int[length];\n\t\tint[] \t\tscoresNonCons \t= new int[length];\n\t\tint[] \t\tscoresSignal \t= new int[length];\n\t\tint[] ", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
