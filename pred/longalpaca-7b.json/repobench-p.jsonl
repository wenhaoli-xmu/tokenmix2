{"pred": "\n    private final transient MessageFactory messageFactory;\n\n    private final transient Timer refreshTimer;\n\n    private final transient RouteLengthChecker routeLengthChecker;\n\n    private final transient GetParameter getParameter;\n\n    private final transient StoreOperation storeOperation;\n   ", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       // mParameterListAdapter = new ParameterListAdapter(mSpectaculumView);\n        mParameterListAdapter = new EffectParameterListAdapter(mSaculumView);\n        mParameterListView.setAdapter(mParameterListAdapter);\n\n        // ...\n        // ...\n", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "   cipher = MyFunction()\n    cipher.set_rounds(2)\n    cipher.encryption = Encryption(MyFunction)\n\n\nExpected output:\n    cipher.encryption.round_keys = [0x000000000", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "\n    public EffectManager(SpectaculumView spectaculumView) {\n        mSpectaculumView = spectaculumView;\n        mImmersiveSensorNavigation = new ImmersiveTouchNavigation(spectaculumView);\n        mParameterListView =", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "           new EventCommandHandler<UpdateFrequencyCommand, UpdateFrequencyChangeEvent>(\n                    UpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n    }\n    }\n}\n\\end{code}\n\nThis is the code for the J", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "   private LocalRateLimiter localRateLimiter;\n    private TaskRunnerConfig taskConfig;\n    private TaskRunner taskRunner;\n    private TaskRunnerLog taskLog;\n    private List<RunnerTaskListener> listenerList = new ArrayList<>();\n\n    private List<CronerTaskListener>", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\t// ...\n\n\t\t\t// ...\n\t\t// ...\n\t\t// ...\n\t// ...\n\n\t\t// ...\n\t// ...\n\t// ...\n\t// ...\n\t// ...\n\t// ...\n\t// ...\n\t// ...\n\t// ...", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           // save deviceId to local storage\n            DatabaseManager.INSTANCE.setDeviceId(deviceId);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return deviceId;\n    }\n}\n\n}\n\\end{code}\nI hope", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   SignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_ENROLL);\n    assertEquals(new SignRequest(SERVER_CHALLENGE_SIGN, SESSION_ID), signRequest);\n\n  }\n\n ", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "\n    def placeOriginate(self, route):\n        # Check that we have necessary route\n        if len(self.routes) > 0 and self.routes[0] == route:\n            # Check that we have necessary radius attributes\n            for key, value in self.global_config", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "   def __init__(self, *args):\n        super(self, *args).__init__()\n\n        self.scheme = 'http'\n        self.host = 'leap.se'\n        self.path = '/'\n\ndef __getattr__(self, name", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "   def convert_ast_constraint(ast_node):\n    # ...\n\n    # ...\n\n    return self.tree\n\n\ndef enable_logging(to_file=None):\n    from ...utils.log import logger\n    logger.set_level(logging.INFO)\n", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               intent.setDataAndType(Uri.parse(url), \"video/x-flv\");\n                activity.startActivity(intent);\n        }\n    }\n\n    private static boolean useInternPlayer(TDActivity activity) {\n        return activity.getPackageManager().hasSystemFeature", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       PostLocationDataBody data = new PostLocationDataBody(AppSettings.sUserLogin, latitude, longitude, AppSettings.sFindPeopleAllowedMessage, AppSettings.sUserEmail, AppSettings.sUserAvatarUrl);\n        OkHttpClient client = new OkHttpClient();", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "       # Check the constraints.\n\n        # pylint: disable=too-many-branches\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-locals\n        # pylint: disable=", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "   engine.bind(user)\n    assert init_called\n\ndef test_save_load_load(engine):\n    \"\"\"Save and load a model\"\"\"\n    user = User(id=\"user_id\", email=\"user@domain.com\")\n    engine.save(user)", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MarbleTransformation(),\n                    new MaskTrans", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "\n    @BindView(R.id.image_poster) ImageView poster;\n    @BindView(R.id.text_title) TextView title;\n    @BindView(R.id.text_runtime) TextView runtime;\n    @BindView(R.id.text", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "               writeResponse(CREATE_MBEAN, correlationId);\n            } catch (InstanceNotFoundException e) {\n                writeResponse(e, CREATE_MBEAN, correlationId);\n                log.tracef(\"CreateMBean - Failure Response Sent\", correlationId);\n            } catch (", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "\n    async def wild_embed(self, ctx):\n        return (WildEmbed.from_wild_report(ctx, wild).embed)\n\n\nPlease help me with the code, I'm new to Discord bot development and I'm not sure what to do.", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "\n    def get_embeddings_lookups(self):\n        return [self._lookup]\n\n    def get_def_embeddings_lookups(self):\n        return [self._def_reader._def_lookup]\n\n    def set_def_embeddings", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "\nassert isinstance(doppler, DopplerSine)\n\ndef test_params_amplitude_zero():\n  '''\n  Zero amplitude test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv', '1',", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "\n            }\n        }\n    }\n}\n\\end{code}\n\nThis is a sample code from a project of a chat application, the SearchLiveo class is the class that manages the search functionality.\n\nThe SearchLiveo class has the following methods:\n\n• show()", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "   def test_release(self):\n        assert not self.redis.exists(self.redlock.key)\n        assert not self.redlock.locked()\n        self.redlock.release()\n        assert self.redis.exists(self.redlock.key)\n", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "       cone_settings = ConeSettings(self, \"threed\")\n        return cone_settings\n    @threed_cone_settings.setter\ndef set_threed_cone_settings(self, inside_angle, outside_angle, outside_volume):\n", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "   def compress(self, data):\n        if self is CompressionAlgorithm.Uncompressed:\n            return data\n\n        if self is CompressionAlgorithm.ZIP:\n            return zlib.compress(data)[2:-4]\n\n        if self is CompressionAlg", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "       cellSize = detectCellSize(imgshape, detectCellShapeParameter = detectCellShapeParameter, findCellSizeParameter = findCellSizeParameter, verbose = verbose, out = out, **parameter);\n    \n    #cell intensity\n    findCellIntensityParameter = getParameter(detectSp", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "           Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 20f);\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play(GlobalConfiguration.feedbackVolume / ", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "   while (transactionIterator.hasNext()) {\n        printer.print(transactionIterator.next());\n    }\n    }\n\\end{code}\n\n}\n\nI have a few questions about this code:\n\n1. What is the purpose of the `PropertiesReader` class? It", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "           }\n        }\n        return pgm;\n    }\n\n    public void executeProgram(Program<BaseStatementMeta> program) throws Exception {\n        for (BaseStatementMeta stmnt : program.getAllStmnts()) {\n            if (stmnt instanceof QueryMeta", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "\n# ...\n\n\nI have a FinTS message that contains a segment with a HNSHA2 segment, a HNVSD1 segment and a HNSHK4 segment. I want to extract the HNVSK3 segment from the message.\n\n\nHowever, when I use the", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                           // check,  0: no check\n                            // check, *: 1\n                            // check, +: 2\n                            // check, ?:3\n                            // check, *?:4\n                            // check, +?:5\n                            // check, *", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "\ndef get_pipeline_job_template(request):\n    context = Context(\n        {'META': request.META,\n        'package': request.GET.get('package')\n    )\n    template_string = \"\"\"\n    {% load tag_pipeline_job_", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\n\t\tpublic void updateData(Meter meter) {\n\t\t\tthis.meter = meter;\n\t\tthis.tags = meter.getTags();\n\t\tthis.colors = meter.getColors();\n\t\tthis.notEnoughData = meter.getNot", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "       self.set_db_type(storage_type)\n        return self\n\n    def close(self):\n        self._orientSocket.close()\n\n    @staticmethod\n    def _encode_field(field):\n        # tuple with type\n        t, v = field\n", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   private class GivenTwoArgumentsWhenSteps<$SystemUnderTest, $Argument> implements AndGivenTwoArguments<$SystemUnderTest, $Argument, $Argument2> {\n    private final Preparation<$SystemUnderTest> preparation;\n\n    GivenTwoArgumentsWhenSteps(", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "   // Double-checked locking to compute the result at most once.\n    if (process == null) {\n      synchronized (this) {\n        if (process == null) {\n          int exitCode = process.await();\n          // The process has ended, so there is no need", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\t//TODO: implement this\n\t}\n}\n}\n\npublic void setSections() {\n\t//TODO: implement this\n}\n\npublic void setIconSize(int size) {\n\t//TODO: implement this\n}\n\npublic void setTextSize(", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\tRobotResponse resp = robot.talk(null, xml);\n\treturn resp.text;\n}\n\n}\n\n\n\n", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   if os.path.exists(os.path.join(dynamic_path, 'dynamic_info/'):\n        print 'Dynamic analysis already run'\n        return\n    else:\n        # Run the APK\n        subprocess.call([adb,\n                     \"-s\",\n", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "   async def cmd_raid_city(self, ctx, *city_title):\n        \"\"\"\n        **!rail-city channel-name** - creates a raid city channel.\n\n        **Organizer commands:**\n        **!add pokemon-or-egg gym", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertEqual(date_string_to_date(\"25/1/2015\"), datetime.datetime(2015, 1, 2, 15, 10, 3))\n        self.assertEqual(date_string_to_date", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       configuration_actor = ConfigActor(config_file, 'test_data')\n        configuration_actor.start()\n\n        if honeypot_first:\n            configuration_actor.send('{0} {1}'.format(Messages.SET_CONFIG_ITEM.value", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           ShareUtil.sharePicture(mActivity, picUrl);\n                    break;\n                        case 1:\n                            ShareUtil.shareText(mActivity, picture.getComment_author());\n                    break;\n                    }\n                })\n                .show();\n\n", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\toutdata = np.column_stack((positive_data,negative_data))\n\t\t\t\t\toutdata = np.column_stack((outdata,-np.log10(1-positive_data)))\n\t\t\t\t\toutdata = np", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "       },\n        providers = {\n                InjectedAndroidTestCase.class,\n                MainActivityTest.class,\n                AuthenticatorTest.class,\n                StreamSyncAdapterTest.class,\n                MainActivityOhmletsTest.class,\n                MainActivity.class,\n                Authentic", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "               PubKeyAlgorithm.ECDH: ECDASignature,\n                PubKeyAlgorithm.ECDSA: ECDASignature,\n                PubKeyAlgorithm.ElGamalEncryptOrSign: ElGamalSignature,\n                PubKeyAlgorithm.El", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "\n\ndef is_schema_node(node):\n    return isinstance(node, (TypedElement, TypedAttribute)\n\ndef is_xpath_node(node):\n    return hasattr(node, 'tag') and not callable(node.tag) and hasattr(node", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "     'no_members': Counter,\n    }\n    _VARZ_METRICS = {}\n    _VARZ_PERCENTILES = [.5, .90, .9, .99, .999]\n    _MAX_AG_AGE", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "       nc._send_message_with_protocol(OK, '1:hello world@')\n        self.assertEqual(protocol.send_string.called_once_with('1:hello world@'))\n\n    def test_receive_message_with_netstring(self):", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       assertEquals(\"query\", qe.getQuery());\n        // end::query[]\n\n        // batch execution\n        StatementBatchExecution se = ds.getBatchStatements().get(0);\n        assertTrue(se.isBatch());\n        assertTrue(\"is statement batch\", se", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "       Assert.assertThat(ds, executions(0, failure());\n        Assert.assertThat(ds, executions(0, is(failure()));\n    }\n\n    @Test\n    public void testBatchSuccess() {\n        StatementBatchExecution se = new StatementBatchExecution", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "```\n```\nThis is a large example of a LoRaWAN network server implementation in Python. It covers various aspects of the LoRaWAN protocol and network configuration, including:\n\n1. Network configuration (e.g. frequency bands, channel frequencies, datarate, etc.)\n", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                   function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                   ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "# IEEE 802.15.4 PHY format\ndef PHY_format(data):\n    # PHY format:\n    # -----------------\n    # 0x00 0x00 0x00 0x00 0", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       // Initialize data\n        chat = DatabaseManager.INSTANCE.getChatDAO().get(AbstractYasmeActivity.CHAT_ID);\n        if (chat == null) {\n            Log.d(this.getClass().getSimpleName(), \"Chat not found in DB", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "   parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\nclass HITANS7(HITANSBase):\n    parameter = DataElementGroupField(type=ParameterPinTan)\n\nclass HITANS8(HITANSBase", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "           jd = self.img_handle.getJD()\n\n            # Convert time to Julian date\n            jd_str = datetime2JD(jd)\n\n            # Add reference time to JSON\n            json_dict['reference_time'] = jd_str\n\n       ", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "   // refresh the list of public rooms\n    if (mPublicRoomsList == null) {\n        refreshOnChunkEnd = true;\n        mPublicRoomsList = null;\n        mExpandedGroups = null;\n        mIsPaused = false;\n        // get the", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "\n    async def get_timezone(self, *, utc_timestamp: float = None):\n        if utc_timestamp:\n            utc_timestamp = float(utc_timestamp)\n        else:\n            utc_timestamp = os.environ.get('TZ')", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "       chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)\n    else:\n        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages)\n\n    #running backend", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new BlockLockerCommand(this), this);", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                   startMiPush();\n                    stopGCM();\n                    Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n        }\n    }\n    }\n\n\n    public boolean shouldInit() {\n        return !TextUtils", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<QueryExp>>(QUERY_EXP);\n        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "\n    public PersonalVulnsWindow() {\n        super();\n        setTitle(\"Personal Vulnerabilities\");\n        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n        setBounds(10000, 5000, ", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "   public void addGCActivity(GCActivity gcActivity) {\n    // ...\n}\n\n}\n\nPlease provide the code for the following methods:\n\n\n1. createBreakdownChartPanelSingle(int, DatasetGenerator, List<GCStatsChartPanel>)\n\n2.", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       // handle packet\n    }\n\n}\n\npublic void onAckRequest(AckRequest ackRequest, NamespaceClient client) {\n    // handle ack request\n}\n\npublic void onDisconnect(SocketIOClient client) {\n    // handle disconnect\n}\n", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "     lMS.addTrack(new VideoTrack(new VideoTrack.Init(lMS.nativeStream));\n      }\n    }\n  }\n\n  // End of regression test.\n}\n}\n\\end{code}\n\nThis code is part of the WebRTC Java API", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "           contentValues.put(JobStorage.COLUMN_LAST_RUN, System.currentTimeMillis());\n            return contentValues;\n        }\n    }\n    }\n}\n\npublic class JobStorageTest extends RobolectricTestRunner {\n\n    private final JobManager", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "   private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.settings);\n\n        // Initialize the preference categories\n        preferenceMenuPosition = find", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "\ndef validate_system(system_instance):\n    # ...\n\n", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "```\n\nThe code is for a Clickable CLI tool that generates Dockerfiles for various programming languages and frameworks. The `ThemeSupport` class is used to configure the Docker theme for the desktop environment. It defines the Dockerfile for the desktop environment.\n\n\nQuestion:\n\nWhat is the purpose of the", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "   List<Board> boards = new ArrayList<>();\n    for (int i = 0; i < SectionNames.length; i++) {\n      String sectionName = SectionNames[i];\n      String sectionUrl = SectionURLs[i];\n      // Load boards from WW\n", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "   }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.search_contact, container, false);\n    return view;\n}\n\n    @Override\n    public", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\tif (writeTML && !defaultTestbaseMethodCreated) {\n\t    generateTestBaseMethods(model, testDataFactories, monitor);\n\t    defaultTestbaseMethodCreated = true;\n\t}\n\tif (writeTML) {\n\t    generateTestMethods(model,", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       self.assertAlmostEqual(self.simulator_data.gps.latitude, self.simulator_data_mock.latitude, 0.01)\n        self.assertAlmostEqual(self.simulator_data.gps.longitude, self.sim", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "           response = httpMessage.getRes().getResponse();\n            showResponse = true;\n        initHighlight();\n        updateUI();\n    }\n    }\n\n    private void showResponse() {\n        if (showResponse) {\n            response = httpMessage.getRes().get", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "   assert compare_tables(SimpleModel, description)\n\n@pytest.mark.parametrize(\"gsi_status\", [\n    (\"ACTIVE\", \"DELETED\", \"CREATING\"),\n    (\"DELETED\", \"ACTIVE\"),\n    (\"CREATED", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "   def load(self, filething, known_frames=None, translate=True, v2_version=4, load_v1=True):\n        ...\n\nclass IffMetadata:\n    def __init__(self, fileobj):\n        self.fileobj = fileobj\n", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitProxOp(new VisitCheckOp4(n), query); // visit the prox operator, not the boosted query \n      return null;\n    }\r\n    visitProxOp(new VisitCheck4(n), query); // visit the prox operator, not the", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EdgeTransformation(),\n                    new EmbossTransformation(),\n                    new HueTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation().setSides(3),\n                    new MirrorTransformation().Gap(.0", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "   api = BMUNITSEARCH(args.apikey)\n\n    if get_check_data(api, {'BMUnit': args.bmunittype}) is False:\n        return None\n\n    fmt = StdoutFormatter(\"15s\", \"^20", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum();\n\t\t\t\titem.setId( proxy.getId() );\n\t\t\titem.setTitle( proxy.getTitle() );\n\t\t\titem.setDescription( proxy.getDescription() );\n\t\t\titem.set", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   dump_key(engine, user)\n    assert dump_key(engine, user) == {\"id\": {\"S\": \"foo\"}\n\n\ndef test_get_table_name():\n    user = User(\"foo\")\nassert get_table_name(user) == \"my-", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "         new TaskName(), new StaticString.CONDITIONAL_WHITESPACE,\n          new Percentage(), new StaticString.WHITESPACE, new StringWrapper.wrap(\"[\", new ProgressBar(50, BAR_EQUALS), \"]", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static Form formFor(Object resource, Object... fields) {\n\treturn new FormFor(resource);\n\t}\n\n\tpublic static <T> T with(T resource, Method getter, Method setter) {\n\treturn new T(resource);\n\t}\n\n\t", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "           event = Event(e)\n            events.append(event)\n        return events\n\n    def get_event(self, event_id):\n        data = self.call_api(\"events/%s\" % event_id)\n        return Event(data)\n\n    def create", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "    * @param parameterMatcher\n     * @return matcher for {@link BatchParameterHolder}\n     */\n    public static Matcher<? super BatchParameterHolder> batch(int index, Matcher<? super ParameterHolder> parameterMatcher) {\n        return BatchParameterHolderAssertions", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           WallpaperApplyTask applyTask = WallpaperApplyTask.prepare(this);\n            applyTask.execute(null);\n        return true;\n        }\n        return super.onClick(view);\n    }\r\n    }\r\n    @Override\n    public void onLongClick(", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "   private static final Map<Operator, Occur> opToOccur = new HashMap<Operator, Occur>();\n    static {\n      opToOccur.put(Operator.AND, Occur.MUST);\n      opToOccur.put(Operator.OR, Occur.SH", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\n\n    #TODO (low) add parameter to compute PD only for new phenotypes or cov\n    metadata['phenotype']=metadata['phenotype']+ list(PHEN.folder._data.get_names())\n\n    b_cov=A_covariates", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "self.beginning_datetime = filenameToDatetime(self.vid_file.name)\n\n\n    def getNextFrame(self):\n        self.current_frame = self.vid_file.tell()\n        self.current_frame_chunk = self.vid_file.", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "   # 3. viewer\n    viewer = OrthoViewer(field=objects, vmin=0, vmax=1, cmap='Greys_r', fourier=False, tooltips=False, size=8)\n\n    viewer.draw()\n   ", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\tfor (FoodGroup foodGroup : FoodGroupRegistry.getFoodGroupsForFood(food))\n\t{\n\t\tPacketDispatcher.get().sendTo(new PacketFoodGroup(foodGroup), player);\n\t}\n}\n\npublic static void clear()", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "   def get_post_url(self):\n        slug = slugify(self.title)\n        return reverse('ploghubapp:view_post', args=[self.id, self.user, slug])\n\nI have a question regarding the code, how can I", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tString selectedCellValue = selectedCells.get(0).getDataValue();\n\t\t\t\t\t\tif (selectedCellValue != null && selectedCellValue.equals(SAnnotation.class)) {\n\t\t\t\t\t\tSAnnotation selectedAnnot = (S", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "   def key_size(self):\n        return self.cipher.key_size\n    def gen_iv(self):\n        return os.urandom(self.block_size // 8)\n    def gen_key(self):\n        return os.urandom(self.", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "   if is_processing_instruction_node(item):\n        yield item\n\n    else:\n        raise self.wrong_nargs(self)\n\n\n@method(function('node', nargs=0, label='kind test')\ndef select_node_kind_test", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "def handlePuffleWalk(client, puffle, sendPacket = True):\n    # ...\n\nQuestion:\nHow do I fix the following error in the code:\n\nTraceback (most recent call last):\nFile \"Timeline/Handlers/Puffle.py\", line", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "\n    return np.zeros((3,3))\n\nIn this code, the `nbody` module defines a `create_configuration` function that takes in an integer `N` and a `tile` parameter to create a configuration for a Brownian hard sphere simulation. The `tile`", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "platepar.rotation_from_horiz = raDec2AltAz(platepar.RA_d, platepar.dec_d, platepar.JD, platepar.lat, platepar.lon)\n\n    # Recompute the reference point in the sky\nplatepar.pos", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLUMN_BACKOFF_MS, 10000L);\n        contentValues.put(JobStorage.COLUMN_END_MS, 12000L);\n        contentValues.put(JobStorage.COLUMN_", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "   }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.chat_settings_remove, container);\n        chatRem = view.findViewById(R.id.chat_", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "       model = Progress\n        fields = ['indicator', 'target', 'sector', 'goal', 'plan']\n\n\nclass AreaTypeFilter(django_filters.FilterSet):\n    name = django_filters.CharFilter(lookup_expr='iexact')\n    class Meta:", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "   }\n\n    @ViewById\n    private View bottomInfo;\n    private ProduceData produceData;\n    private Preferences_ prefs;\n    private CustomerAdapter adapter;\n    private GoogleAnalyticsSender sender;\n    private SearchView searchView;\n    private FloatingActionButton fab", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "           return deferred.setSuccess(value);\n        });\n        return deferred;\n    }\n    }\n\n    @Override\n    public void close() {\n        final Promise<Void> close() {\n        return _channel.close();\n    }\n}\n\npublic", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "           new RegistrationParam(success, email, password, message));\n    }\n}\n\n\n\nIn summary, this code is from the Yasme Android project, which is an Android app for chatting and messaging. It contains various classes and functions for managing users, their profiles, and", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "   private final KState<MatcherCandidate, MatcherTransition, MatcherSample> state;\n\n    private final int k;\n    private final long t;\n    private final Map<C, Double> counters;\n\n\n    public Matcher(int k, long t", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "\n    public DropMenuAdapter(Context context) {\n        this(context, null);\n    }\n\n    public DropMenuAdapter(Context context, AttributeSet attrs) {\n        this(context, attrs);\n    }\n\n    public DropMenuAdapter(Context context, AttributeSet", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": " assert args.gps_sv[0].getMessages() == [ConstMessage()]\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "\nThis is a Python script that parses an SVG file and renders it as a 2D graphics display. It uses the GLSL library to render the graphics.\n\n\nThe script defines a number of classes:\n\n1. `SVGPathBuilder`: A class that reads an", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.equals(\"\")) {\n\t\t\t\t\t// No apps found\n\t\t\t\t} else {\n\t\t\t\t\ta = parseApp(data);\n\t\t\t\tif (a != null) {\n\t\t\t\t\tadd(a", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "\n                // ...\n\n                // add action to guts view\n                if (isPlayNeed2Add) {\n                    // add action to guts view\n                    // need to check if the action is already injected\n                    // otherwise, inject it\n                    // inject the", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       self.gc_beg_phase = greatCircle(self.beg_vect, self.end_vect)\n\n        # Compute altitude of the begining and end points\n        self.gc_beg_alt = self.gc_beg_phase.alt\n        self", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\tMethod m = new Method(s, fhead.ID().getText(), fhead.getHead(), decl.getModifiers());\n\tclassInFile.addMember(m);\n}\n\n@Override\npublic void exitMethodDef(@NotNull MethodDefContext ctx) {\n\tsuper.", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "\n    // These methods are called recursively for each child node in the tree.\n    // They are used to perform the actual traversal of the tree.\n    void traverse(Node node);\n}\n\nThe code is a Java implementation of an AST (Abstract Syntax Tree) for a CSS/", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "\n    public OpenAPIProcessor() {\n        super();\n    }\n\n    @Override\n    public synchronized void init(ProcessingEnvironment env) {\n        super.init(env);\n        this.typeUtils = env.getTypeUtils();\n        this.elementUtils = env.", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "       bind(GerritCheckoutProvider.class).toProvider(new GerritCheckoutProvider());\n\n    }\n}\n\n\nThe above code is a copy of the Gerrit module from the Gerrit plugin. It contains the following:\n\n1. It defines a Supplier for the", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                   if (snapshots.get(i).getName().contentEquals(snapFile.getName())) {\r\n                    break; //found it!  break out of loop!\n                    i--;\n                }\r\n            }\r\n            }\r\n            if (snapFile == null", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "       return [e for e in entries if (query_matches(e) or e.type == AccountType.Income or e.type == AccountType.Expense)]\n\ndef query_matches(entry):\n    return any(query in e.description or query in e.payee or", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "   # define some basic list facilities for managing layers into the Block:\n    def __iter__(self):\n        if 'layerList' in self.__dict__.keys():\n            return self.__dict__.get('layerList').__iter__()\n        else: return []\n\n    def __", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\t// Clear any existing search suggestions\n\t\t\t\t\tsearchSuggestionsAdaper.clear();\n\t\t\t\t\t// Show search box with empty text\n\t\t\t\t\tsearchList.setVisibility(View.VISIBLE);\n\t\t\t\t}", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "   # 2. coverslip\n    s = 0.5 * np.random.randn(POS.shape[0]) + 0.5  # 0.5 +- 0.5 px coverslip\n    # ...\n    # 3. image\n    #", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "       result, index = apply_fast_and(left.values, right.values, left.index, right.index)\n        return Column(result, index)\n    else:\n        return Column(operator.and(left.values, right), left.index)\n\ndef apply_", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);//TODO fix null pointer exception hereRequest.getPackageName());//TODO fix null pointer exception hereIcon = IconsHelper.getIcon(request.getPackageName());//TODO fix null pointer exception herestringBuilder", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "       isinstance(instance, (int, float, Decimal, AbstractDateTime, Duration) and not isinstance(instance, bool))\n\n\nclass ArithmeticProxy(ArithmeticTypeMeta):\n    \"\"\"Proxy for arithmetic types.\"\"\"\n\n    def __new__(cls, *args: float", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "           return SearchMenuPage(self.searchHistory)\n\n\n\n\n\n\n\n\ndef _createSearchHistory(context):\n    searchHistory = SearchHistory()\n    searchHistory.searchHistory = context.searchHistory\n    return SearchHistory\n\n\n\n\n\n\n\ndef _create", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "               if not checkFileExistence(pattern.file):\n                    errmsg += pattern.file + \" does not exist.\"\n            # 2.2 data file existence\n            if not checkFileExistence(pattern.file):\n                errmsg += pattern.file + \" does not exist.\"", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "   serializer_class = PlanSerializer\n\n    filter_class = PlanFilter\n    ordering_fields = ['code', 'name', 'plan_id']\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "   // ...\n}\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        pull.setPullToRefreshListener(new PullToRefreshAttacher(this));\n    pull.setOnRefreshCompleteListener(new PullToRefreshComplete", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tFile inputFile = new File(\"src/test/resources/input.doc\");\n\t\n\tFile generatedFile = ddi2fo.generate(inputFile, basePathDDI2FO, \"survey\");\n\t\n}\n\n\n\nThe code above defines a test class called", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       // Register the user\n                        new UserLoginTask(this).execute();\n                    }\n                });\n        // Cancel button to cancel\n        alert.setNegativeButton(R.string.cancel,\n                new DialogInterface.OnClickListener() {\n                    public void onClick", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "   url(r'^$', PackageSettingsView.as_view(), name=\"package-settings\"),\n    url(r'^new$', staff_member_required(AddPackageCIPipeline.as_view()), login_url=LOGIN_URL),\n    url(r'^", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, TwoBitsEncoder)\n  assert isinstance(encoder.l1Index, BandBitEncoder)\n  assert isinstance(encoder.l2Index,", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "   return tgAsDict.get(\"_time\", [])\n\ndef getTier(tg, index):\n    return tg.get_tier(index)\n\ndef getIntervals(tg, start, end):\n    return tg.get_intervals(", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "\n    for num_utterances in function.run():\n        pbar.update(num_utterances)\n        if stopped.stop_check():\n            continue\n        except Empty:\n            for proc in procs:\n                if not proc.finished.stop_check():\n", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "           dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def _check_dataset(self, dataset):\n        # check sequence names\n        seq_names = dataset.seq_names\n        assert len(seq_", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "   void addTag(FixTag tag);\n    void addTag(CharSequence value);\n    void addTag(int value);\n    void addTag(Long value);\n    void addTag(Double value);\n    void addTag(Boolean value);\n    void addTag(String value", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "   yield self.concatenate(self.spike_samples(chunk_key=chunk_idx, name='spike_samples')\n    yield self.features(chunk_key=chunk_idx, name='features')\n    yield self.masks(chunk_key=chunk_", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\t\n\tpublic ExpansionResult expandQuery(FieldOptions fieldOptions, ExpanderOptions expanderOptions, AlvisIRQueryNode queryNode) {\n\t\t//TODO: implement expansion\n\treturn new ExpansionResult();\n\t}\n\n}\n\n}\n\n", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\t\n\tpublic ParameterizedGenerationService(PipelineGenerator pipelineGenerator, ValorizatorParameters valorizatorParameters) {\n\tthis.pipelineGenerator = pipelineGenerator;\n\tthis.valorizatorParameters = valorizatorParameters;\n\t}\n\n\tpublic void generate(File", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (SEND_NOTIFICATION ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n        registry.put((byte) (GET_ATTRIBUTE ^ RESPONSE_MASK), new Marsh", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       viewManager.logWithUrl(id + \"#\" + url, language);\n                        logDb.logWithUrlNonStatic(id+\"#\" + url, lang);\n                        FileSaver fileSaver = new FileSaver(content, lang, source, url);\n                ", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "```\n\nThe `FixedReplicationNode` class seems to be a placeholder for a node that represents a replication descriptor with a fixed number of repeats. It has a `members` list that contains the replicated descriptors, but does not have any of the other properties of a `NoValueData", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "       help=\"network latency in milliseconds.\n        the minimum value is 0 milliseconds.\n        valid units are either: {}.\n        e.g. tcset eth0 --delay 10ms\n        \"\"\".format(\n            \", \".join([\", \".join(values", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "   return Contact.objects.filter(telerivet_contact_id=self.telerivet_contact_id)\n\n    def get_message(self, message):\n        # Returns the message for the given phone number\n        message = Message.objects.filter(phone_number", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   PCollection<KV<List<String>, String>> liveProjects =\n        pipeline.apply(\"Read live data\", Read.from(new LiveProjectSource(org));\n    // Convert policy files to GCPResourceState objects.\n    PCollectionTuple liveStatesTuple = liveProjects", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       self.tail_pattern = re.compile(r'/([a-z]+)(.[a-z0-9\\.]+/)$')\n        self.tail_chars = set(\"abcdefghijklmnopqrstuvwxyz-\")\n        self.get", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n       ", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "       conditions.append(AndCondition(conditions[0], conditions[0])\n    for operation in operations:\n        conditions.append(operation.condition_expression(column=column))\n    return conditions\n\ndef condition_for_range(operation, column=None):\n    return conditions_", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "       assert get_square_idx(0, 0) == 0\n        assert get_square_idx(0, 1) == 3\n        assert get_square_idx(0, 2) == 6\n        assert get_square_idx(0, 3)", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "\n    private GeneratorModel model;\n    private GeneratorWizardMainPage mainPage;\n\n    private Testprio selectedTestprio;\n\n    private Button okButton;\n    private Button cancelButton;\n\n    private Text testMethodName;\n    private Text testMethodSignature", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "\nI'm trying to understand the code, but it seems like there are a lot of classes and functions that are similar or the same, and I can't figure out what each one does.  Can someone help me understand the main classes and functions?\n\n\nThe code seems to be for a system", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate JPedalExtractor ped;\n\tprivate LapdfDocument lapd;\n\tprivate SpatialOrdering spatialOrdering;\n\tprivate FrequencyCounter fontFrequencyCounter;\n\tprivate IntegerFrequencyCounter avgHeightFrequencyCounter;\n\n\t\n\tpublic RuleBased", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "     File.separator + \".\" + File.separator + \"javadoc\");\n    var inputFile = new File(files + \"input.txt\");\n    var outputFile = new File(files + \"output.txt\");\n    try (FileWriter inputWriter = new FileWriter(", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "\n    def consultar_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_sat`.\n\n        :return: Uma resposta SAT especilizada em ``Consultar", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new AnswerCallWithSpeakerAction(this), AnswerCallWithSpeakerAction.ANSWER_WITH_SPEAKER_ACTION_ID);\n        registerCallAction(new SMSReplyAction(this), SMSReplyAction.SMS_REPL", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "   # Execute the subcommand.\n    result = getattr(self.commands[name], name)(gopts, argv)\n\n    # If the subcommand failed, print error.\n    if result != 0:\n      print('repo: error: %s' % result)", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   @Named @Singleton\n    Prefs providePrefs(SharedPreferences prefs) {\n        return prefs;\n    }\n\n    @Provides @Singleton\n    FileCache provideFileCache(Ion ion) {\n        return new FileCache(ion.getFileCache", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "       Assert.assertThat(ds, totalQueryCount(3);\n\n    }\n\n    @Test\n    public void testBatchCallableCount() {\n        List<CallableBatchExecution> callableExecutions = new ArrayList<>();\n        callableExecutions.add(getMockCallable", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "   return new SvnJavaChangeLogCommand();\n}\n\n    public static void initialize()\n    {\n        initialized = true;\n    }\n}\n\n}\n\nPlease let me know if you have any questions or if you would like me to explain any part of the code.", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       verifiers.put(\"Local Files Exist Verifier\", new LocalFilesExistVerifierImpl());\n        verifiers.put(\"Remote Files Exist Verifier\", new RemoteFilesExistVerifierImpl());\n        verifiers.put(\"Valid Schema Name Verifier\", new ValidSchemaName", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           showProgress(false);\n        }\n    }\n\n    }\n}\n\nThis code is quite large and complex, but it covers the main features of the Yasme Android app. It contains classes for user authentication, device registration, login, and chat functionality. The code is quite complex and", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "   DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    void setUser(DrupalUser user) throws DrupalFetchException;\n\n    DrupalUser getUser() throws DrupalFetchException;\n\n    void disconnect()", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "       for q in quirks:\n            self.textInput.addMessage(q)\n            self.textInput.append(convertTags(q)\n        self.textInput.append(\"</c>\")\n\n    def testquirks(self):\n        quirks = pesterQu", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "           (r'/logout', LogOutHandler),\n            (r'/register', RegisterHandler),\n            (r'/submit', SubmitHandler),\n            (r'/problem', ProblemHandler),\n            (r'status', StatusHandler),\n            (r'crawler", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRNearQueryNode nearQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getNearQueryNodeExplanations(nearQueryNode);\n\t\t\treturn expandAtom(explanations);\n", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "               throw new ProtTestInternalException(\"Unsupported information criterion: \" + criterion);\n        }\n\n        return informationCriterion;\n    }\n\n    }\n\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(e1, e2)\n\n@with_info(st_typ)\ndef sigma_type(typ):\n    \"\"\"Turn a Sigma type\n    into a pair of simply typed expressions.\n    \n    Arguments:\n    - `typ`: a S", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "   Component applicationComponent;\n\n\n\n\n\nclass Module {\n    @Provides\n    AudioBookManager provideAudioBookManager() {\n        return new AudioBookManager(getApplicationContext());\n    }\n\n    @Provides\n    AudioBookModule provideAudioBookModule() {", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "\n    //Constructors\n    public ChartCategoryFragment() {\n        super();\n    }\n\n    public ChartCategoryFragment(int id) {\n        this.activeCreditCardId = id;\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater,", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   response = Mock(content_type=None)\n    try:\n        handle_request(Mock(request=Mock(content_type=None), validator_map=Mock(schema=Mock(body=Mock(text=''))))\n    except ResponseValidationError:\n        pass\n   ", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\n\tpublic void execute(Token token ) {\n\t// ...\n\t}\n\n}\n\nThe generated code has many references to the ConsoleCommandParser and ConsoleCommandBaseListener classes, which are not available in the Eclipse project. \n\nThe Eclipse project does not recognize the ConsoleCommandParser and Console", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "   def parse_file(self, file_name: str, wav_path: Optional[str, text_path: Optional[str], relative_path: str, speaker_characters: Union[int, str], sanitize_function: Optional[MultispeakerSanitizationFunction", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "\n        PressureSensorResource, \"/aircraft/sensors/pressure_sensor\",\n        resource_class_args=(sensors.pressure_sensor,)\n    )\n\n    api.add_resource\n        (ThermometerResource, \"/aircraft/sensors", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "\nself.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVground())\n\n\n\n    def test_altimeter(self):\n        huginn_data_path = configuration.get_data_path()\n        fdm_", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "   # pylint: disable=line-too-long\n    # pylint: disable=too-few-public-methods, too-many-public-methods\n    # pylint: disable=no-self-use\n    \"\"\"\n    def command_test(", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\t\n\t@RequestMapping(\"/manage.html\")\n\tpublic String manage() throws Exception {\n\t\treturn \"manage\";\n\t}\n\t\n\t@RequestMapping(\"/manage/challenge\")\n\tpublic String manageChallenges() throws Exception {\n\treturn \"manage", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                           log.error(t);\n                        } else if(exceptionClass.equals(IOException.class) {\n                            log.error(t);\n                        } else {\n                            log.error(t);\n                        }\n                    }\n                }\n            });\n", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "                                      join_keyword=u'JOIN')\n\n    def test_full_e2e_gujarati_signup_and_cancel_flow(self):\n        logging.info(\"running e2e full flow for sign up + cancel in Gujarati...\")\n       ", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": " protected Location lastLocation;\n  protected PendingIntent pendingIntent;\n  protected PlaceUpdateService placeUpdateService;\n\n\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_place);\n", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "\nI have extracted the code from the provided file and the functions and classes are:\n\n1. Connect to VM/Device - connect\n2. Refresh AVD - refresh_avd\n3. Install and run - install_and_run\n4. Run MITM Proxy - web_", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "# define the RRC procedures dictionary\nGSM_R_dict = {\n    0: 'SYSTEM INFORMATION TYPE 13',\n    1: 'SYSTEM INFORMATION TYPE 14',\n    2: 'SYSTEM INFORMATION TYPE ", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\tif demean_flag:\n\t\t\t# demean surface data\n\t\t\t# Calculate surface areas\n\t\t\t# Calculate surface curvatures\n\t\t\t# Calculate surface torsion\n\t\t# Calculate surface bending\n\t# Calculate surface twisting", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "       result.append(\" IS NULL\");\n    } else {\n      result.append(exp.getOperator());\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    }\n    result.append(CLOSE_BRACKET);\n  }\n", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "     cacheService.storeCacheList(new CacheList(listName);\n      cacheService.addListener((ProgressEvent event) -> updateStatus(event.getMessage(), event.getProgress()));\n      cacheService.addListener((Progress event) -> updateStatus(event.getMessage(), event.getProgress()));", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "   self.CallName = self.CallName\n    self.ReprName = self.ReprName\n    self.Len = 1\n    self.Trans = False\n    self.Dict = {}\n    self.LenFunc = len\n    self.Repr = repr\n    self", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "               TimeEntryOvertimeAggregation.class));\n    }\n\n    @Subscribe\n    public void onApprove(Action.ActionPerformedEvent event) {\n        Popup popup = approve.show(this);\n        popup.setTitle(messageBundle.getMessage(\"", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "           # False means private\n            (False, PubKeyAlgorithm.RSAEncryptOrSign): RSAPriv,\n            (False, PubKeyAlgorithm.RSAEncrypt): RSAPriv,\n            (False, PubKeyAlgorithm.RSASign): RSAP", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "\n# ...\n\n    def get_expansion_info(self):\n        return ul.get_config(InfoType.EXPANSIONINFO, self._board_num, self._expansion_num)\n\n    def get_expansion_name(self):\n        return ul", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "       self.references = dict((ref_classdef.ref_name, obj) for ref_classdef, obj in self.objects.items())\n        self.objects = weakref.WeakValueDictionary()\n        for key, value in self.items():\n            ref = self.", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "\n\n\n\n\nI need help understanding how to implement the following:\n\n\n1. The `request_invitation` function. It seems to be a view function, but it has a `form` attribute.\n2. The `form` attribute in the `request_invitation` function is", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "       await Utilities.message(ctx.message.channel, f\"Form dumped!\")\n        await self.pokemon_interface.load(ctx.guild.id)\n        for pokemon in ctx.message.content.split():\n            pokemon = await self.pok", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "           ex = Hitbtc(name)\n        elif name == \"%s_BTC_BCH\" % constant.EX_HUOB:\n            ex = Huobi('bchbtc')\n        elif name == \"%s_BCH_BTC\" % constant.EX_H", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "           if item is not None:\n                yield item\n            else:\n                raise self.missing_context()\n\n    else:\n        # XSD typed selection\n        for item in context.iter_self():\n            if context.item is not None and context.is_principal_", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "   DummySherpaServer server = new DummySherpaServer(10);\n    InetSocketAddress serverAddress = server.getAddress();\n    try {\n      DataSource ds = new SHPDataSource(serverAddress.getHostName(), serverAddress.getPort());\n     ", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\tresult.setIndex(index);\n\tresult.setTextExpander(textExpander);\n\treturn result;\n\t}\n\n\tpublic static void closeIndexReader(", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                   //initMiPushClient();\n                    //Log.e(MYTAG, \"使用MiPush推送\");\n                    break;\n            default:\n                Log.e(MYTAG,\"不支持推送\");\n                break;\n        }", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "   private final KadConfiguration config;\n\n    private int attempts = 0;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, KadConfiguration config)\n    {\n        this.server = server;\n        this.localNode = localNode;", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "\ndef tabulate(rows):\n    if rows:\n        numalign, stralign = 'decimal', 'left'\n        tablefmt = table_format\n        else:\n            numalign, stralign = None, None\n        output.append(tabulate_table(rows, num", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "       return words_api(dictionary_api, token)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tConnector connector;\n\t@Inject\n\tprivate ConnectorIssues connectorIssues;\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\tsuper.onCreate(savedInstanceState);\n\tDLog.i(\"TaskListByJQL\", \"onCreate", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "       self.assertIsNotNone(handle, \"CreateEvent failed\")\n\n\n    def test_create_event_named_handle(self):\n        handle = CreateEvent(bManualReset=False, bInitialState=False, lpName=\"my_event\")\n        self.", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "       this.deployments = new SpringDeployments(restTemplate, root, this.tasks);\n        this.vms = new SpringVms(restTemplate, root);\n    }\n\n    public DirectorClient(RestTemplate restTemplate, URI root) {\n        this(restTemplate,", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   return parserHolder.parse(currentAnnotatedElement, roundDescriptor.getRoundNumber(), roundDescriptor.getDescriptor());\n                })\n                .collect(Collectors.toList());\n        List<Specification> specifications = specificationGeneratorFactory\n                .buildSpecification(fileManager", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "   public Crawler(CrawlerConfig crawlerConfig) {\n        this.crawlerConfig = crawlerConfig;\n        pageFetcher = new PageFetcher(crawlerConfig);\n        pageDispatcher = new SimpleDispatcher();\n        pageHandler = new PageHandler();\n   ", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           actionPopupGroup.add(new SaveAction(this));\n            actionPopupGroup.addSeparator();\n            actionPopupGroup.add(new SaveAsTextAction(this));\n        actionPopupGroup.addSeparator();\n        actionPopupGroup.add(new Can", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "\n    private GuiLabel nameLabel;\n    private GuiCheckbox enabledCheckbox;\n\n    public GuiSettingsChannel(ServerSettings settings) {\n        super(settings);\n        this.channel = settings.getChannel();\n        this.nameLabel = new GuiLabel(channel", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_BACK:\n                return new BtnBackLight();\n            case ConstantStr.FUNC_NAV_BACK_CODE:\n                return new BtnNavBarGoHome();\n            case", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "       // Set the form's title\n        form.setTitle(Messages.configurationEditorWebModuleDialogTitle);\n        // Create the table and add the columns\n        _webAppTable = toolkit.createTable(form, new ColumnWeightData(1));\n        _webAppTable.add", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       type = Type()\n        type.type = \"string\"\n        type.sample = \"my_string\"\n        self.assertEqual(\"my_string\", type.get_sample())\n\n    def test_type_get_sample_return_default_sample(self):\n       ", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "           new EventCommandHandler<StartTimeCommand>(StartTimeCommand.class, StartTimeEvent::fromCommand));\n        commandProcessor.addHandler(\n            new EventCommandHandler<SetTimeCommand>(SetStartTimeCommand.class, SetStartTimeEvent::fromCommand));\n        commandProcessor.addHandler", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "   self._cluster_type = _cluster_type\n    return self\n\n    def set_datasegment_name(self, _datasegment_name):\n    self._datasegment_name = _datasegment_name\n    return self\n\n    def set_new_", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "   query = {\n        'api_key': settings.FLICKR_KEY[1],\n        'auth_token': frob,\n        'perms': 'read,write',\n    }\n    sign_flickr_query(query)\n    url = urlun", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t}\n\t\t\tcatch(FCPException e) {\n\t\t\t\tLogger.error(this, \"Caught FCPException while inserting message\", e);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tmessageInsert.log(this, ", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "       cond = self.parse_condition(condition_bytecode)\n        self.add_condition(cond)\n      except Exception as e:\n        logger.error(\"Parsing condition failed: %s\", e)\n        return\n      finally:\n        self.pop_condition(cond", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "   //UI\n    private View rootView;\n    private ScrollView scrollView;\n    private TextView dailyExpenseLabel;\n    private TextView dailyExpenseAmount;\n    private TextView dailyExpenseDate;\n    private TextView dailyExpenseDescription;\n    private Button refreshButton;\n\n   ", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "\n    for slug in RELSTREAM_SLUGS:\n        all_platform_slugs.append(slug)\n        for engine in ENGINE_CHOICES:\n            all_platform_slugs.append(engine + slug)\n\nThe code above", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\t}\n\n}\n\\end{code}\n\nI have highlighted the parts that are relevant to the question. This is the main activity that handles the navigation between different screens (search, local places, global feed, friends feed, etc.) and manages the subscriptions to the API calls. It", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "   def parse(self, ping_message: Sequence[str]) -> PingStats:\n        return self.__parser.parse(ping_message)\n\n\n\nclass PingStats:\n    \"\"\"\n    Class to store ping statistics.\n\n    Args:\n        destination (str", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           // Display a message that no chat with id \"chatId\" exists in the DB\n            Toast.makeText(mContext, R.string.no_chat_with_id, Toast.LENGTH_SHORT).show();\n            return;\n        }\r\n        // If the chat exists, but", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tpublic void init(int width, int height) {\n\t\tthis.width = width;\n\tthis.height = height;\n\tinit();\n\t}\n\n\tpublic void init() {\n\t}\n\n\tpublic void render() {\n\t}\n\n\tpublic void update", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "   account = account_for_facebook_user(b_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person is None:\n            # AGH\n            random_name = ''.join(choice(string.let", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "\n        assertThat(qe, isPrepared());\n        assertThat(qe, batchPrepared());\n        assertThat(qe, callable());\n        assertThat(qe, batchCallable();\n        assertThat(qe, isCallableOrBatchCallable", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "   }\n    }\n    }\n  }\n}\n\n  void uploadFinished() {\n    statusWidget.setStatus(IUploadStatus.Status.DONE);\n    statusWidget.setError(null);\n    fileInput.setFocus(false);\n    fileInput.", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "   merged_assembly_points_by_ids = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources, unique_assembly_points=original_assembly_points)\n\n    merged_assembly_points = [ap for ap in merged_assembly_", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "\n    api.add_resource(GyroscopeResource, \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(PressureSensorResource, \"/aircraft/sens", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "       fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n        inline=True)\n        return await ctx.send(embed=embed)\n\n    @staticmethod\n    async def send_channel_config", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\tif (!level.isInstalled()) {\n\t\t\t\t\t// installAsync(level, new DoubleCallback() {\n\t\t\t\t\t@Override\n\t\t\t\tpublic void onDone(Object... objects) {\n\t\t\t\t\t\tlong id = (", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   private WeeklyCaptionProvider captionProvider;\n\n\n\n    // ...\n\n\n\n\n    public Calendar() {\n        super();\n        init();\n    }\n\n    protected void init() {\n        setTheme(CalendarTheme.defaultTheme);\n        setWidth(\"1", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "       this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    public void start() {\n    }\n\n    public void stop() {\n    }\n\n    public void restart() {\n    }\n\n    public void recreate() {\n", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "   locators = new DefaultPublicKeyLocator(new IdentityServerDescriptorProvider(), new ServerInfoResolver(new JsonServerInfo(SERVER_DOCUMENT));\n    locatorsFromRuby = new VerifierProviders(hmacLocator, rsaLocator);\n    privateKey = KeyFactory", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "   protected EasyOnItemTouchListener easyOnItemTouchListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindow;\n    protected EasyOnViewDetachedFromWindowListener easyOnViewDetachedFromWindow;\n\n    public MultiItemAdapter(Context context", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "               } catch (IOException e) {\n                    assertEquals(HttpStatus.NOT_FOUND, e.getStatus());\n                }\n            }\n\t\t}\n\t}\n\t\n\tpublic void testMultipleObjects() {\n\t    // Tests to make sure we're", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "\nI'm trying to understand how this code is structured, but I'm not sure what the different classes and methods are doing. Can you explain the high level architecture of this code?\n\n\nHere is a high level overview of the code:\n\n1. There are several classes:\n", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "\n\n    @ViewById(R.id.drawer)\n    DrawerLayout drawer;\n\n    @ViewById(R.id.drawer_list)\n    ListView drawerList;\n\n    @ViewById(R.id.drawer_nav_header)\n    View dra", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                       home.setType(Home.Type.CARD); home.setTitle(\"\"); home.setSubtitle(\"\"); home.setIcon(mContext.getDrawable(R.drawable.ic_card_background)); home.setTitleColorResource(R.color.card_text_color", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "       encoding = Default.ENCODING\n\n    convert_configs = load_convert_config\n        logger, ctx.obj[Context.CONVERT_CONFIG], subcommand=\"url\"\n    max_workers = ctx.obj.get(Context.MAX_WORKERS)", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "\n    def getPlaylistItems(self):\n        \"\"\" Return a list of all items in the playlist. \"\"\"\n        return self.items()\n\n    def getPlaylist(self):\n        \"\"\" Return the playlist object. \"\"\"\n        return self\n\n    def refresh(self):", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "       class EnvironmentKey(object):\n            def __getitem__(self, key):\n                if key in (\"a\", \"b\", \"c\", \"d\"):\n                    return u\"value\"\n                else:\n                    raise KeyError\n        self.assertEqual(\n            _", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "   result = cmd.Run(gopts, argv)\n    return result\n\n  def RunGitc(self, gopts, argv):\n    gitc_manifest = GitcClient(self.repodir, os.path.join(self.gitc_client_dir", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               // 将任务数据保存\n                taskManager.addTaskData(taskData);\n            } catch (Exception e) {\n                log.error(e.getMessage(), e);\n            }\n        }\n    }\n    }\n}\n\npublic void addTaskListener", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       await r.after_headers(Entry())\n\n    @async_test()\n    async def test_reject_404(self):\n        r = RejectStatus(404)\n        await r.after_headers(Entry())\n\n    @async_test()", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       //用户的学科\n        courseName = split[2].replace(\"同学\", \"\");\n        //用户的专业\n        course = split[3].replace(\"同学\", \"\");\n        //用户的班级\n        classNo = split", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "   def parse(self, device, text):\n        self.device = device\n        self.ifb_device = None\n        self.__clear()\n        if typepy.is_null_string(text):\n            return []\n        text = self._to_unicode(text).", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "   def add_location_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try:\n            loc = obj.location # type: ignore\n            state[\"location\"] = loc.name\n            state[\"coords\"] = loc.co", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "  */\r\n  public Query visit(Ord4Search n, Query query) {\r\n    List<Occur> occurs = null;\r\n    if (n.f0.tokenImage.length() == 2) {\r\n      occurs = rfOpToOccur.get(n.f0", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\tthis.schemaValidator = new SchemaValidatorImpl();\n\tthis.cleaningFolder = false;\n\tthis.surveyName = null;\n\t}\n\npublic void setSurveyName(String surveyName) {\n\tthis.surveyName = surveyName;\n}\n\n", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "       try {\n            //read snapshot file if provided\n            SnapshotFileReader reader = new SnapshotFileReader(snapFile, Long.parseLong(zxid));\n            DataState dataState = reader.readFuzzySnapshot();\n\n            //apply transactions to dataState to make", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "\n    def get_from_queue(self):\n        # Wait til there's something in the queue\n        self.q_work.acquire()\n        if len(self.queue) == 0:\n            self.q_work.wait()\n        else:\n            self", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "       cursorById.close();\n\n        // Test the content provider query with a projection\n        Cursor projection = new Cursor();\n        projection.moveToNext();\n        DataTestUtilities.validateMovieCursor(\"query by projection\", projection, DataTestUtilities.createMovieEntry());\n       ", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "   DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])\n\n    def EvtGenerationContrat(self, _):\n    DocumentDialog(self, ContratAccueilModifications(self.inscrit, self.current", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "   self.assertEqual(node_children(self.elem), [self.elem])\n\n    def test_node_nilled_function(self):\n    self.assertIsNone(node_nilled(self.elem)\n\n    def test_etree_deep_equal_", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\tsetContentView(R.layout.map_view);\n\tmapView = (MapView) findViewById(R.id.map_view);\n\tlocationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);\n\tdataProvider = DataProvider.getDataProvider(", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                   ", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "   def get_netconf_protocol(self):\n        return \"cisco_ios\"\n\nclass Cisco35600Core(BaseCiscoSwitchCore):\n    def new_command_processor(self):\n        return ConfigCommandProcessor\n\n    def get_net", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert config.SAMPLE_RATE_HZ == 10.0\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n '''\n  config = selectOutputConfig('high_rate')\nNext line of code:\n  assert config.SA", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "\n    return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n\n    def __str__(self):\n        return str(self.gerar_numero_sessao())\n\n    def __repr__(self):\n        return", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "   site_fractions = build_sitefractions(phase_name, configuration, sublattice_occupancies)\n\n\nNote: This code is a simplified version of the ESPEI 0.8.0 codebase for the non-equilibrium thermochemical part. Many", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "   # ...\n\n\n", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "   def load_corpus(self, corpus_directory: str) -> None:\n        self.corpus_directory = corpus_directory\n        self.files = FileCollection()\n        self.dictionaries = Set[PronunciationDictionaryMixin]\n        self.utter", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "   private CameraSource cameraSource;\n    CameraSource cameraSourcePreview;\n    GraphicOverlay graphicOverlay;\n    GraphicOverlay graphicOverlayPreview;\n    OcrDetectorProcessor ocrDetectorProcessor;\n\n    @Override\n    protected void onCreate(", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n}\n\n}\n\nmisc/src/main/java/io/hummer/util/net/NetUtil.", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "   return (List<ServerConfiguration>) getState().getServerConfigurations();\n}\n\n    private void installActions() {\n        ActionManager actionManager = ActionManager.getInstance();\n        DefaultActionGroup actionGroup = new DefaultActionGroup();\n        actionGroup.add(new ExplorerAction(\"", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\tFluent header = Fluent.getElementById(\"header\");\n\tif (header == null) {\n\t\tcontainer = Fluent.createElement(\"header\");\n\t\theader = header.h1(\"H1\", \"Todo App\");\n\t\theader.inputNext();\n\t}\n", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "               if (output != null) {\n                    saveImage(output);\n                    RESULT_CODE = 1;\n                }\n            }\n        });\n\n        confirm.setOnClickListener(new View.OnClickListener() {\n            //TODO: implement\n        }\n        cancel", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "   mFastScroller.setShowBubble(mShowBubble);\n\n    }\n}\n\n\npublic void showToolbar() {\n    mShowToolbar = true;\n    mRecyclerView.setHasFixedSize(true);\n    mRecyclerView.setLayoutManager", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   validate_key_condition(model, key)\n\ndef test_single_range_key_success(model, index):\n    query_on = index or model.Meta\n    key = query_on.range_key == \"value\"\n    validate_key_condition(model,", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCActivitySet gcActivitySet,GCActivity activity) {\n        dataset.addGCActivity(gcActivitySet.getGCActivity());\n    }\n\n    public void gcActivityNameAdded(int id, String gcActivityName) {\n        dataset.addGCActivityName", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "           # Property endpoints\n            '/property':                    RestAppPropertys\n\n        }\n\n    def get(self, endpoint):\n        return self.api.get(endpoint)\n\n    def post(self, endpoint):\n        return self.api.post(endpoint)\n", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "       self.tree_view = tree_view\n        self.tree_model = FileTreeModel(self._directory)\n        self.tree_view.setModel(self.tree_model)\n        self.tree_model.set_data(self._df_manager.get_model", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "\n    group.add_argument(\n        \"--reordering\",\n        dest=\"reordering_rate\",\n        default=0,\n        help=\"\"\"round trip reordering rate [%.\n        the valid range is from {:d} to {:d}. (default=%(default", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "\n    private final Map<Channel, TexturedModal> modalMap = Maps.newEnumMap(Channel.class);\n\n    @Override\n    public void drawComponent(int mouseX, int mouseY) {\n        super.drawComponent(mouseX, mouseY);\n        // Draw the", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "        * @param event\n         *            The click event\n         */\n        void dateClicked(Date date, DateClickEvent event);\n    }\n\n    public VCalendar(String id) {\n        super(id);\n        initWidget();\n    }\n\n    protected void init", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "       self._db_type = db_type\n        return self\n\n    def set_client_id(self, client_id):\n        self._client_id = client_id\n        return self\n\n    def set_serialization_type(self, serialization_type):\n", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "\n            Namespace namespace = namespacesHub.get(packet.getNsp());\n            namespace.onUpgrade(packet);\n            break;\n        }\n        }\n    }\n\n}\n}\n\\end{code}\n\nI have added some comments to explain the", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private RepoContentTask repoContentTask = new RepoContentTask();\n    private StarTask starTask = new StarTask();\n    private BookmarkTask bookmarkTask = new BookmarkTask();\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostprocessing());\n\t\tIdentityGenerator identityGenerator = new IdentityGenerator();\n\t// ...\n\t\n\treturn new GenerationService(preprocessors, postprocessors, identityGenerator);\n}\n\n\n}\n", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<GCPProject> projects =\n        pipeline.apply(\"Read projects from CRM API\", Read.from(new LiveProjectSource(org));\n    // Convert projects to GCPResource objects.\n    PCollection<GCPResource> projectResources =\n        projects.apply(Par", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "\n    return MyModel()\n\n\ndef test_model_meta(model):\n    # Assert the model's Meta matches the fixture's Meta\n    assert model.Meta == fixture.dynamodb.Meta\n    assert model.Meta == fixture.dynamodbstreams", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "           # This is a reference to the Perplexity class from the previous code snippet\n            self._def_reader = Perplexity(emb_dim)\n\n        super(LanguageModel, self).__init__(children=children, **kwargs)\n\n    def get_dim(self):\n", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "   private ChatManager(ChatCallback delegate)\n    {\n        _delegate = delegate;\n    }\n\n    public void startListening(String relayHost)\n    {\n        synchronized (_lockObject) {\n            _relayHost = relayHost;\n        startListening", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   private String videoPath;\n    private MediaType mediaType;\n    private Uri videoFile;\n    private String videoThumbnail;\n\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInUp(RotateInUpLeft.class),\n    RotateInRight(RotateInRight.class),\n    RotateOut(RotateOut.class),\n    ZoomIn(ZoomIn.class),\n    ZoomInDown(ZoomInDown.", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "           form.initial = {'zona': self.object.zona}\n        return render(request, self.get_context(form=form))\n\nclass UserFormCreacion(UserBase):\n    form_class = UserCreationForm\nclass UserFormEdicion(UserBase):", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "\n    public static Fog convert(FogDescriptor descriptor, GameObject go) {\n        // find fog\n        Fog fog = environment.getFog();\n        if (fog == null) {\n            Log.fatal(TAG, \"Fog not found\");\n            return null", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\t\t\t// ...\n}\n\n\n", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "}\n\n\n\n\nThe above code is generated by dagger 2.0.10.1.\n\n\nI am trying to understand how the different components are related to each other and how they are injected into the app.\n\n\nPlease provide some guidance on how to understand the d", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\n\t\t\t// run the benchmark\n\t\treturn view.runBenchmark();\n\t}\n\n\tpublic void runBenchmark() {\n\t\t// ...\n\t}\n\n}\n\n}\n\n\n\n\n", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "   pipeline_manager = PipelineConfigManager()\n    sync_stats_manager = SyncStatsManager()\n    ci_pipeline_manager = CIPipelineManager()\n    visitor_manager = Visitor()\n    package_manager = PackagesManager()\n\n    def __init__(self", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tlogManager\n\t\t\t\t.logInfo(this, \"Building a wrapper from the service discovery file.\");\n\t\t\tAPIWrapper wrapper = createMostSuitableWrapper(serviceDiscoveryInfo, endpointType, dataParser,\n\t\t\t\tnetworkManager, api", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "       planilla = PlanillaDeRelevamiento.objects.get(planilla_modelo__nombre=request.GET['planilla'])\n        return render(request, 'relevamiento/seleccionar_planilla_de_relevamiento.html', {'planilla': plan", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "   self.tree = root\n\n\ndef from_ast(ast):\n    constraint = Constraint()\n    constraint.root = ast.root\n    constraint.ast = ast\n    constraint.live = set()\n    constraint.tree = ast.tree\n    return constraint\n\ndef", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\tJoinResult result = getRound().addPlayer(this);\n\treturn result;\n}\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], -2), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], -1), [1])\n    assert_array_equal(fold([MIN_HASH_VALUE], -MAX", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "\n    return result\n\ndef evaluate_format_date_time(self, context=None):\n    value = self.get_argument(context, cls=TypedAttribute)\n    if value is None:\n        return ''\n\n    # Parse the date-time value\n    dt", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\tif model_item.data.name == \"Part\":\n\t\t\tdefault_flags |= Qt.ItemIsDragable\n\texcept Exception as e:\n\t\tprint(\"DocumentModel::flags\")\n\t\tprint(str(e)\n\treturn default_flags\n\n\t", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "       array.items = [object1, object2, object3]\n\n        response = Hydrator(version1, versions, []).hydrate_object(object_dto, object1)\n        response = Hydrator(version2, versions, []).hyd", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "       FASTDecoder decoder = new FASTDecoder(clientConfig, count);\n        decoder.decode(new PipeBundle(new PipeConfig(count, clientConfig.getPreableBytes(), new MessageSchemaDynamic(templateSource), new PipeConfig(count));\n    }", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "\n  value_error(TFO)\n\n  to_map_and_back(TCO, TCXOBase(0, 0, 0))\n\n\ndef test_message_factories():\n  to_map_and_back(MFO, Message(0", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "               containsString(query));\n    }\n\n    @Test\n    public void storeWithLocation() throws Exception {\n        Collection<SourceRecord> records = SourceRecordHelper.loadGetRecordsResponse(Resources.asByteSource(Resources.getResource(\"responses/dab-records-", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "           (True, PubKeyAlgorithm.ECDH): ECDHPub,\n        }\n\n        # False means private\n        (False, PubKeyAlgorithm.RSAEncryptOrSign): RSAPriv,\n        (False, PubKeyAlgorithm.RSAEncrypt", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\tJPEParser.registerJPEParser(new CSVParser());\n\tJPEParser.registerJPEParser(new XMLJPEParser());\n\n\tGeoJSONWriter.getInstance().registerGeoJSONWriter();\n\t}\n\n\tpublic void registerServices() {\n\t\t// Register", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                   res = context.get(Global.InvokeKeys.SEARCH_CONTEXT, ExtMap.class).get(CursorKeys.FILTER, String.class);\n                    } catch (SQLException e) {\n                    addContextMessage(context, true, e.getMessage());", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "url(r'^users/$', users_list, name='users-list'),\n\n# IP addresses\nurl(r'^ip/list/$', ip_list, name='ip-list'),\nurl(r'^ip/(?P<ip_id>[-\\w]+)/$", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                       }\n                    }\n                });\n                startActivity(new Intent(PlaySessionSettingsDialogFragment.getPlaySessionIntent());\n            }\n        }\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        if (", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "\n    private Handler handler = new Handler(Looper.getMainLooper());\n\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_mentality_health);\n        init", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "   def updateBuffImg(self):\n        self.buffImg = self.getBlock().getBlockImage()\n\n\ndef getBlockImage():\n    return self.workspace.getBlock(self.blockID).getBlockImage()\n\ndef getBlockShape():\n    return self", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "   assert self.libXDA.find_XOR_preimage_8bit(d1.val, d2.val, d3.val)\n\n\n\n\ndef test_find_preimage_Xor_8bit():\n    # Test find preimage for XOR differences", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic Node transformMultiAlternation(MultiAlternationNode node, Node first, Node second);\n\t}\n\t\n\tpublic static NodeTransformer getTransformer(String grammar, DiscriminativeOracle oracle) {\n\t\tNodeTransformer transformer = null;\n\tif", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tlog(\"Enabled\");\n\t}\n\n\tpublic class MyLocationTypeAdapter implements TypeAdapter<Location> {\n\tpublic Location readValue(JsonElement json, Type typeOfT typeOfT) throws JsonIOException {\n\t\tLocation location = new Location(json.getDouble(\"x\"),", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "       Challenge challenge = new Challenge(doc.getText());\n        connection.addChallenge(challenge);\n    }\n\n    private void parseFailure(Element doc) throws Exception {\n        String condition = doc.getText();\n        failure = new Failure(doc);\n        connection.addFailure", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "   BvComp3 = BvComp(Speck3, DerMode.ProbabilityOne)\n    # BvComp3.set_rounds(2)\n    assert BvComp3.eval(Speck3.plaintext, Speck3.key) == Speck3", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "   private SongAdapter mAdapter;\n\n    @Override\n    public View onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setHasOptionsMenu(R.menu.main);\n        setRetainInstance(true);\n    }\n\n    @Override\n   ", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "           effect.addParameter(new FloatParameter(\"Scale\", 1.0f, 10f, effect.mScale, new FloatParameter.Delegate() {\n                @Override\n                public void setValue(Float value() {\n                    effect.setScale(value);\n                }\n", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "   def __init__(self, EBT=0, PD=0, EBT_len=4, PD_len=4):\n        self.EBT = EBT\n        self.PD = PD\n        self.EBT_len = EBT_", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "           refresh();\n        }\n    };\n\n    public View createView(LayoutInflater inflater, ViewGroup container) {\n        View view = inflater.inflate(R.layout.artist_fragment, container);\n        return view;\n    }\n\n    public void onViewCreated(", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "   self.add_utterance(utterance)\n    self.add_utterance(utterance)\n    ...\n    self.add_utterance(utterance)\n    ...\nself.add_utterance(utterance)\n    ...\nself.add_utterance(utter", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\tpublic boolean addRemittUser(UserDTO user) {\n\t\treturn KeyringStore.addKeyringItem(user);\n\t}\n\n}\n\n\nThe Remittance server is written in Java and uses Apache CXF for web services. It provides a RESTful API for", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "   Observable<ApiStatus> apiStatus(@Query(Constants.KEY) String apiKey);\n}\n\nNote: This API uses the MIT license. See the LICENSE file for details.\n\n */\n\nThe above code is a Java interface that provides methods for interacting with the Sh", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   public void visitLogMessage(LogMessage message) {\n      if (message instanceof FailureLogMessage) {\n        // Skip\n      } else {\n        super.visitLogMessage(message);\n    }\n  }\n\n  public void close() {\n    // Close the", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   result = 24.7 * (4.37e-3 * freq + 1.)\n    return result * bandwidth\n\n\n# Define some random tests\ndef test_gammatone_constants():\n    np.random.seed(0)\n    n", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "   return Sequence(seq)\n\ndef read_sequence_item(fp, is_implicit_VR, is_little_endian, encoding, offset):\n    # Read next sequence item\n    # Try to read a SequenceDelimiterTag first\n    if VR is", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   try {\n      // ...\n      // walk the document\n      CoordinatesWalker walker = new BaseCoordinatesWalker(document);\n      walker.walk();\n    } catch (ProxyException e) {\n      throw new DocxStamperException(\"could not create", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   public void onStart() {\n        super.onStart();\n        adapter.clear();\n        inputMethodManager.hideSoftInputFromWindow(\n                query.getWindowToken(), 0);\n        loadData(1);\n    }\n}\n\\end{code}\n\n", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "   def flags_int(self, val):\n        self._flags = RevocationKeyFlags(val)\n\n    def flags_int(self, val):\n        self._flags = RevocationKeyFlags(val)\n\n    def __init__(self):\n        super(NotationData", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "   def testquirks(self):\n        quirks = pesterQuirks(self.parent().quirks)\n        quirks = quirks.addQuirk(\"on\", \"group\", \"Miscellaneous\")\n        quirks.addQuirk(\"replace\", \"BEGIN WITH:", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "   def visit_string(self, type_):\n        return type_\n\n    def visit_number(self, type_):\n        return type_\n\n    def visit_markup(self, type_):\n        return type_\n\n    def visit_typevar(self,", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return GregorianMonthDay(value.month, value.day, value.tzinfo)\n    except ValueError as err:\n        raise self.error('FORG0001', err)\n\n\n@constructor", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "   # Initialize the feature matrix\n    feature_matrix = _build_feature_matrix(sample_condition_dicts, symbolic_coefficients)\n\n    # Perform ridge regression\n    # We only fit the \"CM_FORM\" feature by default\n    # The other features will be", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "   pausePlayerAndSHowVpaid(controller, controller, fsmPlayer, adMedia);\n\n}\n\n}\n\\end{code}\n\nThe code you provided is a part of the TubiExoPlayer library, which is an Android library for playing video ads and videos", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 7 || type == 0) {\r\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8 ||", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   Call<SearchSuggestionResponse> getSuggestions(@Query Map<String, String> serviceIds, @Query(\"tag\") String tag, @Query(\"limit\") @IntRange(from = 1, to = 50) Integer limit);\n\n    @GET(\"suggest", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "       self.coordinator = Coordinator(\n            session=engine.session,\n            stream_arn=model.Meta.stream[\"arn\"])\n        self.coordinator.heartbeat()\n        self.coordinator.move_to(position)\n        return self\n", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "   def _get_learner(self, parsed_args):\n        pass\n\nThis code defines a command line interface for the audeep library, which allows users to train and evaluate machine learning models. It includes the following features:\n\n1. Training a model on a data set using a specific partition", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate CategoryServices categoryServices;\n\tprivate ChallengeServices challengeServices;\n\tprivate CountryServices countryServices;\n\tprivate SubmissionServices submissionServices;\n\tprivate BannedIpServices bannedIpServices;\n\t\n\t\n\t@RequestMapping(value = \"/profile\")\n\tpublic", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "   def __getitem__(self, key):\n        \"\"\"Set query slice, or just get result by index.\"\"\"\n    if isinstance(key, slice):\n        if key.start is None:\n            if key.stop is None:\n                self.first(None)\n            else", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "   @scoped_subgraph\n    def decoder(self) -> FeedPreviousRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the decoder input sequences and feeds the output of the previous time step as input to the", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "   for slug in PLATFORMS:\n        all_platform_slugs.append(slug)\n        if slug in PLATFORMS:\n            break\n    platforms = Platform.objects.filter(slug__in=all_platform_slugs)\n\n\nI get an", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   @Override\n    public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    // Concrete visit methods (NodeNavigationVisitor)\n    @Override\n    public boolean visit(ExpressionNode node) {\n        return defaultValue();\n    }\n\n   ", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static frameset(Attribute... attributes) {\n\treturn new Frameset(attributes);\n}\n\npublic static head(Attribute... attributes) {\n\treturn new Head(attributes);\n}\n\npublic static h1(Attribute... attributes) {\n\treturn new H1(attributes", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       // add the number of meters\n        for (MethodResult meter : benchRes.getRegisteredMeters()) {\n            out.println(meter);\n        }\n        // add the results\n        for (MethodResult result : benchRes.getRegisteredResults()) {\n            out", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "     parent = visitor.visit(node.data)\n      return parent\n\n    def get_loop_depth(node):\n      depth = 0\n      while True:\n        parent = visitor.visit(node.data)\n        depth += 1\n        if parent is None", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.data);\n\t\t\t\tbreak;\n\t}\n\t}\n\n\t\n\t@Override\n\tpublic void train() {\n\t\tthis.T =", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "   def parse_datetime_marker(marker: str, dt: datetime.datetime, lang: Optional[str] = None) -> str:\n        ...\n    def int_to_words(num: int, lang: Optional[str] = None) -> str:\n        ...\n    def", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "           }\n        });\n    }\n};\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.room_activity_room);\n\n    // initialize the layout\n    mSendButton = (Button", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\n", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "       self.releve_salaries_button.Enable(self.releve_salaries_monthchoice.GetSelection() is not None)\n        self.releve_salaries_monthchoice.SetClientData(self.releves_choice.GetClientData(self", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "           H_am = dot(cross(c - p, H_rot) + dot(J_rot, cross(c - p, H_trans))\n        return H_am\n\n    def apply_torqueues(self, torques):\n        \"\"\"\n        Apply torques", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "   // ...\n}\n\n}\n\nThis is a sample Android app that uses the Android Annotations library to generate Java code from an XML layout file. The HorizontalListView is used to display a list of QueuedProject objects, which are fetched from an API using the Ravelry library.", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "           CommandLoader.registerCommands(this, TextSerializers.FORMATTING_CODE.serialize(messageStorage.getMessage(\"command.pay.error\")),\n                    new PayCommand(),\n                    new PayVirtualCommand(),\n                    new BalanceCommand(),\n                    new E", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "           return prior\n        else:\n            raise ValueError('Invalid prior specification')\n\n    def _fit(self, symbols, datasets, *args, **kwargs):\n        # ...\n\n    def predict(self, parameters):\n        # ...\n\n    def commit(self):\n       ", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "     return Const(arg)\n    elif op == LOAD_VAR:\n      return Ref(arg)\n    else:\n      return Undef(data=None)\n  else:\n    return Undef(data=None)\n\ndef enableLogging(to_file=None):", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final FringeLayer fringeLayer = new FringeLayer();\n\n\npublic ClientMaster(String entityBasePath) {\n\tsuper(entityBasePath);\n}\n\npublic void begin() {\n\t// ...\n}\n\npublic void update() {\n\t// ...\n}", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   (LightSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMPERATURE:\n                    TempSensorView", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tLong reference() {\n\tSet<Long> set = new HashSet<>();\n\tAtomicLong aLong = new AtomicLong();\n\tjdbcTemplate.query(\"SELECT AUTHOR.*, BOOK.* FROM AUTHOR LEFT OUTER JOIN BOOK ON AUTHOR.ID = BO", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\t\n\tpublic void executeServer(SQLTranslation exp, ForestReader in, ForestWriter out) {\n\t\t// ...\n\t}\n\n}\n\nPlease provide the license details as per the instructions in the README.md file.", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "       #  Install the APK\n        install_and_run(app_info['file_path'], app_info['package'], app_info['is_activity'])\n\n        #  Run the app\n        run_app(app_info['file_path'])\n        \n        #", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "   Genotype parseGenotype(InputStream inputStream);\n\n    }\n\nPlease help me complete the implementation of the PersonalGenomeConverter interface.\n\n\n", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "               Symbol.typed(bar_type, 'bar'),\n                Symbol.typed(IntType, 'baz'),\n            ]),\n        ]),\n        {'inc': inc_type},\n    )\n\ndef test_let_record():\n    inc_type = Func[[", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "       PreparedExecution pe = ds.getFirstPrepared();\n        assertThat(pe, success());\n        assertThat(pe, failure());\n        // query with StringMatcher\n        assertThat(pe, query(is(\"...\"));\n        assertThat(pe, query(starts", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "```\nThis is a Pracedru Design code, a CAD software for parametric design. It contains various classes for geometric shapes, sketches, drawings, parts, and calculations. It also contains the GUI widgets for the user interface, like the Sketch Editor View, Part View, Drawing", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                       return new NotFoundException(cause);\n                    }\n                }\n                return new ApiException(cause);\n            }\n        };\n        // Set up the RestAdapter\n        mAdapter = new RestAdapter.Builder()\n                .setRetrofitErrorHandler(handler", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\n\tregisterRenderer(Token.class, new DefaultRenderer());\n\tregisterRenderer(ErrorEntry.class, new DefaultErrorHandler());\n\tregisterRenderer(String.class, new DefaultRenderer());\n\tregisterRenderer(Locale.", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tif (defaultCapitalize) {\n\t\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\treturn labelFactory;\n}\n\nprivate static final FacetSubQueryType getFacetSubQueryType(SearchConfig search", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "   url(r'^(?P<package_name>[\\w\\-\\]+)/(?P<release_branch>[\\w\\-\\]+)/(?P<job_id>[0-9a-f\\-]+)/detail$', JobsJobsView.as_view(),\n       ", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                       startActivity(intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));\n                    } catch (OutOfMemoryError e) { }\r\n                } else if (bitmap != null) {\n                    ImageLoader.getInstance().dispose(bitmap);", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "   account = account_for_vimeo_id(access_token.user_id, person=None)\n    account.save()\n    return HttpResponseRedirect(reverse('home'))\n\ndef sign_tumblr(request):\n    query = {\n        'api_", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "               test_px = np.sum(masked_pixels[test_px_sum:test_px_sum+1])/test_px_sum\n\n                # Compute the vignetting coeff and extinction loss\n                vignetting = test_px -", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   grid = dict()\n    grid['A'], grid['B'], grid['G'], grid['L'] = np.linspace(data[:,0].min(), data[:,0].max(), options['density'])\n    \n    # Initialize posterior\n    posterior = np.zeros(", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           Board.this.rollDices();\n          }\n        }\n      });\n    });\n    rollBtn.setPosition(getX() + (boardbg.getWidth - rollBtn.getWidth()) / 2, getY() + (boardbg.getHeight - rollBtn.", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "   yield root, f'/{path}/a'\n    comment_nodes += 1\n    pi_nodes[1] += 1\n    positions[b1] += 1\n    yield from etree_iter_paths(root, f'/{path}/a')\n\n    self", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "   async def test_detect_soft_404(self):\n        await self.runner.run_pipeline(Entry.create(\"http://example.com/test\"))\n        assert self.result.soft404 is True\n\n    async def test_no_soft_", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "   cfe = CFeCancelamento(\n            CNPJ=_opcao('123456'),\n            signAC=_opcao('assinatura_ac'),\n            numeroCaixa=_opcao('123456'),\n            emit", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "   List<User> parseUsers(InputStream inputStream);\n\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           this.client.send(req);\n    \n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        // 5. Read the signed ASiC file\n        try (FileOutputStream out = new FileOutputStream(this.getResultFile())) {\n            this", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\telif type(obj) is CalcSheetAnalysis:\n\t\treturn get_icon(\"calcsheet\")\n\telif type(obj) is Proformer:\n\t\treturn get_icon(\"proformer\")\n\telif type(obj) is Transformer:\n\t\treturn get_", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           StepCounterSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == ", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\n    public Team(String id, String name, String city, String altCity, String fullName, String tricode, String teamId) {\n        this.id = id;\n        this.name = name;\n        this.city = city;\n        this.altCity = altCity", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "       AppliveryDataManager.INSTANCE.saveAppData(AppData.feedback(userFeedback);\n        AppliveryDataManager.INSTANCE.saveAppData(AppData.feedback(userFeedback);\n        FeedbackUseCase.INSTANCE.saveFeedback(userFeedback);", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "           request[\"Key\"] = key\n            response = self.session.get_item(RequestItems=[\n                {\"TableName\": table_name, \"Key\": key, \"ReturnValues\": validate_sync(\"load\", sync=consistent)\n            ]\n            if response[\"Attributes\"]:\n", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "               print(\"Fingerprint: {}\".format(fingerprint)\n                print(\"Description: {}\".format(description)\n                print(\"Created at: {}\".format(created_at)\n            else:\n                print(\"Fingerprint: {}\".format(fingerprint)\n               ", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "   admin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, ComponentAdmin)\nadmin.site.register(Progress, ProgressAdmin)\n", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "       return RespostaExtrairLogs.analisar(retorno)\n\n    def bloquear_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.bloquear_sat`.\n       ", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "       self.assertIsNone(node_document_uri(self.elem)\n        self.assertIsNone(node_document_uri(self.document)\n\n    def test_node_children_function(self):\n        self.assertIsNone(node_children(self.elem", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   for (int i = 0; i < sorted.length; i++) {\n                    sorted[i].setStartTime(sorted[i].getStartTime());\n                }\n                break;\n\n                case START_DATE_DESC:Next line of code:\n                ", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "```\n```\nThe code above is a large Python script that implements a tool for training acoustic models using the Montreal Forced Aligner toolkit. It is a complex tool that performs various preprocessing steps, aligns the acoustic model to the corpus, and trains the acoustic model using", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   private final Builder builder;\n\n    public OAuth2Client(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient) {\n        Checks.check(clientId >= 0, \"Client ID is invalid!\");\n        Checks", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   private final Jobs jobs;\n    private final Vms vms;\n\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(restTemplate, root);\n        this.re", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "   synchronized (_lockObject) {\n        if (state != FittingConnectionState.NOT_CONNECTED) {\n            startSession(null);\n        }\n    }\n\nExplanation:\n\nThis code is part of the FittingService class, which is a service that", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "   return new SvnJavaAddCommand();\n}\n\n    protected ScmResult executeAddCommand( ScmProvider repository, ScmFileSet fileSet, String message )\n        throws ScmException\n    {\n        return new SvnJavaAddCommand().executeAddCommand( repository, fileSet", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   @Override\n    public void drawComponent(int mouseX, int mouseY) {\n        // ...\n    }\n\n    public void drawChat(int i) {\n        // ...\n    }\n\n    @Override\n    public void clearChatMessages(boolean sent) {", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "       double[] x = DATA[looptest][0];\n        double epsilon = DATA[looptest][1];\n        FiniteDifferenceSchemes scheme = FiniteDifferenceSchemes.get(looptest);\n        DoubleSad[] sad = DoubleSad.", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "           VotingModule.class,\n            SpectatorModule.class\n    };\n\n    public ModuleLoader(AthenaGM plugin) {\n        for (Class<?> moduleClass<?> moduleClass : moduleClasses) {\n            try {\n                moduleClass.newInstance();\n            module", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    */\n    public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    public static void startDownload(String url, RequestMethod requestMethod) {\n        newDownloadQueue().add(url, requestMethod);\n    }\n\n    public static", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " public void init(Config config) {\n    // register plugin properties\n    // register watcher\n    // ...\n}\n\n", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    * @throws JMingoParserException\n     */\n    private ContextDefinition parseQuerySetConfigTag(Element element) throws JMingoParserException {\n        QuerySetConfig querySet = new QuerySetConfig();\n        querySet.addQuerySet(parseQuerySetTag(element));\n", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "\n\n    def CheckIt(self,S, x):\n        # check if origin OJ and problem match\n        if S['originOJ'] != x['originOJ'] or S['problem'] != x['problem']:\n            print('Mismatch OriginOJ and Problem')", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "           left_foot_task = ContactTask(\n                self.robot, self.robot.left_foot, self.cur_stance.left_foot,\n                weight=swing_weight)\n        self.robot.ik.add(left_foot_task)\n       ", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "   BvNeg, BvNot, Extract, ZeroExtend, Repeat, Ite\n}\n\nstrategies = {\n    integers(0, 2**i for i in range(1, 10), 2**10)\n    integers(2**", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\taOutput.writeInt16(SegmentMarker.APP2.CODE);\n\t\taOutput.writeInt16(2 + aJPEG.mICCProfile.length());\n\t\taOutput.writeString(aJPEG.mICCProfile.get", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "\n            // ...\n\n            // Sendet die Sammellastschrift (ggf. als einzelnen Lastschriften) an Hibiscus\n            HibiscusExporter exporter = new HibiscusExporter(NamiBeitragConfiguration.this);\n            if", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "\nclass Pronunciations(AcousticModel):\n    # ...\n    def __init__(self, *args):\n        super().__init__(self, *args)\n        self.pretrained_path = os.path.join(self.data_directory, \"pretra", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       Lore data = LoreLoader.getLore(key);\n        if (data != null) {\n            PlayerHandler.getCollectedLore(entityPlayer).addLore(key);\n            PacketSyncLore.updateLore(entityPlayer);\n        }\n   ", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "\n    private final UserDAO userDao;\n    private final CategoryDAO categoryDao;\n    private final BudgetDAO budgetDao;\n    private final TransactionDAO transactionDao;\n    private final AuthTokenDAO authTokenDao;\n    private final Rec", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tpublic static void main(String[] args) {\n\t\t// ...\n\t}\n\n}\n\n}\n\nmisc/src/main/java/io/hummer/util/Util.java\npublic class Util {\n\nstatic {\n\t// ...\n}\n\n}", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutUp(FadingOutUp.class),\n    FadeOutRight(FadingOutRight.class),\n    FadeOutLeft(FadingOutLeft.class),\n\n    SlideIn(SlideIn.class),\n    SlideInUp(SlideIn", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "   problem = SearchSkCh(ch, der_mode=der_mode, search_mode=search_mode)\n\n    if check:\n        try:\n            ch.check_empirical_weight(verbose_level, filename)\n        except ExactWeightError:\n           ", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "           h5 = LocalHost5\n\n        return [h1, h2, h3, h4, h5]\n\n    def test_hosts(self):\n        self.hosts = self.get_hosts()\n        self.assertEqual(self.hosts, [h1,", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "           return \" \".join(\n                [\n                    self.get_tc_command(TcSubCommand.FILTER),\n                    self.get_tc_command(TcSubCommand.CLASS),\n                    self.get_tc_command(TcSubCommand.", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1.NAME", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    * @return\n     */\n    public List<Expense> getExpensesFromCreditPeriod(int periodId) {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        Cursor cursor = db.query(ExpenseManagerContract.ExpenseTable.TABLE_", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "\n    public MonthCalendar(Context context) {\n        super(context);\n        init();\n    }\n\n    public void init() {\n        layoutInflater = (LayoutInflater.from(context);\n        monthHeaderView = new LinearLayout(context);\n        monthGridView = new ViewPager(", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "   my_stream = white_noise(dur=None)\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(10) == [0] * 10\n\n  def test_finite_duration(self, dur):\n    my", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "               raise ValueError('Unable to unify type {!r} with {!r}'.format(t1, t2))\n\n    else:\n        raise NotImplementedError('TODO')\n\ndef unify_all(types):\n    for t1, t2", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "       self.account_id = os.environ.get(\"BLINK_ACCOUNT_ID\", None)\n        self.network_id = os.environ.get(\"BLINK_NETWORK_ID\", None)\n        self.host = os.environ.get(\"BLIN", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\t\treturn default_flags\n\n\tdef contextMenu(self, index: QModelIndex):\n\t\tmodel_item = index.internalPointer()\n\t\tif isinstance(model_item.data, Geometry):\n\t\t\tcontext_menu = self.create_context_menu", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "     raise MethodReturnMessage(error=exc_info[1])\n    return self.next_sink.AsyncProcessMessage(buf, stream, headers)\n\n  def AsyncProcessResponse(self, sink_stack, context, stream, msg):\n    try:\n      self._serial", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       assertThat(out.toString(), startsWith(\"Dump of Java threads:\"));\n    }\n\n    @Test\n    public void jmxRemoteConnectViaJar() throws Exception {\n        TestThread.JMXProcess process = disposer.register(TestThread.runJmx", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       return new DrumStoreEntry<>(data);\n    }\n}\n\n    public void reset() {\n        // Reset the data store\n        dataStore.reset();\n    }\n\n    public void writeEntry(DrumStoreEntry<?> entry) {\n        dataStore.", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \"个", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       return new RoxanaPropertiesMockBuilder.withLocale(Locale.US).build();\n}\n\n}\n\nThe tests in this file test the following functionality:\n- Processing of a multi-business exception with multiple parameters\n- Processing of a constraint violation exception\n-", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self._SendMessage(self._ping_msg)\n    self._ping_msg = None\n\n  def _CheckInitialConnection(self):\n    raise NotImplementedError()\n\n  def Close(self):\n    self.isActive = False\n    self.isOpen =", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "   assert freq2lag(v) == -lag2freq(v)\n\n  def test_conversion_range(self, v):\n    f = freq2lag(v)\n    assert f == v - 1\n    assert f == -lag2freq(", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "   async def load_config(self):\n        await self.load_config_async()\n\n    async def load_config_async(self):\n        await self.load_config()\n\n    async def save_config(self, config_name, config_value):\n        try", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   return operands[0].evaluate(context) if operands[0].symbol == '?' else operands[0].value\n    else:\n    return operands[1].evaluate(context)\n\n@method('eq')\n@method('ne')\n@method('lt", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setText(getResources().getString(R.string.app_name));\n        welcomeString.setBackgroundResource(R.color.white);\n        welcomeString.setLayoutParams(new LayoutParams(LayoutParams.WRAP_LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "           // Fragment to notify\n            classToNotify.notify(new ChatRegisteredParam(newChatId, success);\n        } else {\n            // Fragment to notify\n            classToNotify.notify(new ChatRegisteredParam(newChatId, false);\n       ", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       MchPayResponse response = wxPayClient.pay(request);\n        Assert.assertEquals(response.getResultCode(), \"SUCCESS\");\n        Assert.assertEquals(response.getAppId(), appId);\n        Assert.assertEquals(response.getMchId(), mch", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "       assertEquals(creator.getKey(), key);\n    }\n}\n\n}\n\n\n", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "\n    public int readSmallIntValue(int d1) throws IOException {\n\tint value = d1 & 0x7f;\n\tif (value == 0x7f) {\n\t\tthrow new IOException(\"Value is negative: 0x\" + value);\n\t", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "   def get_version_map(self):\n        return self.flavors.get_version_map()\n\n    def get_http_client(self):\n        return self.http_client\n\n\n    def authenticate(self):\n        self.http_client.authentic", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "           AlpineLinuxPingParser,\n            MacOsPingParser,\n            NullPingParser,\n        )\n\n        for parser_class in parser_list:\n            try:\n                return parser_class.parse(ping_lines)\n            except pp.ParseException:\n", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "           m.videoSetFrameRate = newSCTextField(Integer.toString(Main.DEFAULT_VIDEO_FRAME_RATE), 120, 1, 10);\n            m.videoSetFrameRate.setColumns(3);\n        }\n\n        //", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "           self.probe_adjacency_list = probe_adjacency_list\n        self.join_size = join_size\n        self.channels_per_group = channels_per_group\n        self.thresholds = thresholds\n        self.filter =", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "   protected ResponseHandler() {\n        return new ResponseHandler();\n    }\n\n    class ResponseHandler implements ResponseHandler {\n        @Override\n        public void handleResponse(final Response response) {\n            // Process response.\n        }\n    }\n}\n\n    @Override\npublic final", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "     self.analyze()\n\n    return self._cdg\n\n  def compute_conditions(self):\n    self.analyze()\n\n  def analyze(self):\n    self.build_graph()\n    self.build_dominator_tree()\n    self.build", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       // Initialize qr code generator\n        QR.init(false);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.qr_code_fragment", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "   accept(betweenExp);\n  public void visit(final SetClause setClause) throws QueryException {\n    result.append(\"SET \");\n    accept(setClause);\n  }\n\n  public void visit(final ExpSeq expSeq) throws QueryException {\n    result.", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\tFile baseFile = new File(basePath + \"/input.dif\");\n\t\tFile transformedFile = ddi2xforms.generate(baseFile, null, \"survey\");\n\t\tFile transformedFile2 = ddi2xforms.generate(baseFile, null, \"", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "   self.assertRaises(TypeError, self.discrete_dist.draw(1))\n\n    def test_draw_events(self):\n        self.assertRaises(TypeError, self.discrete_dist.draw_events(1))\n\n    def test", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "       state = stateFactory.createState(VastAdInteractionSandBox.class);\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n        //vpaid state\n        state = stateFactory.createState(VpaidState.class);\n", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptString(StringTag tag, TagValueConsumer consumer) {\n\t\tString value = tag.value();\n\tif (value != null) {\n\t\tisValid(tag).accept(value, consumer);\n\t}\n\t}\n}\n\n\n\n", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "\nThis is a test case for the functions in the upload_contacts_from_file module.\n\nHere are the tests:\n\n- test_determine_mother_tongue tests the determine_mother_tongue function to check if it returns the correct value for different", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       expectLastCall().andThrow(new ExpectedException());\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                                .givenArgument(() ->\n                               ", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "       if rem:\n            # map the remaining bits\n            self.map(shtr(string)[:-1])\n\n# End of code\n\n# RestOctets\nclass P1RestOctets(RestOctets):\n    # add P1 field\n    def __init__(", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "   validate_table(model, model)\n    validate_sync(model.sync, model.sync)\n\n    # Check for conflicts\n    validate_table_conflicts(model, model)\n    # Create the table\n    create_table(model, model)\n\n    #", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "       return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def bloquear_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.bloquear", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "   engine.bind(1, \"model\")\n\ndef test_bind_non_model_error(engine):\n    with pytest.raises(InvalidModel):\n        engine.bind(1, \"model\")\n\ndef test_bind_column_non_model(engine):\n", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "   assert u6.dimensions == mass\n    assert u6.base_value == 1.0\n\n    # nonzero cgs conversion factor\n    u7 = Unit(\"1.0e23 * m**3 * kg\")\n    assert u7.dimensions == volume\n", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "\n    '    assert_rc(exp_rc, rc, stdout, stderr, desc)\n']\n\n    #\n    #  class command\n    #\n    ['Verify class command --help response',\n     ['class', '--help'],\n     {'stdout': CLA", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       loadModules();\n    }\n\n    private void initializeFiles() {\n        // Load economy modules\n        loadModule(LoanModule.class);\n        loadModule(PayModule.class);\n        loadModule(SetAllModule.class);\n        // Load currency modules\n        load", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "   try:\n        tag = get_tag(index, name)\n    except FmodError as e:\n        if e.code == FMOD.RESULT.TAGNOTFOUND:\n            # Tag not found\n            return None\n        raise e\n    return tag\n\n   ", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   @Override\n                    public void onResult(int requestCode, int resultCode, Intent data) {\n                        super.onResult(requestCode, resultCode, data);\n                    }\n    }\n}\n\npublic void showNewAccountActivity() {\n    startActivity(", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t@Path(\"page\") int page );\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<ImgurResponse", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "       resource = ThermometerResource(aircraft.thermometer)\n        thermometer_data = resource.get()\n        self.assertAlmostEqual(aircraft.thermometer.temperature, thermometer_data[\"temperature\"], 3)\n\nclass InitialConditionTests(Test", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "   column = User.age\n    value = 3\n    expected_ref = \":v0\"\n    expected_action = actions.set({\":v0\": \"3\"})\n    expected_values = {\":v0\": expected_action.value}\n\n    ref, action =", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "\t\t    Platform.runLater(new Runnable() {\r\n\t\t\t\t@Override\n\t\t\tpublic void run() {\r\n\t\t\t\tAlert alert = new Alert(AlertType.INFORMATION, \"Error requesting daemon:\\n\" + e.getDump().", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "           if nodes.count() == 0:\n                vote_diff = 1\n            vote_diff = -1\n            ...\n\nI have a few questions regarding the code:\n\n1. Why is the `if nodes.count() == 0:` check done? What is it checking", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "\n    Call<EmojiResponse> getEmoji();\n\n    // ...\n\n    // ...\n}\n\n\n\n\n\n\n\nThe code you provided has the following issues:\n\n\n1. The `MediaFilter` class has a `@Retention(RetentionPolicy.", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "           of(mConnectionErrorCode).ifPresent(ConnectionErrorCode::errorConnect);\n        }\n    };\n\n    @NonNull\n    private final WifiStateReceiver mWifiStateReceiver = new WifiStateReceiver() {\n        @Override\n        public void onWifiEnabled", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "           LightSensorCollector.flushDBCache(deviceID);  // Flushes the cache for light sensor data\n        }\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID); // Flushes the", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for ( card : stack.getCardList()) {\n            card.removeListener(this);\n        for (Card card : stack.getArchivedCards()) {\n           ", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "from montreal_forced_aligner.corpus import AcousticCorpusMixin\n\n", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(restTemplate, root);\n        this.releases = new SpringReleases(restTemplate, root);\n        this.st", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       result = self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(tag), name)\n        return tag.value\n        ...\n    def get_length(self):\n        \"\"\"Retrieve the length of the sound in seconds.\n\n        :", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "\ndef process_section(self, bit_operator, section):\n    # ...\n\ndef process_template(self, bit_operator, template):\n    # ...\n\ndef process_code_flag(self, bit_operator, descriptor):\n    # ...\n\ndef process_", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "       form = ReportAbuseForm(request.POST)\n        report_id = form.cleaned_data['report_id']\n        comments = form.cleaned_data['comments']\n        moderator = request.user\n        log_moderator_event(AbuseReport.", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   public void listenToResultSet(AbstractMeter meter, AbstractResult result) {\n        // nothing to do\n    }\n\n    public void listenToException(AbstractPerfidixMethodException exec) {\n        // nothing to do\n    }\n\n    public void print() {\n", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "       // calling the appropriate ProtTest facade\n        ProtTestFacadeMPJ protTestFacadeMPJ = ProtTestFacadeMPJ.getInstance();\n        // calling the appropriate ProtTest facade\n        ProtTestFacadeSequential protTestFac", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\ttropo.record(URL(\"https://example.com/recording\", true, false, false);\n\t\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "\t        // Se a resposta fornecia, cria uma nova resposta com o valor e comentario do usuario.\n\t        // Se a resposta for correta, atualiza a nota final.\n\t        // Se a resposta for errada, remove a resposta", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t    public void onReceive(byte[] response) {\n\t\t\t    String json;\n\t\t\t    try {\n\t\t\t\t    JSONObject jobject = new JSONObject(json);\n\t\t\t    } catch (JSONException e) {\n\t\t\t\t   ", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   @Inject\n    PlayerModule defaultModule;\n\n\n    @Before\n    public void setup() {\n        playerFsm = new FsmPlayerImperial(defaultModule.provideStateFactory());\n        playerFsm.setController(new PlayerUIController());\n        playerFsm", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\tif (e.getSource().getWindowState() == Window.MINIFIED) {\n\t\t\t\t\tstage.close();\n\t\t\t}\n\t\t\t}\n\t});\n\t\t\n\t\tsuper.start(stage) ;\n\t}\n", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "   JavaFile.write(new JavaFile(type.getQualifiedName(), type.getPackageName(), type.getEnclosingElement().getKind(), type.getModifiers(), type.getEnclosingElement().getJavaSourceVersion());\n    StringBuffer buffer = new StringBuffer();\n", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "           new EnableReceiveNotifyApi().enableReceiveNotifyMsg(enable);\n        }\r\n    }\r\n}\r\n}", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "   assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 1\n\ndef test_parameters_msgtype3():\n  '''\n  All Zero", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "\n    return path\n\ndef evaluate_path_expression(self, context=None):\n    if context is None:\n        raise self.missing_context()\n    elif isinstance(context, XPathSchemaContext):\n        return None\n    elif not self:\n        if context.item", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "\ndef dropnan_table(table):\n    for column in table.keys:\n        isnan = np.isnan(table[column].astype(np.float))\n        # Drop in data\n        table[column] = table[~isnan]\n        # Get index\n", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               TypingMessage m = (TypingMessage)message;\n                if (m.isTyping())\n                    {\n                    _isTyping = true;\n                }\n            }\n        }\n        }\n    }\n\n    synchronized (_lockObject)\n    {", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\tTvalues_A = glm_typeI(dmy_rightvar,\n\t\t\tEXOG_A,\n\t\t\tdmy_covariates=dmy_covariates,\n\t\t\toutput_fvalues = False,\n\t\t\toutput_t", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "       ThreadDumpRuntime runtime = new ThreadDumpRuntime(new ThreadDumpThread.Builder(\"main\", main);\n        ThreadDumpThread thread = runtime.createThread(main);\n        assertThat(thread.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n        assert", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               //  EditText text\n                mTimeText.setText(mTime.toRecordTime());\n                //  Weather Icon\n                mWeatherView.setImageResource(WeatherIcon.getWeatherIcon(mRecord.getWeather()));\n                break;\n\n            case R", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GyroscopeSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 5 || type == 0) {LightSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 6 || type == 0)", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   private SetOtherFragment setOtherFragment;\n\n    private TabLayout tabLayout;\n\n    private ViewPager pager;\n\n    private XposedHookZygoteInit.StartupParam startupParam;\n\n    private XpNavBarSetting mXpNavSetting;\n\n\n\n\n   ", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "\n        self.run()\n\n    def ntp_setup(self):\n        # make sure the clock is accurate\n        self.ntp_server = \"ntp.pool.ntp.org\"\n        self.ntp_server_port = 123\n        self", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "   assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "       return RestfulModelCollection(Webhook, self)\n\n    def get_availability(self):\n        return self.scheduler.get_availability()\n\n    def get_page_slug(self, slug):\n        return self.scheduler.get_available", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "       // activityLightLevelChanger.setNightMode(false);\n        // activityLightLevelChanger.setAutoUpdatePointing(true);\n        // activityLightLevelChanger.setFieldOfView(180);\n    );\n  }\n\n  private void checkForS", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "           non_equilibrium_thermochemical_error = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_ther", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "   ]\n    def __len__(self):\n        return self.Len\n    def __call__(self):\n        return self.MSCm1()\n    def map(self, string):\n        self.map_bit(string)\n        return self.MSCm1()\n", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "   TcClassParser(self.__con).parse(\n        device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n    )\n\n    def __parse_iptables(self, device):\n        iptables = I", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "   result, index = apply_fast_eq(left.values, right.values, left.index, right.index)\n    return Column(result, index)\n\ndef apply_ne(left: Column, right):\n    if type(right) == Column:\n        result, index", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "   with pytest.raises(validation_error) as excinfo:\n        validate_response(response, fake_validator_map)\n    assert isinstance(excinfo.value, RequestValidationError)\n    assert 'Could not validate response' in str(excinfo.value", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
