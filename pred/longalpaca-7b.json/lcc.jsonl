{"pred": "\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t{\n\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\tif ( pl == null )\n\t\t\t\tcontinue;\n\t\t\tfor", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tif data[self.attr] == 0:\n\t\t\t    continue\n\t\t    # print 'This edge', e_key, e_u, e_v, data\n\t\t    # do something with edge\n\nThe code is a modified version of the Edmond", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r')\n        # Open the file for reading\n        b = Sndfile(ofilename, 'w', format='wav', channels=1, samplerate=2050)\n        # Open the file for writing\n", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "   unisubs_page = VideoPage(\"https://unisubs.com/videos/12345678\")\n    unisubs_page.open_video_page(\"12345678\")\n    print(unisubs_page.video", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\tOLValue value = (OLValue) value;\n\t\t\t\twriter.addAttribute(\"name\", value.getName());\n\t\t\t\twriter.addValue(value.getDefault());\n\t\t\t}\n\t\t}\n\t\t\n\tpublic Object unmarshal", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "       self.qsw.addWidget(self.notifications)\n        self.q dw = qdw\n        self.qsw.addWidget(self.qdw)\n        self.q dw.show()\n\nI'm getting an error message saying that the following line is incorrect:", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.SendMessage(\"\");\n                    mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account);\n                    break;\n", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                s.println(cert);\n            s.println();\n        }\n    }\n}\n    //\n * CertificateRequest ... CLIENT --> SERVER\n *\n * Client asks server to validate its certificate chain.\n", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           sp = new JESpace(name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public static void removeSpace (String name) {\n        spaceRegistrar.remove (name);\n        JESpace", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t}\n\t}\n\t\n}\n", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       response = self.dispatcher.dispatch(request)\n\n\n    def do_get(self, environ, start_response):\n        path = environ.get('PATH_INFO').lstrip('/')\n        query = environ.get('QUERY_STRING')\n        if path != \"\"", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       mark = \"setRepeated('%s');\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_id):\n        mark = \"unsetRepeated('%s');", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "           return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            return result\n    def action_move_files", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tz = (Identity) a.Union (b);\n\t\t\tAssert.IsTrue (Same (a, z);\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z);\n\t\t}\n\t}\n\t[Test]\n\tpublic void", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       return CompositeX509KeyManager(self.trust_managers).chooseClientAlias(key_type, issuers, socket)\n\n\nI'm trying to implement a custom SSL context that can use multiple keystores and truststores, each of which can be loaded", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "   request.setAttribute(\"domainInfo\", manager.getDomain(domain));\n}\n}\n}\n\n\nThis is a Java action class for the domain administration page in the JAMM web application. It loads data from the MailManager and puts it into the request's attributes. It then forwards", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "```\n\nI am trying to create a custom encoder class that inherits from the `SubprocessEncoder` class and overrides the `get_cmd_line` method to generate a custom command line for the encoder. However, I keep getting an error message saying that the `get_cmd_", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\tif (option1) {\n\t\t\t\t//do something with the jumpID\n\t\t\t\t// ...\n\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n}\n\nPlease help me to complete the code so that when the user clicks", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "   String[] argMessages = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            argMessages[i] = getMessage(application, request, args", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\tDataManager.persons = loadFromFile();\n\t}\n}\n}\n\nI'm trying to create a data manager class that can handle different types of data:\n- Person data\n- Firm data\n- Timed data\n- Server data\n\nThe class has methods", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t@Override\n\t\tprotected void createFieldEditors() {\n\t\t\taddField(new IntegerFieldEditor(SHELL_HEIGHT,\n\t\t\t\t\"Window height\", getFieldParent());\n", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "           m_Owner.FinishSequence();\n            }\n        }\n    }\n}\n}\n\nPlease help me fix the following issues:\n\n1. The AddEntry and RemoveEntry methods in the InternalTimer class are not properly implemented.\n2. The InternalTarget class is not", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "   def _expunge_all(self):\n    def _deactivate(self):\n    def _remove_snapshot(self):\n    def _rollback_impl(self):\n    def _commit_impl(self):\n    def _prepare_impl(self):\n   ", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\tfor(IField f : fields) {\n\t    final String name = f.getDeclaringClass().getFieldName().toString();\n\t    List<IField> named = name2Field.get(name);\n\t    if (named==null) {\n\t\t    named", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   like r'/foo/*' in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if self.request.path.endswith(\"\"):\n            if self", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t\n}\n}\n}\n\nThis code is a sample implementation of the System.Web.UI.WebControls.MultiView control, which is used to display multiple views in a web page. It provides a way to switch between views", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   wd = WigleDownloader(args.user, args.password, args.coordfile, args.outpath)\n    wd.run()\n\n   \n    \"\"\"\n    def __del__(self):\n        print >> sys.stderr, 'Deleting W", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 152 && mod <= 15)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                    foreach (SkillName sk in Imbuing.PossibleSk", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds.append(make_download_link(product, version, platform, locale, force_direct=force_direct, force_full_installer=force_full_installer, force_funnelcake=force_funnelcake))\n    else:\n        builds.append", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (stateBeansList==null || stateBeansList.isEmpty()) {\n\t\t\t// Check if the state bean is not allowed\n\t\t\tif (StateBean.getAllowedState(objectID, projectID, issueTypeID, serializableBeanAllowedContext.get", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                var member = memberList.Find( x => x.Name.Value.Equals( argument.Value.Text ) );\n                if (member != null) {\n                    argument.Value = member.Value;\n                    toReplace", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self.get_item_from_modulestore(self.split_test_usage_key, verify_is_draft=True)\n        self.assertEqual(0, split_test.user_partition_id)\n        self.assertEqual(1,", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           // Write the font descriptor\n            writer.WriteObject(GetFontBaseType(piref, subset, GetCIDFontType2(piref, null));\n            // Write the ToUnicode CMap\n            writer.WriteObject(GetToUnicode(null);\n           ", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\tPoint2D p = cell.getLocation();\n\t\t\t\t\tPoint2D p2 = new Point2D.Double(p.x*xScale, p.y*yScale);\n\t\t\t\t\tp2.x += xOffset;\n\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<Bitmap>(callable);\n        bitmapReference = new SoftReference<Bitmap>(bitmapReference = new Bitmap());\n      }\n    }\n    public void addListener(FutureTaskListener listener) {\n      task.addListener(listener);\n    }", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!TF.getText().equals(down)) {\n                    msgTF.setText(down);\n                }\n            }", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   @navigator.register(Node, 'All')\n    def step(self, *args, **kwargs):\n        self.prerequisite_view.select('Compute', 'Containers', 'Container Nodes')\n\n    def resetter(self):\n        # Res", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\tfor (IRecognitionListener listener : recognitionListeners) {\n\t\tlistener.onRecognition(timestamp, sequencesTitles);\n\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, FlPose pose) {\n\tfor (IJ", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               base.RenderControl(writer);\n            }\n        }\n    }\n    }\n}\n}\n\nPlease help me complete the code by adding the necessary code to make the button click event handler and the script descriptors.\n\n\nAnswer: Here is an example of how you could complete", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n\"damageCooldown = 8; markDirty();\"\n\nThis code sets the damageCooldown variable to 8 and marks the tile entity as dirty.\n\n\nMy question is:\n\nHow can I modify this code to make the damageCooldown variable update every time", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return \"Effect{\"probability\": probability}\";\n    }\n}\n}\nI have several questions:\n1. What is the purpose of the \"Scope\" class?\n2. What is the purpose of the \"addScope\" method?\n3. Why is the \"Scope\" class defined", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'ity': 'fqdn',", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "```\nThe above code is a test class for the MongoDB `mongoengine` module's `Delta` class. It contains methods to test the delta tracking functionality for various types of documents, including `Document`, `DynamicDocument`, `EmbeddedDocument`, and `DynamicEmbeddedDocument`. The `", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "           self.plot_line(x, y, sel_dim=sel_dim)\n        else:\n            self.plot_line(x, y, sel_dim=sel_dim)\n    def plot_line(self, x, y, sel_dim=False):\n       ", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "\n                if (toScan.Add(path))\n                {\n                    _rootFolderService.ForEach(x => x.Scan(path);\n                }\n            }\n        }\n        }\n    }\n}\n}\n\nI hope this is correct, but I am not", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\treturn read(key, computed);\n\t}\n\t}\n}\nThe code is a bit complex, but the main idea is that it provides a way to transform the values of a map, but not the keys. The transformations are applied when the values are accessed, not during construction.\nThe three", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       resbrains = pdt.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\n            if contobj.isDiscussable():\n                canReply = canreply(conto", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\tset { m_ID = value; }\n\t}\n\tpublic int m_X;\n\tpublic byte m_Y;\n\tpublic short m_Hue;\n\tpublic byte m_Block;\n\tpublic int m_Height;\n\tpublic int m_Width;\n", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   // Get the parcel's voice channel\n                    // XXX: we need to cache the channel\n                    // for future requests\n                    // XXX: need to send the channel_uri back\n                    // to the client\n                    // XXX: for now: just return channel_", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\ttextDateStart.Text=PayPeriodCur.DateStart.ToShortDateString();\n\t\t\t\ttextDateStop.Text=PayPeriodCur.DateStop.ToShortDateString();\n\t\t\ttextDatePaycheck.Text=PayPeriodCur.DatePaycheck.", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Skip the line after the column headings.\n        next(file_handle)\n        # Make a list of data lists to hold the data for each column.\n       ", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   return authz.is_authorized('package_update', context, pkg_dict)\n```\n\nI've added comments to explain what each part of the code does. However, there are several issues with the code:\n\n\n1. The `authz` module is imported twice", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\tcurrentResultSet.setValue(predictedLabel, outcomes[resultIndex]);\n\t\t\tconfidences[resultIndex] = Math.pow(confidences[resultIndex], 1d / depths[resultIndex]);\n\t\t\tdefaultConfidence = 1d", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "       }\n        #endregion // Methods\n    }\n}\n\\end{code}\n\nThe code above is for an abstract class that represents a Trados 207 language direction. It has some properties and methods that are inherited from `ITranslationProviderLanguageDirection`. It also", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           return _range.contains(codePoint);\n         } else {\n            return -1;\n         }\n      }\n   }\n   static class NotSet extends AbstractCharNode {\n      private final boolean[] _asciiNotSet;\n      private final IntSet _range;\n     ", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "   // the study form must be valid for the given accession number\n    if (studyForm == null || studyForm.length() == 0) {\n      return ValidationResults.SAMPLE_NOT_FOUND;\n    }\n    // check the study form against the accession", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\tDropClient(newConn);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar player = handshake.Player;\n\t\t\tnewConn.Player", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t{\n\t\tcoll.add((CatsReferralPendingEmergencyNonEDAdmissionListVo)beans[i].buildVo());\n\t}\n\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "   viewsdb()\nexcept Exception, e:\n    print \"Error:\", e\n    xbmc.executebuiltin(\"Notification('Error\", 5000, 'skin.qonfluence')\ndef main():\n    xbmc.executebu", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret);\n            return ret;\n        }\n    }\n}\n}\n\\end{code}\n\nPlease modify the code to work with any", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' )\n  #Return the plot\n  return plotName\ndef __getUniqueKeyValues(self, typeName):\n    userGroup = getSelectedGroup()\n    if 'NormalUser", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPoints(bot.GetRallyPoints(self.World.RallyPointScanRadius));\n\t}\n}\n}\n\nI have a few questions:\n\n1. What is the purpose of", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       return plan;\n    }\n}\n}\nPlease help me complete the rest of the code. I have added comments to explain what each part does. The method compileAdHocPlan() compiles an ad-hoc query and returns the head of the plan. The other methods compile a statement with", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\tthis.comboBox1.Size = new System.Drawing.Size(168, 21);\n\t\tthis.comboBox1.TabIndex = 0;\n\tthis.comboBox1.Text = \"\";\n\tthis.comboBox1.Click += new System.", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\tdcb.BaudRate = baud_rate;\n\t\tdcb.Parity = parity;\n\t\tdcb.StopBits = bits;\n\t\tdcb.Handshake = hs;\n\t\tSetCommState (handle, dcb);\n", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       page = self.get_page(self.user.get_profile().get_url(),\n                     login_as=admin)\n        self.assertEquals(page.context['cobrand'], cobrand)\n        self.assertEquals(page.context['for_user'],", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   test = TestMethods()\n    test.setUp()\n    test.tearDown()\n    test.test_check_tempdir()\n    test.test_check_nolower()\n    test.test_check_no_metadata()\n    test.test_check_", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\tif newList:\n\t\t\t\tself.list.setList(newList)\n\t\t\t\tself.oldList = newList\n\t\t\t\tself.list.setCurrent(0)\n\tdef getAccessPoints(refresh=False):\n\t\tdata =", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               return new Rectangle(0, fontY, fontX, fontX, baseline);\n            }\n        }\n    }\n}\n}\n\nI am having trouble with the GetChecksum method. I am getting an error on the line:\n\n\"char chk = 0", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return Arrays.asList(results);\n  }\n}\n}\n\nThe above code defines a set of utility methods to work with Properties objects in a more Java-like way.  It provides methods to:\n\n- Check if a property exists and its value is not \"false\", \"", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(0, 90, 0.5)\n        sample_points = [\n            (\"longitude\", x_points),\n            (\"latitude\", y_points),\n        ]\n        result = traj_interpolate(test_", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetText(currPacket.ToClipboard());\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            SavePacket(GetCurrentPacket());\n        }\n        private void toolStripButtonRe", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "   else:\n        print '\\03[32;31;40m'\ndef print_info(info):\n    print '=============================='\n    print_color(info)\n    print_info\ndef main():\n    # build the dataset\n    wav", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "       public void RemoveAll(T key)\n        {\n            return _refSet.Remove(key);\n        }\n    }\n}\n}\n\\end{code}\n\n\nI'm trying to understand how the RemoveAll method works. It removes a key from the collection regardless of", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.treeView1.Nodes.AddRange(new System.Windows.Forms.TreeNode[] {\n            treeNode1,\n            treeNode28,\n            treeNode63});\n\nEnd Region Windows Form Designer generated code\n\n}\npartial void InitializeComponent()\n   ", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   def __del__( self ):\n        for name in self.EXPORTED_NAMES:\n            delattr(self, name)\n        del self\n\nSo the question is how to use this code to create a platform-specific implementation of a function?\nFor example, to create a", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           baos.writeInt(emptyStreams.size());\n            baos.writeInt(emptyStreams.hashCode());\n            header.write(baos.toByteArray());\n        }\n    }\n    private void writeFileEmptyFiles(final DataOutput header) throws IOException {", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "       if (System.currentTimeMillis() - start > rampDelay)\n        {\n            alphaLevel += (float) (rampUp ? 1.0 : - 1.0);\n            if (alphaLevel > 1.0)\n            alphaLevel = 1.", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_be_removable_and_should_allow", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "               if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, can", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "\n\nThis code is a Python implementation of the GALF configuration file reader and writer. It reads in a GALF configuration file and writes out the corresponding FITS files for the input image, noise image, and PSF. The configuration file is read in using the `readlog` function from the", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += (b & 0x08) << 2);\n                    i += (b & 0x04) << 5;\n                    i &= 0xFF;\n                    break;\n                case 0x02:\n                    /* C", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self.studio_outline_as_json['location']\n    def _install_course_updates(self):\n        \"\"\"\n        Install course updates.\n        \"\"\"\n        self.add_course_details(self.course_details)\n        self.add_update(", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\tchance = Float.parseFloat(splitNumber[1]);\n\t\t}\n\treturn (int) (chance*100);\n\t}\n}\n\n}\n\nThe above code is a Mine", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "       if cert_type is None:\n            # Download both cert files from the api host\n            types = ['key', 'cert']\n            for cert_type in types:\n                try:\n                    # If we can't open the file it's not there, so we should download", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.tabPrivacy.Controls.Add(this.chkPrivacy);\n            this.tabPrivacy.Location = new System.Drawing.Point(19, 20);\n            this.tabPrivacy.Name = \"tabPrivacy\";\n            this", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       for plugname, plug in self.loaded_plugins:\n            try:\n                plug.collect()\n            plugruncount += 1\n        self.ui_log.info(\"%d plugins ran\" % plugruncount)\n        self.ui_log.info(\"", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "   getRoomFullName.produce = lambda s: s.getRoom()\n    getRoomFullName.convert = Conversion.roomFullName\n    def getSlot(self):\n        \"\"\" Session slot \"\"\"\n    getSlot.produce = lambda s: s.", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                   }\n                return true;\n            }\n            }\n        } else {\n            MessageImporter importMethod = new MessageImporter() {\n                @Override\n                public ImportResult import(Message message) throws ImportException {\n                    try {\n                    parent.mirthClient", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\tlayer = (int) value;\n\t\t\t} else {\n\t\t\tlayer = Integer.parseInt(value);\n\t\t}\n\treturn layer;\n\t} catch (Exception e) {\n\tthrow e;\n\t}\n}\n\npublic void dispatch(", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null && currentSession.getState() == Session.CREATED_TOKEN_LOADED) {\n            user = currentSession.getActiveUser();\n            userProfilePic = new BitmapDrawable(getResources().getDrawable(R.drawable.ic_", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.strength;\n\t\tfor (int i=0; i<influences.length; i++)\n\t\t\tsum += influences[i][0] * influences[i][1", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "               'property1': 2, 'property2': 3\n            }\n            ]],\n            self.build.stages_to_list())\n    def test_to_xml(self):\n        \"\"\"Test exporting as XML\"\"\"\n        # read and parse sample file\n", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   LongRad = LongOrigin * _deg2rad\n    Long = (phi1Rad + LongRad*_deg2rad)\n    # compute the latitude\n    LatRad = phi1Rad*_rad2deg\n    Lat = LongRad*_deg2rad\n    Lat = Long", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       if request.POST['reason']:\n            reason = request.POST['reason']\n            messages.error(request, \"Report failed!\")\n            return HttpResponseRedirect(reverse('profile')\n        else:\n            report = ReportUser.objects.create(user=user, reason=", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   class ProductAddView(ProductAddSeriesView):\n        @cachedproperty\n        def series_batch(self):\n            # ...\nclass ProductRemoveSeriesView(ProductAddSeriesView):\n        @cachedproperty\n        def series_batch(self):\n            # ...\nclass Product", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.Yes;\n\t\t\tform.RightToLeftLayout = true;\n\t\t}\n#endif\n}\n}\n}\n\nThe code is a C# class that contains a collection of translations for a password manager application.", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n            //write the bytes to the array\n            for (int i = 0; i < size; i++)\n            {\n                arr[i] = (byte) (temp & 0xFF);\n            }\n        }\n       ", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "           new_positional_tags_list.append((flag, regex)\n        return new_positional_tags_list\n    def build_dir_regex(build_dir_regex):\n        if build_dir_regex:\n            return build_dir_regex\n        else:\n", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "           return new object[0];\n            }\n            public override Type GetCustomAttribute (Type attributeType)\n            {\n                return new Type[0];\n            }\n        }\n    }\n}\n\nThis code is for a custom generic parameter class, MethodGenericParameter, TypeGenericParameter", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "```\nThe code defines a series of classes representing OBD-II packets, each with a name and a list of fields that describe the contents of the packet.  The fields are defined using various Scapy field types, such as `BitField`, `ScalingField`, `XByteEnumField`, and `", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\tbus.add_signal_receiver(ready_pipe, 'Ready', 'org.freedesktop.DBus')\n\nThis is a mock implementation of the freedesktop.org secret service. It defines a set of objects and interfaces that follow the freedesktop.org secret protocol. It", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "\n            if (Core.SE)\n            {\n                index = this.AddCraft(typeof(RunedPrism), 104294, 107465, 45.0, 95.0, typeof(BlankScroll), 1", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "   def after_this_request(f):\n        # ...\n\nExplanation:\nThis code defines several decorators and functions that help manage the request and application contexts. The main decorators are:\n\n* `after_this_request`: Decorates a function to execute after this", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n##########################################################################################################################\ndef _", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(r);\n            }\n        }\n        return result;\n    }\n}\n}\n", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       axis_proj = _axis_in_detector(ray_trafo.geometry)\n    else:\n        axis_proj = _rotation_direction_in_detector(ray_trafo.geometry)\n    # Compute angles\n    phi = np.arctan(", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "           logger.log(u\"Proxified RE: \" + regx, logger.DEBUG)\n        return regx\n    def getSearchResults(self, url):\n        return self.getURL(url, post_data=None, timeout=30, json=False)\n   ", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn fmt.Format (type.ToString () + \" \" \" + unit: \" + unit.ToString ();\n\t}\n}\n}\n\n\n}\n\n\n\n\nThe code above is a class definition for a FontUnit struct that represents a font size in a web control. ", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\tthrow new InvalidCipherTextException(\"BlockLength does not match modulus for Naccache-Stern cipher.\");\n\t\t\t}\n\t\t// Add the two blocks mod sigma\n\t\tBigInteger result = (block1[0] + block2[0", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar outer = (JObject)obj.Properties[\"The outermost value\"];\n\t\t\tAssert.That(outer.Type, Is.EqualTo(TokenType.Object));\n\t\tAssert.That(outer.Properties[\"In this test\"], Is.EqualTo(\"It is an", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "           for (int w = 0; w < width; w++) {\n                edges.add(new T2<String, String>(getVertexTopic(w, h), getVertexTopic(w, h));\n            }\n        }\n            return edges;\n        }\n       ", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   iso = isoelastics.Isoelastics(ds)\n    iso.get(col1=keys[0], col2=keys[1], channel_width=30, flow_rate=0.16, viscosity=23, lut_", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       // Compare graphs from file1.rdf and file2.rdf\n        AbstractTripleStore expected = bulkExport(new File(\"file1.rdf\");\n        AbstractTripleStore actual = bulkExport(new File(\"file2.rdf\");\n        // compare graphs\n       ", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "       assert self.test_lowest_spotprice() == 0.1020\n\n    def tearDown(self):\n        pass\n\n    def test_check_for_alert_history_empty(self):\n        history = [u'']\n        assert alert.", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tdownloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile != null) {\n\t\t\t\treturn performInstallation();\n\t\t\t}\n\t}\n\treturn false;\n}\n}\n}\nPlease help me complete the code by", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\tSDL.SDL_GL_DeleteContext(context);\n\t\tcontext = IntPtr.Zero;\n\t\t}\n\t}\n}\n}\n```\n\nThis code is a graphics context class for SDL2 that provides an API similar to the OpenGL API. It has methods", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._project_cov_mat(\n            self.x_data_cov_mat, self.y_data_cov_mat, self.x_model, self.parameter_values)\n        \"\"\"\n   ", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       CmsLink link = new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type);\n        return link;\n    }\n}\n}\nThe code is part of the OpenCms content management system, which is a Java-based", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                   adminUser = getEucalyptusAdmin();\n                    noCanonicalIdAccountIds.add(walrusObject.getOwnerId());\n                } else {\n                  accountIdAccountMap.put(walrusObject.getOwnerId(), owningAccount);\n               ", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        #endregion\n    }\n}\n}\n\n}\n\nThis code defines an extension point called FolderExplorerComponentViewExtensionPoint that is used to extend the", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplate command = setupVolumeFormatAndTypeTest(VolumeFormat.RAW, VolumeType.Preallocated, StorageType.NFS);\n        CanDoActionTestUtils.runAndAssertCanDoSuccess(command, EngineMessage.VM_CANNOT_IMPORT_TE", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4);\n\t\tw10.YOptions = ((global::Gtk.AttachOptions)(4));\n\t// child frame1.Gtk.Container+Container\n\tthis.frame = new global", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "           environ['%sCATEGORY' POSTPROC_ENVIRO_ID] = self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        self.system['STATUS'] = self.status\n        self.system['SCRIPTSTATUS'] = self", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\tilgen.Emit(OpCodes.Ldarg_0);\n\t\tilgen.Emit(OpCodes.Call, BaseType.GetTypeInitializer(this);\n\t\tilgen.Emit(OpCodes.Ret);\n\t\treturn mb", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return (Builder)new Builder().MergeFrom(prototype);\n}\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom.Compiler", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                   vertices[x] = getVertex(getQuad(i, x);\n            }\n        }\n    }\n    }\n    public Vector3f getVertex(int i) {\n        return getVertices()[getIndex(i);\n    }\n}\n\nNote", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       result.add(showDate.split(\",\");\n        result.addAll(ignoredCols);\n        return result;\n    }\n    }\n    // ...\n}\n\\end{code}\n\nNote: This is just a partial implementation of the code, the method names and", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\tyield return new WaitForSeconds (0.1f);\n\t}\n}\n}\n}\n\nPlease help me with the code. I am trying to understand how the script works, what the different variables and methods are doing, and how to use it to change the height of an input", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "     Height = GetBestHeight();\n      Invalidate();\n    }\n    }\n  }\n}\n}\n\nEndClass CommandButton\n\n\nPlease help me complete the code by adding the following functionality:\n\n1. The button should change its background color when the mouse is over it\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "           Users.Add(lastUser);\n            }\n            }\n            // Send emails for each user\n            foreach (string user in Users)\n            {\n                SendEmailForUser(user);\n            }\n        }\n    }\n}\n}\n}\n\nThe code checks the", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections|= ScrollDirection.Down;\n\t\treturn directions;\n\t", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           return VerificationResultCollection;\n        }\n        // called when save button is pressed\n        private void SaveButton_Click(object sender, EventArgs e)\n        {\n            TSubmitChanges SubmitChanges = new TSubmitChanges();\n            TVerificationResultCollection VerificationResultCollection = Valid", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "       }\n        }\n    }\n}\n}\n\nI'm not sure what the code is supposed to do, but it seems to be some sort of file loading/serialization class for Phosphorus Five. It has methods for loading files from disk into an application context and saving them to a", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "   def __del__(self):\n        del self.log\n        return None\n    def __init__(self, *args, **kwargs):\n        raise NotImplementedError\n\n    def __call__(self):\n        raise NotImplementedError\n    def __len__(self):", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\tget { return _customRange != null;\n\t}\n\tpublic void CopyCustomRange(string customRange)\n\t{\n\t\t_customRange = customRange;\n\tNotifyPropertyChanged(\"CustomRange\");\n\tNotifyPropertyChanged(\"CopyCustom\");\n\t}\n\t#end", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\tget {\n\t\t\treturn dataDir;\n\t}\n\t}\n}\n}\n}\n\nThe code is a C# implementation of a GNOME application using Mono.Unix and Gtk#. It sets up the application's environment, registers with the session manager", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "   }\n}\n}\n\nThis code is a Java class called TextUIBugReporter that is a subclass of AbstractBugReporter. It provides a convenient way to format and report bugs. It has some parameters that can be set to customize the output. It has methods to print bugs in", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\tpublic override void OnDoubleClick( Mobile from )\n\t{\n\t\tif ( !Movable )\n\t\t\treturn;\n\t\tif ( from.InRange( this.GetWorldLocation(), 1 )\n\t\t{\n\t\t\tEat( from );\n\t", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                   if (eFarm.MinionsHit >= 2)\n                    {\n                        E.Cast(eFarm.Position);\n                    }\n                }\n            }\n        }\n        private void JungleClear()\n        {\n            if (ManaManager", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\treturn get(x, y, width, height, 0.0, 0.0, anchor);\n}\n}\n}\n\nThe code above defines a class GBC with static methods to create a GridBagConstraints object. The methods accept various parameters to configure the grid bag, like x", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       return self.forecast(region, 'b31')\n```\nThis code is for a smart home system that fetches data from the German Weather Service (DWD) and stores it in a MySQL database. It uses the FTP protocol to download the data and the CSV format for the data", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertTrue(field_def.name == field_model_def.name)\n        self.assertTrue(field_def.title == field_model_def.title)\n        self.assertTrue(field_def.creator == field_model_def.creator)", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "               new object[] {new long[1] {10L});\n                env.UndeployAll();\n            }\n        }\n        internal class InfraWideningShort : RegressionExecution\n        {\n            private readonly bool namedWindow;\n            public InfraWideningShort", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "       clibrebound.reb_particle_imul(byref(self), c_double(other)\n        return self\n    \n    def __div__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented\n", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "   def _get_view_id(self, cr, view_id, context=None):\n        return self.pool['ir.ui.view'].get(cr, uid, view_id, context=context)\ndef _get_view_ids(self, cr, view_", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           View newValue = BasicHTML.createHTMLView(c, text);\n            c.putClientProperty(BasicHTML.propertyKey, newValue);\n            c.putClientProperty(htmlDisable, Boolean.FALSE);\n            if (oldValue != null) {\n                oldValue.", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, content=content)\n    assert s.name_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    expected_urls = [filename]\n    assert len(items", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.loader = namedQueryReference;\n\t\t}\n\t}\n\t#endregion\n\tpublic void Save(object state)\n\t{\n\t\tmapping.Save(state);\n\t}\n\tpublic void Update(object state)\n\t{\n\t\tmapping", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\twriter.WriteEncodedInt(int) m_Members.Count;\n\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t{\n\t\t\tPlayerState pl = m_Members[i];\n\t\t\twriter", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "   }\n}\n\\end{code}\n\nThe `InliningData` class is responsible for exploring the space of inlining decisions for a given method. It maintains a stack of call sites and call sites' associated `CallsiteHolder`s, which represent the call sites that", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "               print(\"  PYTHONTES: {}: {}\".format(pytest, sprout_appliances))\n            pytest_con = pytest.get_pytest_con(self.args['pytest_con'], self.appliance)\n        else:\n           ", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    // ...\n                }\n            }\n        }\n    }\n    }\n}\n\\end{code}\n\nI'm trying to understand the code for the `ReadEliminationClosure` class. The class takes a `ControlFlow", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "   }\n}\n}\n\nThis is an abstract class that provides an interface for implementing a video call provider. It has methods for setting camera, preview surface, display surface, device orientation, zoom, and other camera capabilities. It also has methods for handling messages from the binder.\n\n\nHow do", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\tfrom.SendGump(new InternalGump(from as PlayerMobile, this);\n\t\t}\n\t}\n\t\n\tpublic override void Serialize(GenericWriter writer)\n\t{\n\t\tbase.Serialize(writer);\n\t\twriter.Write(0", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   Record,\n    RecordMetadata,\n    BibrecBibxxxMixin,\n    BibrecBibxxx\n    BibrecBibxxxMixin\n    Bibrec,\n    BibrecBibxxx\n]\n\\end{code}\n\nThe code is a Flask", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   def remove_user(self, username, domain):\n        user = '%s@%s' % username, domain\n        log.debug('Remove user: %s@%s', user, domain)\n        data = self.module.get(user)\n        if data is None:", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "       - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def percent_translated(self):\n        \"\"\"\n        See POFile.percent_translated.", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( res['Message'] )\n    else:\n      self.integrityClient.setTransformationProblematics( int( transID, 'ValidatedOutput' )\n      if not res['OK']:\n        gLogger.", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\t// We need to handle the form\n\t\tif(cb != null)\n\t\t\tcb.onForm(method, action);\n\t\treturn null;\n\t} catch (URISyntaxException e) {\n\t\tthrow new CommentException(l10n(\"could", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       yield self.run_fake_single_build(gsp, buildResult, expWarning=True)\ndef test_single_build_succeeds_sends_review(self):\n    yield self.run_fake_single_build(gsp, SUCCESS)", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.term = 'http://www.google.com/Category'\n    self.category.text = 'Category'\n    self.assert_(self.category.term == '", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "           Map<String, AnnotationMirror> r2) {\n            return r1.isEmpty() ? r2 : r1.isEmpty() ? Collections.emptyMap() : super.reduce(r1, r2);\n        }\n    }\n}\n}\n\\end{", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "\n    if mat is not None:\n        mat_node = mat.active_node_material\n        if mat_node:\n            return mat_node\n        else:\n            return None\n\nThis code is a Materials panel class for Blender. It contains a number of subclasses for", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           LoadNesData(engine);\n        }\n    }\n    #endregion\n    public void SaveNesData(NesEngine _engine)\n    {\n        #region CPU\n        _engine.Cpu.REG_A = _regA;\n        _engine.C", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           JMenuItem jmi = new JMenuItem(\"Open Document\");\n            jmi.addActionListener(oActionListener);\n            _jMnuRoot.add(jmi);\n        }\n        private void addMenu(JMenu _jMnuRoot, String _sMenuText, Action", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\tAdd(\"Party Quest\", 7031); // Party Quest [10 Red Bears]\n\tAdd(\"Party Quest\", 7056); // Party Quest [10 Red Bears]\n\tAdd(\"Party Quest\", 707", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = Frame.H;\n\t\t\tif (height < min) {\n\t\t\t\theight = min;\n\t\t}\n\t\treturn height;\n\t}\n}\n}\n}\n\nCan someone please help me complete this code? I'm having", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "       return self.announcement.title\n    def get_absolute_url(self):\n        \"\"\"\n        Return the permalink to the cross-publication announcement.\n        \"\"\"\n        return reverse('announcements:announcement_detail', kwargs={'slug':", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers.add_lexer('php', PhpLexer())\n\n```\nThis is a configuration file for Sphinx, a documentation generator. It defines various options for the Kotori documentation, including:\n\n* General configuration options like the source encoding, version, language, and master document", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "   rows = cursor.fetchall()\n    for row in rows:\n        print \"Row is: sdate %s, stime %s, etime %s, duration %s, src_calls %s, altitude %s, speed %s, registration %s\" % row\n", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       conn.table('projects').insert({'last_snapshot': timestamp})\n    conn.close()\n    rethinkdb_disconnect()\ndef main():\n    log(\"Starting\")\n    enable_ssh_access_to_minion()\n    MINION_IP", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tif (HasKeyword(\"lute\"))\n\t\t\t{\n\t\t\t\tGiveKeyword(\"lute\");\n\t\t\t\tawait PlaySound(0x000000000000000);\n\t\t\t\tawait", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead = ()\n        self.codetail = ()\n        self.cod", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "   def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n        self.host_data[host_data.name] = host_data.name\n\ndef __main__(args):\n    module = Callback", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "           }\n        }\n    }\n}\n}\n\\end{code}\n\nI've found this code online and I am trying to understand how it works. The code is quite complex, but I believe it is meant to unshorten URLs. It has a `ResolveUrl` class", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if len(primary.keys()) > 0:\n        raise AssertionError(\"Primary.xml contains packages:\")\n    else:\n        pass\n@behave.step(\"filelists in \\\"{path}\\\" has only packages\")\ndef filelists_in_path_contains_only", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "           inputs.extend(self.get_finalized_command('build_ext').get_outputs())\n        return inputs\n    # get_inputs ()\ndef get_dependencies (self):\n    # Get the list of dependencies required to build this package\n    # This is a bit more", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = disassembledValues[j];\n\t\t\t\tif (InitializeLazyProperty(fieldName, entity, session, snapshot", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "           log_name,\n            '--job-id', request['job_id'],\n            '--job-name', job_name,\n            '--qsub-time', request['qsub_time'],\n            '--start-time', request['start_time'],\n            '", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new EventViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        //[RolesRequired(\"Admin\", \"SaveEventDelegate\"]\n        public ActionResult SaveEventDelegate(Event", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                   var circle = (Circle) obj;\n                    return string.Format(\"({0},{1},{2},{3}\", circle.X, circle.Y, circle.Radius);\n                    }\n            }\n            }\n            catch (Exception ex)\n            {\n                Console.", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "   def getAccountData(self, user):\n        return self.account.getAccountData(user)\n\nThis code is a plugin for the requests library that allows you to download files from fileserve.com. It uses the following methods to download files:\n\n1. Check if the file is", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Any())\n\t\t\t{\n\t\t\t\t// Harvest the closest resource\n\t\t\t\tCPos closest = path[0];\n\t\t\t\tif (closestHarvestableCell.Value != closest)\n\t\t\t\t{\n\t", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "   def clean_link_cache(self):\n        for x in glob.glob(os.path.join(self.bootloc, \"link_cache/*\"):\n            utils.rmfile(x, logger=self.logger)\n\n    def rsync_gen(self):", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "   return Event.newBuilder()\n            .setSeverity(EventSeverity.getSeverity(severity)\n            .setMessage(message)\n            .build();\n    }\n}\n}\nThe code is an implementation of an abstract EventProducer class that provides", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           while (context.Suffix != PpmContext.ZERO)\n            {\n                states[stateIndex++] = context.Suffix;\n                if (context.NumberStatistics == 0)\n                {\n                    goto NoLoop;\n                }\n               ", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, b);\n            });\n        public static readonly DicomVr SSvr = new DicomVr(\"SS\", true, false, true, 16, true, ' ', 1,\n            delegate(DicomTag tag, ByteBuffer", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\tsessionValuesArray.Add(tFull[0] + \":\" + tFull[3]);\n\t}\n\t//do the delete\n\tSession session_l.ForEach(session =>\n\t{\n\t\tif(sessionValuesArray.IndexOf(session.SessionID) !=", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "       o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 9)\n        self.assertEquals(b'abcdefghij\\x0\\x00\\x0ij', self.read(o))\nclass FileTesting", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_checksum ?></td>\n  </tr>\n  <tr>\n  <tr>\n    <td>Mac", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   ax.plot(cr['combined'][app][VC]['durations'], label=app)\n    ax.set_xlabel('Time in ms')\n    ax.set_ylabel('Duration')\n    ax.set_title('Individual')\n    ax2 = ax", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   def test_unsetuid(self):\n        \"\"\"\n        Check that L{util.unsetuid} unsets the effective user.\n        \"\"\"\n        util.unsetuid(0)\n        self.assertEqual(os.geteuid(), 0)\n        self.", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t}\n\t\t\telse{\n\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t}\n\t}\n", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "   winner, inference, dist, categoryDist = knn.infer(v[0])\n    if winner != 0:\n      failures += \"Inference failed with k=3\\n\"\n    # ...\n  return failures\n\n#---------------------------------------------------------------------\n# End", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        mirror.writeElement(kind, index, value);\n    }\n}\n}\n\\end{code}\n\nI have tried to explain the code as much as possible, but I am unable", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "   }\n    }\n}\n\\end{code}\n\nThe code above is a part of a NAnt build tool that manages references to assemblies in a project. It has a `ResolveAssemblyReference()` method that tries to find the assembly file by searching through various paths. \n\n", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return string.format(*args, **kwargs)\ndef list_format(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of list.format()\n    \"\"\"\n    return str_format(string, *list(args), **kwargs)\ndef tuple_format", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       n = m + i16 - 2;\n        i27 = i26 + i16 - 1;\n        i2 = i28 + i16 - 1;\n        i23 = i2 + i24 * i24;\n       ", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\tstr += s.name + \"\\n\";\n\t\t}\n\t\treturn str;\n\t}\n\t\n}\n}\n\n\npublic class Mixamo {\n\t\n    public static void AddTransitionHandler(Layer layer , TransitionHandler handler ) {\n\t\tlayer", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "           });\n            #endregion Lucian\n            #region Maokai\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Maokai\",\n                    SpellName = \"MaokaiQ\",\n                    Slot = Spell", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\twhen(securityContext.getUser()).thenReturn(new EmfUser(\"testUser\");\n}\n}\n}\nNote:\nThis is a partial implementation of the BaseComponentTest implementation that provides the necessary stubs and mocks for the model management components.\nThe @Produces annotation is used", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       context.popen('/some/file', 'r')\n        self.assertRaises(subprocess.SubprocessError)\n    def test_popen_raises_error_with_arguments(self):\n        import subprocess\n        context.popen('/some/file',", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t// ...\n\t}\n}\n}\n\nThe above code is from the ICSharpCode.Core project. It defines a class CoreStartup that helps to initialize ICSharpCode.Core.\nIt has several properties that can be set before calling the StartCoreServices method:\n", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\tinternal void CheckIndex (DataTable table)\n\t{\n\t}\n}\n}\n// End of file\n\nThe code defines a constraint class with a property ConstraintName that must be set when the constraint is added to a constraint collection.\nIt also defines an event handler BeforeConstraintName", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "self.setWindowTitle(\"Settings\")\nself.resize(86, 427)\nself.setWindowIcon(icon)\nself.setModal(True)\nself.verticalLayout_2.setObjectName(\"verticalLayout_2\")\nself.verticalLayout_2.set", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               // Show the error message\n                showError( getActivity(), stationId, wxs.getString( wxs.getColumnIndexOrThrow( Awos1.WX_SENSOR_IDENT ) );\n            }\n            return super.onResult( result );\n        }\n", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\tstring query = \"select * from Continent\";\n\t\t\tvar results = s.CreateQuery(query).List().Count;\n\t\t\tQueryStatistics queryStats = stats.GetQueryStatistics(query);\n\t\t\t// ...\n\t}\n\t}\n\t", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "           if (uiByteValue < 0x100)\n                uiRCITS <<= 8;\n            else\n                uiRCITS = 0;\n            }\n            uiRCITS ^= (uiRCITS << 8) ^ polynom;\n", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\tif (animateUpwards && headYTranslation > 0.0F && getMode().isAggressive()) {\n\t\tanimateUpwards = true;\n\t\tanimate = true;\n\t}\n\tif (animate) { //no else because animate can be changed in the above", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new HyperlinkDetector[] {\n                new CeylonHyperlinkDetector(controller),\n                new JavaBackendHyperlinkDetector(controller),\n                new JavascriptBackendHyperlinkDetector(controller),\n                new NativeHeaderHyperlinkDetector(controller)", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.aspectWidget = Object3Aspect(self)\n        self.scaleWidget = Object3DScale(self)\n        self.privateWidget = Object3DPrivateInterface(self)\n        self.l.addWidget(self.aspectWidget)\n        self.l.", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\tcase 3: // Set location\n\t\t\t\t{\n\t\t\t\ttoSet = new Point2D( sender.Target as IPoint3D );\n\t\t\t\tshouldSet = true;\n\t\t\t\tshouldSend = true;\n\t\t\t\tbreak", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                   if (selectConverter != null)\n                    {\n                      chosenObj = selectConverter.convert(value);\n                      if (chosenObj != null)\n                      {\n                         result = chosenObj;\n                      }\n                    }\n                  }\n                 ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tif (i!=j)\n\t\t\t\tsb.append(i+\"->\"+j+\"\\t\"+fractionWithAmount[i][j]+\"\\t\"+totalWithAmount[i][j]+\"\\n\");\n\t}\n\treturn sb.toString();\n}\n}", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                           foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                                int", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\tget { throw new NotImplementedException (); }\n\t\tset { throw new NotImplementedException (); }\n\t}\n}\n}\n\n// Service.cs\n// Author: Atsushi Enomoto <atsushi@ximian.com>\n// Copy", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       //expect(mockSecurityManager.getSubjectForUser(ownerId)).andReturn(mockCurrentSubject).times(2);\n        expect(mockCurrentSubject.getGroup()).andReturn(mockGroup);\n        expect(mockGroup.getId()).andReturn(ownerGroupId);\n        re", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\tVector2 relative = (v - viewport.ToVector2 ());\n\t\treturn relative;\n\t}\n\t}\n}\n}\n\nPlease let me know if you have any questions or need further clarification.", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "   endpoint = XDRStruct(vlan=None, mac_hi=None, mac_lo=None)\n    endpoint.pack()\nEnd of code\n\nThis code defines several classes:\n\n\n1. XDRStruct: A class that represents a struct-like object, with a __", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\tif (sending_data.Count > 0)\n\t\t\t{\n\t\t\t\t    Console.WriteLine(\"dpslamServer: Send failed\");\n\t\t\t}\n\t\t}\n\t\t\n        #endregion\n        #endregion\n        public", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if(type == RequestType.Step) {\n                logDataSet(list);\n            } else if(type == RequestType.Activity) {\n                convertToActivityBucketList(list);\n            }\n        }\n    }\n    @Override\n    public void onError(", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "   return nullptr\n  \"\"\"\ndef NewSingleCallback(object, function, arg):\n  \"\"\"Create a single use callback.\"\"\"\n  typenames = ', '.join('typename A%d' % i for i in xrange(1, bind_count)])\n  arg_list", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   return HttpResponse(simplejson.dumps(items))\n    content_type=\"application/json\"\n    \"\"\"\ndef range_csv(filename, items):\n    return HttpResponse(csv.writer(items))\ndef range_json(items):\n    return HttpResponse(simplejson", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "new VarNode(\"score\"), null/* c */,\n                Scope.DEFAULT_CONTEXTS);\n            }\n            whereClause.addChild(serviceGraph);\n        }\n        assertEquals(expected, given);\n    }\n}\n\npublic void test_ServiceOptim", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       return super(UserDetailView, self).post(request, *args, **kwargs)\n\nThe code above defines a Django admin view for editing users. It has a form that includes a password field, a permissions field and a toolbar with various buttons. The toolbar also includes a dropdown button to", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n  }\n    #region IResourceReference Members\n    IAssemblyReference IResourceReference.ResolvedAssembly {\n      get { return this; }\n    #endregion\n  }\n}\n\nThe code is defining", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           // Initialize the solver fields\n            // Set the convergence monitor\n            // Set the preconditioner\n            // Initialize the solver\n            // Solve the system\n            // Check for convergence\n            // Check for convergence\n            // Return the result\n        }\n    }\n}\n}", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\tApfloat median = sortedNumbers[left];\n\t\t\n\t\treturn new Apfloat[] {median};\n\t} else {\n\t\tApfloat median1 = sortedNumbers[left];\n\t\tApfloat median2 = sortedNumbers[right];\n\t\n\treturn new", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "           sample_count[v] += 1\n            L[v] = left\n            A[v] = right\n        v = parent[v]\n    for (left, right), edges_out, edges_in:\n            for edge in edges_out:\n            parent[edge", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       result['mapping'] = csv_mapping.compare_to_json(mapping_json)\n        return result\n    def test_enrich(self):\n        self.enrich_backend = None\n        self.ocean_backend = None\n        self.enrich_aliases =", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots && botController.CanControl(slot.Key))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// Add bot to the slot\n\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t    return base.ToString();\n\t\t}\n\t}\n}\n}\n\n\nThe code defines a class called SmbException that inherits from IOException and contains a private field called _status and a private field called _rootCause. It also contains several methods to convert error codes from", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + padding_bytes + frame_payload\n\nclass WindowUpdateFrame(Frame):\n    frame_type = FrameType.WINDOW_UPDATE\n    defined_flags = FrameFlag.ACK, FrameFlag.END_SEGMENT, FrameFlag.END_STREAM", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           var boundingBox = cluster.BoundaryCurve.BoundingBox;\n            var left = boundingBox.Left;\n            var right = boundingBox.Right;\n            var top = boundingBox.Bottom;\n            var bottom = boundingBox.Height;\n            if", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "void btKinematicCharacter::updateTargetPositionBasedOnCollision(btVector3 hitNormal, double tangentMag, double normalMag)\n{\n\tbtVector3 movementDirection = m_targetPosition - m_currentPosition;\n\tdouble movementLength = movementDirection.length();\n", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (ExpressionTree initializer : initializers) {\n            if (canBeLeaked(initializer)) {\n            checker.report(Result.failure(\"unique.leaked\"), initializer);\n        }\n    }\n    }\n    @Override\n    public Void visitMethod", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\tif (nbttagcompound != null)\n\t\t{\n\t\t\tNBTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\tnbttagcompound1.setInteger(\"color\", color);", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\t_returnType = (Type)Type.GetType(typeName);\n\t\t}\n\t}\n}\n}\n}\n\nI'm trying to complete this code by adding a constructor that initializes the type of the function, creates the methods and return type. I also", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t}\n\t}\n}\n}\n\n\nThis is a test class for the TrackBar component of the Windows Forms application. It contains test cases for various properties and methods of the TrackBar component.\n\n\nThe test cases include:\n\n1. Testing the AutoSize property.", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\tdoReturn(Collections.singleton(annotationType)).when(lookup).findAll();\n\t\tCollection<? extends ImmutableType> result = instrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(instrumentationApplier);\n\t\t// assert result\n\t", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\tif (currentStmt == null) {\n\t\tif (other.currentStmt != null)\n\t\t\treturn false;\n\t} else if (!currentStmt.equals(other.currentStmt)\n\t\treturn false;\n\t// ...\n\treturn true;\n", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideLExtent[start][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) {\n              continue;\n            }\n            int max1 = wideRExtent[end", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "           'pg_data', 'src', 'dst'],\n            shell=False, env=None,\n            stdout=PIPE, stderr=PIPE, stdin=PIPE,\n            preexec_fn=mock.ANY, close_fds=True\n        )\n       ", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunning = false;\n\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunning -= DbgProcess_DelayedIsRunning;\n\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\twriter.attribute( null, \"b\", String.valueOf( b );\n\twriter.endTag( null, name );\n\t}\n\t\n}\n}\n}\n\nThe YafaRayWriter class writes a YafaRay scene specification for the given scene. It takes", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\tif ( aThat instanceof Contact ) {\n\t\tContact that = (Contact) aThat;\n\t// Compare the values\n\tif ( !this.getContactDate().equals(that.getContactDate()) ||\n\t\t!this.getContactLocation().equals(that.getContact", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "   if total_rej % n_save == 0:\n      print(\"SAVING CONFIGURATION : %s\" %n)\n      if (reject_wall+reject_jump) == 0:\n        body_offset = 0\n        for i,", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "   if cdata:\n        # We have a Subtensor of the form X[0, :] -> X[0]\n        # Check if it takes the full input\n        # Check if the indices are equivalent to `arange(0, input.shape[0], 1)`\n       ", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   def __init__(self, *args, **kwargs):\n        self.community = kwargs.pop('community')\n        super(AddCommunityForm, self).__init__(*args, **kwargs)\n        self.fields['social_presence'].required = False\n        self.", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "   event_key = event_key.with_wrapper(wrap)\n    event_key.base_listen(**kw)\n\ndef before_compile(self, query):\n    # ...\n\nclass _QueryEventsHold(_EventsHold):\n    all_holds = weakref.We", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "           for child in self.show_tag_list:\n                self.runtime.add_block_as_child_node(child, xml_object)\n        return xml_object\n    def __str__(self):\n        return \"ConditionalModule: \" + self.descriptor.xml", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       self.change_filter(self.data, self.current_filter, self.get_axes(self.filtered_data), global_changes)\n        self.update_filtered_data()\n        self.update_bg_value(self.get_bg_value,", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t}\n}\n}\n}\n\\end{code}\n\nThe code above is the generated code from the Jeroen Frijters XML to C# code generator. It defines a set of instructions (in the `Instruction` class) that can be used to generate C# code for", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\tthis.YLabel.Size = new System.Drawing.Size(20, 32);\n\tthis.YLabel.TabIndex = 2;\n\tthis.YLabel.Text = \"Description...\";\n\t// \n\t// \n\t// objYText\n", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assert(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"tag/freshcvs.py\"])\n        self.assert(c.comments, \"", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null || termData.isEmpty()) {\n            return;\n        }\n        for (Map.Entry<String, Collection<String>> datum : termData.asMap().entrySet()) {\n            if (!datum.getValue().isEmpty()) {\n                term.", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassiveFlower()) {\n\t\t\t//TODO: Add mana generation code here\n\t}\n\treturn false;\n}\n}\npublic void onWander(EntityPlayer player) {\n\tif(isPassiveFlower()) {\n\t//TO", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           for (Node neighbor : component.getNeighbors()) {\n                intrinsicCohesion += this.getRepresentativity(neighbor, c);\n            }\n        return intrinsicCohesion;\n    }\n}\n}\n}\n\nCan you please", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "   if are_equal:\n        logger.info(\"Record %s upgraded successfully.\" % recid)\n    else:\n        logger.error(\"Record %s failed to be upgraded.\" % recid)\ndef _retrieve_all_fulltext_recids():\n    return", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\tcomputerMgmt=null;\n\t\t\n\t}\n\tprivate void menuGetStatus_Click(object sender, System.EventArgs e)\n\t{\n\t\tgetStatus();\n\t}\n\tprivate void menuStartProcess_Click(object sender, System.EventArgs e)", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date date : exceptionDates) {\n      exDateList.add(toDatable(date));\n    }\n    return new ExDate(exDateList);\n  }\n  }\n}\n}\n\n\nPlease help me to fix the following issues", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\tsourceEventBinding.AddListener( OnSourceEvent );\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\ttargetEventBinding.hideFlags = HideFlags.HideFlags.HideAndDont", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ObjectMapper mapper = new ObjectMapper();\n            Map<String, String> config = mapper.readValue(jsonData, HashMap.class);\n            Map<String, String> config = new HashMap<String, String>();\n            for (String name : config.keySet()) {\n", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\tsuper(id, path, width, height);\n\t\t}\n\t\tpublic final String getImage(int x)\n\t\t{\n\t\t\treturn super.getImage(x);\n\t\t}\n\t}\n\tpublic final Image imageIcon getImage();\n\t", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n}\n}\n\nI have a few questions about this code:\n\n1. What is the purpose of the `OMEData` class?\n2. Why are the `seed` and `rnd` fields static?\n3", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "                   la = LinkAnnotation()\n                    la.subject = man_obj.uuid  # the subordinate is the subject\n                    la.subject_type = man_obj.item_type\n                    la.project_uuid = man_obj.project_uuid\n                    la.", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .shrinktofit  = \")\n                .Append(IsShrinkToFit).Append(\"\\n\");\n            buffer.Append(\"          .mergecells = \")\n                .Append(IsMergeCells).Append(\"\\n\");\n            buffer.Append", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t// Half-width katakana.\n\t\t\tbytes [posn++] = (byte)((ch >> 8) & 0xFF);\n\t\t\tposn++;\n\t\t\t}\n\t\t}\n\t\t// Return the resulting bytes to the", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\tJRProperties properties = new JRProperties();\n\t\t\n\treturn properties;\n\t}\n\tcatch (IOException e)\n\t{\n\t\t// ...\n\t}\n}\n}\n\n", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "       return this == CREATIVE;\n    }\n    }\n}\n\nI have been asked to implement the following methods:\n\n1. enableBonusChest() - Enables the Bonus Chest.\n2. enableCommands() - Enables cheats (Commands", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\tCommonSecurityDescriptor csd = new CommonSecurityDescriptor\n\t\t\t(false, false, ControlFlags.None, null, null, null);\n\t\tcsd.PurgeDefaultAce (null);\n\t}\n\t[Test]\n\tpublic void PurgeDacl", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "       self.__idle(self.__progress_cb, float(self.__done) / len(self.__queue))\n    def run(self):\n        while not self.__stopped:\n            try:\n                result = self.__queue.get(block=False)\n                if result:", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       // detect optional packages\n        PhotonEditor.CheckPunPlus();\n        // add or remove rpcs based on PUN version\n        if (PhotonEditor.Current.isPunPlus)\n        {\n            // Add RPCs for PUN+\n            foreach (", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       return rootLayout;\n    }\n}\n\\end{code}\n\nI am trying to understand the code, but I am getting an error on the following line:\n\n\n`intent.putExtra(\"node\", SimpleFunctions.getPreferredOutboxId(echo));`\n\n", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           op_cc = np.linalg.inv(self.symmetry.op_scc[s]\n            op_cc = np.dot(op_cc, np.eye(3))\n            op_cc = np.dot(op_cc, np.l", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 25));\n        Response response = utkastController.createUtkast(intygsTyp", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tfor (int i = 0; i < block.Body.Count; i++) {\n\t\t\t\t\tILLabel curr = block.Body[i] as ILLabel;\n\t\t\t\tif (curr != null) {\n\t\t\t\t\tif (", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    //wait for this to finish before the next update\n\t    //\tif (delay > 0)\n\t    //\t    GameObject.DelayCall (delay);\n\t}\n}\n}\n}\n\nThe code provided is a custom class derived from the TBehaviour class", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   #def fix_region_id(self):\n    #    for reg_list in [self.polygon_region_ids, self.segment_region_ids, self.node_region_ids]:\n    #    for i in range(0, len(reg_list)):\n", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "\n    out[outOff + 0] = (byte)(num & 0xff00000000000000);\n    out[outOff + 1] = (byte)(num >> 24);\n    out[outOff + 2", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "       super( source, new SimpleRegexValueGetter( objectVariables, source.match, source.getExpressions() );\n        }\n    }\n}\n}\n\nHere is a description of the code:\n\n1. The `PatternMatcher` class is the main class that", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "       else:\n            slice_json[key] = value\n    if comments:\n        slice_json['comment'] = u'\\n\\n'.join(comments)\n    return slice_json\ndef transform_values_holder_xml_json_to_json(values_holder_xml", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "       frameToClose = (InternalFrame)buttons.get(btn);\n          try {\n            frameToClose.setIcon(true);\n          } catch (PropertyVetoException ex) {\n          }\n        }\n      }\n    }\n  }\n  }\n  public", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "   if len(sys.argv) == 2:\n        getLC(sys.argv[1])\n    else:\n        print \"Usage: python client.py [--check|--rand] [SDSS_Name]\"\nos.exit(0)\n\n\nThe code defines a", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi);\n    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n   ", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "\t\t\tdb.update(Db.Table1.TABLE_NAME, \"GROUP_NAME = 'newId', \" + newId + \" WHERE \" + Db.Table1.ID_GROUP + \" = \" + deleteId, null);\n\t\t\t}\n\t\tdb.close();", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "           else if (m_meth == AllocMethod.CoTaskMem)\n                {\n                    Marshal.FreeCoTaskMem(m_ptr);\n                }\n        }\n        }\n        #endregion\n    }\n}\n}\n\nPlease let me know if you", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "```\n\nHere is a breakdown of the settings.py file:\n\n1. `gettext_noop` is a lambda function that returns a function that simply returns the argument passed to it. It is used to create a default translation function for languages that don't have translations.\n2", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tqueue.Remove(itemName);\n\t\t\tif (numberToCancel > 0)\n\t\t\t{\n\t\t\t\tplayerResources.GiveCash(numberToCancel);\n\t\t}\n\t}\n\tpublic void FinishProduction()\n\t{", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "       self.statusBar().showMessage(infoText)\n\n    def __del__(self):\n        self.treeViews[0].removeItem(self.treeView)\n        self.treeViews[1].removeItem(self.treeView_2)\n        self.fileSystemModels", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_m4.sub(re_m4, code)\n        self.outputs.write(code)\n        self.run_after()\n        self.on_results(self)\n        self.run_after_all()\ndef build(bld):\n", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       print \"This came back from PlanExecutor:\"\n        print self.getPlanResult()\n        rospy.loginfo(\"PlanExecutor result:\")\n        return self.getPlanResult()\ndef getPlanData(self):\n    rospy.loginfo(\"Reading PlanData from", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t- 4 * chemical[0][ idx + reactorExtent - 2 ] + chemical[0][ idx + reactorExtent - 1 ]\n\t\t\t\t\t\t\t\t- 4 * chemical[1][ idx ] + chemical[1", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$0, \"TIMESTAMP format is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.getPattern(pattern), timestampLocale);\n                break;\n            default", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam.DbType = DbType.Int32;\n\t\tParam.ParameterName = \"@obj_id\";\n\t\tParam.Size = 4;\n\t\tParam.Value = entity.obj_id;\n\t\tqs.Parameters.Add(Param);\n", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\tthrow new NotImplementedException();\n\t}\n\t#endregion\n}\n}\nThis is a test class that tests various aspects of the PropertyMapper class, including:\n\n1. Setting the type of a property using different methods (Type, IType, MyType, MyCom", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "   self.cli_load_config([\"ntp authentication-key %s %s\" % (self.key_id, self.auth_mode)]\n    def undo_config_ntp_auth_key_by_cli(self):\n        \"\"\"Undo ntp authentication key", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.store.update_item(component, editing_user)\n        edited_on = component.edited_on\n        edited_by = editing_user\n        subtree_edited_on = component.subtree_edited_on\n        subtree_edited_by", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (ch[0]);\n        for (int i = start; i < length; i++) {\n            digest.update((byte) (ch[i]);\n        }\n        updateWith(ch);\n    }\n    public void ignorableWhites", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict)\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict)\ndef mklogical(dict):\n    return aetypes.Logical(dict)\ndef mkaetext(dict):\n    return aet", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "       return ResolveType(api, controllerName, actionName, parameterNames, sampleDirection, out formatters);\n        }\n    }\n}\n}\n\\end{code}\n\nHere's what I have so far:\n\n1. The `HelpPageSampleGenerator` class has", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "               value = entry.get_active_text()\n            self.on_quit_cell(record, column.name, value, callback=callback)\n            return True\n        else:\n            return False\n        return True\n    def on_cell_activate(self, cell):\n", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n    }\n}\n}\n\\end{code}\n\nThis code is a bean factory post processor that upgr", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           blank_lines = f.readlines()\n        finally:\n            if f:\n                f.close()\n    if blank_lines:\n            module.fail_json(msg=\"File contains blank lines, cannot write to it\")\n    # Check if file exists and is readable\n   ", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       var principal = checkNotNull( Principals.getCurrentPrincipal() );\n        var aclKey = spm.lookup( directedAclKeys.getPrincipal() );\n        ensureReadAccess( aclKey );\n        var newPrincipal = userDirectoryService.createUser(", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "   def verify_tag(self, element):\n    def verify_attributes(self, element):\n    def verify_text(self, element):\n    def verify_extra_text(self, element):\n        \"\"\"Verify attributes, attributes, text, and extra text of an element.\n", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   return clone\n    \"\"\"\n    def _get_id_cache(self):\n        if self.documentElement is None:\n            self._id_cache = {}\n        else:\n            self._id_cache = self.documentElement._id_cache\n        self._id_search", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t}\n\t\t};\n\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n}\n\t\n}\n */\nThe code is a", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(expectedType, endOffset) {\n\t\t\t\tdecodeName(keyLocator.getKeyName(), new int[1], new int[1], decoder);\n\t\t\t\t} else if (decoder.readBlobT", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for (Weapon weapon : ActiveWeapons)\n        {\n            weapon.updateCooldown(delta);\n        }\n    }\n}\n\n    public void draw(GameContainer container, Graphics g) throws SlickException\n    {\n        //Draws the HUD", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       GameEngine.model().getGame().getGame().join( action );\n      }\n      }\n    }\n    hpanel.add( m_btnOk );\n    m_panel.add( hpanel );\n  }\n  }\n}\n\\end{code}\n\n", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError, \"File not found\"\n    with open(os.path.join(os.getcwd(), url.split(\"/\")[0], \"wb\") as f:\n        for chunk in r.iter_content(10248):\n            f.write", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (response != null)\n\t\t\t{\n\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   return [coeff * met.get(\"C\", 0 for met, coeff in reaction.metabolites.items()]\n\n    \"\"\"\nThe code calculates a production envelope for a given model by first identifying carbon sources and carbon sources that are sources of carbon for computing carbon yields", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "   return self.get_queryset().filter(submitted_by=user)\n    def get_all_for_path(self, pootle_path):\n        \"\"\"Returns all units that fall below the `pootle_path` umbrella.\n        :param", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "           ],\n        migrations.CreateModel(\n            name='Student',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('username', models.CharField(max_", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "   self.add_link(NullLink, \"localhost\", \"localhost\", \"localhost\")\n    self.trafgen_ip = \"127.0.0.0.0.1\"\n    self.trafgen_mac = \"00:0:0:0:", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   m_RecentItems.add(item);\n    if (m_MaxCount > 0 && m_RecentItems.size() >= m_MaxCount)\n      m_RecentItems.remove(0);\n  }\n  }\n \n  public void removeRecent", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           return Server.Spells.SpellMasteries.ShadowSpell.CanDetect(src, target);\n        }\n    }\n}\n}\n\nThe code is for a skill Detect Hidden. It has an interface IRevealableItem which has 3 methods:", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "   if (halfTradePeriodDate == null && takeOfferDate != null)\n        halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;\n", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\telse if (p.typ == Node.opt) a = LeadingAny(p.sub);\n\t\telse a = p;\n\treturn a;\n\t}\n}\n\npublic static Node leadingAny(Node p) {\n\tNode a = LeadingAny(p);", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)((address & 0x00000000) >> 0);\n\t\t\tReadBuff[0] = buff[0];\n\t\t\tReadBuff[1] = buff[1];\n\t\tRead", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tif (caseInsensitive = caseInsensitive;\n}\n}\n\nThe code above is a Java class that represents a collection of MskJointVo objects, which are business objects in the IMS domain. It has a list of MskJointVo objects stored", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\tSendEmail( filePath );\n\t\t}\n\t}\n}\n}\nThe code is a crash handler for a RunUO server, it will generate a crash report and backup the server's data when a crash occurs.\n\nThe code has several methods:\n\n- Initialize", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t.Add(Expression.Gt(\"Id\", 2)\n\t\t\t\t.Setable(true)\n\t\t\t\t.List();\n\t\t\tAssert.AreEqual(3", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           for (k++; i < N1 + N2 + N3; i++, k += 4)\n            {\n                _units2Indx[i] = k & 0xff;\n            }\n        }\n    }\n}\n}\n\\end{code}", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "   @cached_property\n    def row_id(self):\n        dom_attr = self.browser.get_attribute(\n            'id',\n            './td/select[starts-with(@id, \"per_time_\")]',\n            parent=self)\n        return int", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\tif ( useShadowBuffer )\n\t\t{\n\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\tMemory.Copy( src, dest, length );\n\t\t\tshadowBuffer.Unlock();\n\t\t}\n\t\t", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\tself.satfinder_scan_nims.value = self.satfinder_scan_nims.value\n\nMy question is how to fix the issue of the tuner not being available when the session is not in a valid frontend. I have tried to check for self.", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                TcpAddress.TcpAddress mask = new TcpAddress.TcpAddress(filterStr);\n                tcpAcceptFilters.add(mask);\n            }\n            return;\n        case ZMQ.ZMQ_SOCKET_ID:\n            socketId =", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "           }\n            // Write the decoded image row-by-row\n            while (true) {\n                // Write the filter byte and a row of data\n                int filter = 0;\n                try {\n                    filter = fout.WriteByte();\n                    if (filter <", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       self.assertRaises(TypeError, types.Signature, 'a')\n        self.assertEqual(types.Signature('ab', variant_level=2), 'ab'\n        self.assertTrue(isinstance(types.Signature('ab'), str)\n        self", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n    def make_dual_resolution(self):\n        self.get_E_2_page_no_mat().make_dual_resolution(self.get_options())\n\n    def get_E_2_page_no_mat(self):\n        if", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "               Assert.AreEqual(AllFieldsSetText.Replace(\"\\r\\n\", \"\\n\").Trim(),\n                    text.Replace(\"\\r\\n\", \"\\n\").Trim());\n            Assert.AreEqual(AllExtensionsSetText.Replace(\"\\r\\n\", \"\\n\").Trim(),", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\treturn map.remove(key);\n}\n}\n\nThe code is for a PersistentMap class that wraps a Java Map (either HashMap or TreeMap). The PersistentMap class has a map field that represents the underlying map, and methods to access and modify the map. The Persistent", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t}\n\t\tcatch {}\n\t}\n\t\n}\n}\n#endregion AuthorHeader\n\n\nThis code is meant to be used in a server-side assembly, and it is intended to write", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return action_message\n    return action_message\n    _logger.info('Employee attendance action performed')\n\nI am trying to modify the code to add a new field \"is_absent\" which is a boolean field that indicates whether the employee is absent or not. I want to add the", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t// WDEV-3953\n\tif (orderInvestigationLiteVo.getInvestigationIsNotNull() && orderInvestigationLiteVo.getInvestigation().getInvestigationIndexIsNotNull() && orderInvestigationLiteVo", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               c.ReadToPoint(pt);\n                c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n    }\n        internal SystemListView sw { get { return sw; }\n    }\n    }\n    public class SystemListView", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       if cwd:\n            return maker.new_tab(cwd, profile, self)\n        else:\n            return maker.new_tab(None, profile, self)\n    def on_window_state_changed(self, window, new_state):\n        \"\"\"", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( _+Guid.NewGuid().ToString( \"N\" ), managedType, marshalAttribute, arraySize );\n            }\n            }\n            return toReturn;\n        }\n    }\n    }\n}\n}\n\n", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\tif (HasLayoutInfo)\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t\treturn base.IsValueType;\n\t\t}\n\t}\n\tpublic override bool IsGenericType {\n\t\tget {\n\t\t\treturn base.IsGeneric", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "           throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n    }\n}\n}\nThe code above is a class called ROM (Rule Engine Object Model) which has the following properties and methods:\n\n- EvidenceCollection", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.session = OpenSSL.SSL.Session()\n        self.context = OpenSSL.SSL.Context(self.session)\n        self.session.set_options(OpenSSL.SSL_OP_NO_SSLv23)\n        self.session.set_options(Open", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\tthis.vbox5.Add (this.hbox3);\n\t\tglobal::Gtk.Box.BoxChild w28 = ((global::Gtk.Box.BoxChild)(this.vbox5 [this.hbox3]);\n\t\tw28.Position = 0", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "               notebooks[\"board\"].page_num(key2gwidg[child] = new_num)\n                key2gwidg[child] = child\n            headbook.set_tab_reorderable(True)\n    headbook.set_tab_reorderable(", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   Move-Tab-to-left\": QKeySequence(Qt.SHIFT + Qt.Key_0),\n    \"Insert-code\": QKeySequence(Qt.CTRL + Qt.Key_Insert),\n    \"Insert-file\": QKeySequence(Qt.CTRL + Qt", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\treturn \"MutablePersistenceUnitInfo\";\n}\n */\nMy question is how do I use this class?\n\n\nAnswer:\nTo use this class, you would first need to create an instance of it and then set the appropriate properties. Here is an example:\n\n\nMutablePersistenceUnit", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return getModel() instanceof IFileEditorInput;\n  }\n}\n\\end{code}\n\n\nThe code is from an Eclipse plugin that provides a graphical editor for editing XSD files. It contains an abstract class `BaseEditPart` that is a superclass of most of the other", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\tthis.butAttach.Location = new System.Drawing.Point(182, 36);\n\tthis.butAttach.Name = \"butAttach\";\n\tthis.butAttach.Size = new System.Drawing.Size(82, 20);", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       return sb.toString();\n    }\n}\n\nI have the following questions:\n\n1. What is the purpose of the `KEY_MARKER_ID_PREFIX` constant?\n2. Why is the `editMarkerId` variable assigned the value `editMarkerId`", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\tCheck (\"HMACSHA512-N-RFC421-TC1\", hmac, data, digest);\n\t}\n\t[Test]\n\tpublic void RFC43036 ()\n\t{\n\t\tbyte[] key = Encoding.", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    sum += getMaxCdrSerializedSize(current_align);\n\t    \n\t    return sum;\n\t}\n}\n\nHere are some questions regarding this code:\n\n1. What is the purpose of the EnumSwitcher class?\n2. What is the purpose of", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "     return java.GetValue(\"JavaHome\") as String;\n    }\n    }\n  }\n}\n}\n\\end{code}\n\nThe code above is a Resin service that runs a Java application, specifically the Resin application. It is a .NET Windows service that starts and", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "   if comment is not None:\n            return [comment, l]\n            else:\n                comment = None\n        return None\n    def _update_job(self, name, job):\n        # update the job\n        # remove the old job\n        for i, l in range(", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "   modifier_json['use_mesh_modifiers'] = modifier_json['use_mesh_modifiers']\n    modifier_json['mesh_modifiers'] = modifier_json['mesh_modifiers']\n    modifier_json['use_mesh", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           if(rankCounts[0] == 0)\n                rankCounts[0] = minLikelihood;\n            else\n                rankCounts[0] = (rankCounts[0] * minLikelihood) / totalPositivesCount;\n        }\n       ", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (int i = 0; i < vertex.neighbors().size(); i++) {\n            neighbors.add(vertex.neighbors().get(i).getEnd());\n        }\n        assertEquals(3, neighbors.size());\n    }\n", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   def inspect(self, cap):\n        self.packet = cap[0]\n        self.print_packet(self.packet)\n        print(\"Packet Number:\", self.packet.packet_no)\n        print(\"Packet Length:\", self.", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 162);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.DateTimeField [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.related.ForeignKey [], {'related", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               return false;\n            }\n        }\n        return false;\n    }\n    private void getGeneratedTypes() {\n        // Return the list of all generated types\n        returnAllTypes = isReturnAllTypes();\n        if (returnAllTypes) {\n            return new ArrayList<Type", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state': 'validate', 'manager_id': False})\n    def holidays_first_approve(self,", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "       set { this.Enabled = value; }\n        }\n    }\n}\n}\n\\end{code}\n\nI have added some comments to explain what the code does, but it is quite long and complex. The main parts are:\n\n- It provides a DataGridView that is adapted", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return \"Mixer Line: \" + Mixer Line ID: \" + this.LineId + \" (\" + this.ComponentType + \")\" + \" (\" + this.Name + \")\";\n        }\n    }\n}\n}\n\nThe code above is a C# class that represents", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\tvalue10 = domainFactory.getDomainObject(ims.core.admin.domain.CareContext.class, valueObject.getCareContext().getId());\n\t}\n\tdomainObject.setCareContext(value10);\n\tims.framework.utils.DateTime", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           call([\"cargo\", \"build\", *env, *args, **kwargs)\n        build_end = time()\n        elapsed = build_end - build_start\n        notify_build_done(elapsed)\n        return env\ndef call(cmd, *args, **", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble pEst = predictPositives ? 1 : 0;\n\t\t\tdouble estN = predictPositives ? 1 : 0;\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0 }, this.getScore", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "           var stashedItems = gitItemStatuses.Where(item => item.Stashed).ToList();\n            Stashed.SetStashes(gitStash, stashedItems);\n        }\n        }\n        private void ResizeStashesWidth()\n        {\n            var max", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm0_index).out_address == 0\n\nThe code is trying to assign the particles from output buffer 0 to the beam monitors at bm0, bm1, and bm2. It creates an assignment item for each beam", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (this == o) return true;\n        if (!(o instanceof AuthScope) return false;\n        AuthScope scope = (AuthScope) o;\n        return LangUtils.equals(this.host, scope.host) && LangUtils.equals(this.realm, scope.", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b,\n                        callback,\n                        asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult result) {\n            int retVal = (int)result.AsyncResult;\n            return retVal;\n        }\n    }\n    }\n", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\tif (i < snrs.size() - 1)\n\t\t\t\t\ts += \" \";\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n}\n}\n\nCan you please explain the code in this class? What does it", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\tEType = (EClassifier)value;\n\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tcase \"eGenericType\" : \n\t\t\t\tEGenericType = (EGenericType)value;\n", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "   if args.index is None:\n        log.msg('No index file specified - going through first time setup')\n        load_index(args.index_file)\n    else:\n        log.msg('Using index file: {}'.format(args.index_file)\n\nThe", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.bit_ss, self.bit_es = self.miso_bits[5][1], self.miso_bits[5][2]\n        self.putb([134, data])\n        self.bit_ss, self.bit_es = self.", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "           if (cursor >= limit) {\n              break lab1;\n            }\n            cursor++;\n          }\n          limit_backward = v_3;\n        }\n      case 2:\n        // (, line 221\n        // <-, line 21\n", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               if (cd != null && cls != null) {\n                    o = cls.newInstance();\n                    // o.readObject(dins);\n                    cd.last = o;\n                    //cd.last = o;\n                    cd.viewerFrame.", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   return result\n    def _get_key_usage(self):\n        try:\n            # FIXME: This does not work with PyOpenSSL 0.15.x\n            #current_key_ext = self.cert.get_extension_for_class(x5", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\tstill_there = (s.find(i) != s.end());\n\t\t\t}\n\t\tif (still_there) {\n\t\t\t\", file=f\n\t\t    print(\"\\t\\t\\ti->first->signal_going_away ();", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   trigger_seq = [unicode_to_utf16(X.begin), X.end - 1]\n    return trigger_seq\n\n# Example usage:\nsm = StateMachine(\"(\n    # A -> B\n    # A -> C\n    # B -> D\n", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\tExpectWeak(19, 5);\n\t\tExpression(out g);\n\t}\n}\n}\n\n\nNote:\nThe above code is just a sample implementation of the Coco/R parser generator, it may not work as is for your specific grammar.\nIt", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc.update({\n                'product_id': line.product_id.id,\n                'product_uom': line.product_uom,\n                'product_qty': line.product_qty,\n                'price_unit': line.price_", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS_SSL);\n\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"openHAB", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "           nameMap.put(name, new ArrayList<PermissionEntry>(Collections.singletonList(permissionEntry));\n            }\n            nameMap.get(name).add(permissionEntry);\n        }\n        return nameMap;\n    }\n}\n}\n\nNote: This is a test", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "```\n\nI'm trying to complete the code by adding the missing functions and tests for the `match_subsystem`, `match_sys_name`, `match_tag`, `match_parent`, `match_property` and `match_is_initialized` methods.\n\n\nHere are", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   app = buildOpener(deviceToken)\n    # ...\nI have a question about the code. The `buildOpener` class is defined as:\n```\nclass buildOpener(App):\n    def __init__(self, deviceToken):\n        self.deviceToken = deviceToken", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "   # Calibrate source 1 with selection 1\n    calname = \"134-638\"\n    stime = \"2013-01-01 09:00:00:00\"\n    etime = \"201", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           if (m_Keys.Count > 0)\n            ItemID = ItemID + m_Keys[0].ID;\n        }\n    }\n    }\n    public class Key\n    {\n        public Key()\n        {\n            KeyValue = 0;\n            Name", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Tuner tuner : devices) {\n            // Add the tuner to the list of tuners\n            Tuner hdhrTuner = new TunerHdhr(tuner.getFullName(), addDevice, ipAddressMap, liveModelMap);\n           ", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigration());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS) {\n", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length != 3) throw new RuntimeIOException(\"Wrong mapping file format: \" + mapping);\n      String regex = split[0];\n      String type = split[1];\n      String priorities = split[2];\n      // IgnoreCase = ignoreCase;\n", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           if os.path.join(sub_path, n) in env['ENV']:\n                return os.path.join(sub_path, n)\n        return None\n        return None\n    def find_file(self, include, source_dir, path):\n        try:", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "       ctx = Context()\n        [ctx.push(x) for x in keys]\n        def make_it(feat, idx):\n            f = Feature(ctx, idx)\n            geom, attrs = feat\n            f.add_geometries_from_w", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "   f5 = F5RestClient(F5ModuleError)\n    if f5.is_error():\n        raise F5ModuleError(f5.status_code, f5.message)\n    return f5.result\n    if f5.result:\n        changes = f", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   def fill(self, values):\n        self.inputs.fill(values)\n        self.playbook_input_parameters.fill(values)\n        self.script.fill(values)\n        self.location.fill(values)\n        self.hosts.fill(values)", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           result = null;\n        }\n        return result;\n    }\n    public void dispose() {\n        // nothing to dispose\n    }\n}\n\\end{code}\n\nI am trying to change the `setDbManager()` method to return the `DatabaseManager` object instead of", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\", \"title\": \"\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           return SCons.Tool.mslink.embedManifestDllAction(target, [manifestSrc], env)\n    else:\n        return 0\ndef CheckVersions(target, source, env):\n    return SCons.Tool.mslink.embedManifestDll", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           //run the operation\n            execute(getResources(), new SubProgressMonitor() {\n                public void subTask(int progress) {\n                    //report progress\n                shell.setProgress(progress);\n            }\n        });\n        } catch (CoreException e) {\n            //", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t// Initialize the data structure\n\tdata.outputRowMeta = getInputRowMeta().clone();\n\tmeta.getFields(data.outputRowMeta, getStepname(), null, this);\n\t\n\t// Initialize the count variables\n\tfor (int i=0;i<meta", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   assert f('+5..', last) == (d(2014,1,30, 2,21), now)\n    assert f('-5..', last) == (d(2014,1,31, 19,47),", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "   }\n}\n}\n}\n\nThe code above is a modified version of Nerun's Distro SpawnGen, which allows you to spawn NPCs based on a file with the following format:\n\n* overridemap <int> - the map number to use for the spawn\n", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestError(\"Guest log not available.\")\ndef start_test(test_name, *args, **kwargs):\n    \"\"\"\n   ", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       assertThat(rc, is(5);\n\nPlease help me fix the issues with the code.\n\n", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestParameters(r);\n            }\n            this.owner.getDecorator().onSendAfter(r", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tvar compressedSize = (uint)value.ToInt32();\n\t\t\tvar compressed = new byte[4];\n\t\t\tWriteCompressedUInt32(compressed, compressedSize);\n\t\treturn compressed;\n\t}\n}\n}", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.execute_command(au_flags, descr)\n        self.fm.env.copy.set_default(original_path)\n        self.fm.env.cwd = cwd\n        self.fm.env.cut = True\n        self.fm.", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\tActivator.CreateInstance (typeof (COMTest).ToString ());\n\t\n}\nEnd of code\n\nThe test class above tests the CreateInstance method of the Activator class in the System.Activator class. It tests the following scenarios:\n\n1. Creating an instance of a type", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       locale = Locale.objects.get(code='fr')\n        repo = self._setup(da, Action.ACCEPTED, Action.PENDING)\n        self.assertEqual(repo.changesets.count(), 4)\n        self.assertTupleEqual(\n", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n            cmd.response = True\n            self.commands.answer(cmd)\n        elif cmd.cmd == PYMUMBLE_CMD_CHANNEL", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "   }\n}\n */\nHere is the code for the PlayerGroupService class:\n\n1. The class has several methods that deal with creating, managing, and updating player groups. \n2. It also has methods for adding and removing players from groups, and disbanding groups.\n3", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "   def highlight(toks, formatter=None, outfile=None):\n    formatter = formatter or Formats.get(conf.formatter)\n    if isinstance(formatter, str):\n        formatter = Formats[formatter]\n    outfile = outfile", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15 2))\n        column.quantity_renderer.set_", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "   }\n    @Override\n    public void doEndTag() {\n    }\n}\n\\end{code}\n\n\nThe above code is for a custom tag in the lucee runtime that allows you to specify various attributes for a grid column in a cfgrid control. \n\n", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               if (element.Name == \"Creature\") {\n                    //...\n            }\n        }\n        }\n        void ParseStatus(InventoryEntry invEntry, string status)\n        {\n            // Parse the status attribute\n            switch (status) {\n            case \"CountMin", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\telse\n\t\t\t\t\tm_key[i] = new PeerlessActivation( this, m_Peerless );\n\t\t\t\tfrom.AddItem(", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t{\n\t\tcoll.add(beans[i].buildVo());\n\t}\n\treturn coll;\n}\n}\n}\n\nCan you please help me modify this code to sort the", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           new Version(0x07C94, 0x08BC, 0x099A, 0x0A4D, 0x0B4F),\n            new Version(0x07C2, 0x0D84, ", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\tkdf.ComputeKey(pbKey);\n\t\tif (!MemUtil.ArraysEqual(pbKey, pbExpc))\n\t\t\tthrow new SecurityException(\"Argon2-1\");\n\t\t// ======================================================\n\t\t// Computed using the", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\treturn (requestManaExact(stack, player, cost, remove) / multiplier);\n\t}\n}\n\nNote: This is a simplified version of the code, you may need to add additional checks for other discounts.\n\n */\n\n", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "\n\nI have added the following to the file:\n\n# Define the database settings\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3', # Add 'postgresql_psycopg2', 'mysql', 'sqlite", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\"but contains {1}\",\n\t\t\t\t\tLightCount,\n\t\t\t\tNextFrame.PixelCount));\n\t\t\tlock (OutputQueue) {\n\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t}\n\t}\n\tpublic", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.actionList == null)) {\n            if ((other.actionList != null))\n                return false;\n        } else if (!this.actionList.equals(other.actionList)\n            return false;\n        if ((this.screenshots == null)) {", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.number = PhoneNumber.parse(p.readString());\n            dc.type = DriverCall.typeFromCL(p.readInt());\n            dc.ducs = p.readInt();\n            dc.data = p.readByteArray();\n            response", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\tif (licence.isApplication()) {\n\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n}\n}\n", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSize; x++)\n            {\n                float v = valueAt(x, y);\n                newVertices[x * ySizeP + y] = Vector3.Lerp(leftBottomCorner, Vector3.Lerp", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tresult = client.call(API_METHOD_ADD, new int[] {testInt1});\n\t\t\n\t\treturn result != 0;\n\t}\n\tcatch (XMLRPCException e)\n\t{\n\t\tLog.e(TAG, \"XML", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\treturn null;\n\t}\n}\npublic class MyMockDocument extends AbstractDocument implements Document\n{\n\t@Override\n\tpublic void insertString(int offset, @Nonnull String s)\n\t{\n\t\t// ...\n\t}\n\t@Override\n\tpublic void", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"Not found\");\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeObject(found.object);\n        }\n        catch (NotSerializableException e) {\n            logging2(", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                      16 + (~stactics_display_buffer.read(i) & 0x0f),\n                        16,\n                        0, 0,\n                        pixel_x, pixel_y,\n                        Machine.visible_area, TRANSPAR", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                       .Distance(position.To2D()) <= spell.Range + spell.Width + target.BoundingRadius)\n                        {\n                            result.Add(target);\n                            break;\n                        }\n                    }\n                    case CollisionableObjects.Yasuo", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       List<Node> path = new ArrayList<>();\n        addAdjacencies(x, graph, path);\n        return path.size() >= 2;\n    }\n}\n}\n\\end{code}\n\nI need help understanding how the code works and what it does.\n", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   Place p=pop.PlaceBase;\n                    plcs.Push(p);\n                    if (p.Name == Name)\n                        return p;\n            }\n            }\n            return null;\n        }\n        }\n    }\n}\n}\nThe code", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (getFileId() == other.getFileId()) {\n            return true;\n        }\n    }\n}\n}\n}\n\nThe above code is for a class called FinancialEntityAttachment, which represents an attachment associated with a financial entity in a comprehensive research administration", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                   Mobile mob = mobiles[i];\n                    if (mob.CanBeHarmful(m_Item.From, false)\n                    // ...\n                    // ...\n                    AOS.Damage(mob, mob_Item.GetDamage(),", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\tHistory.Add(msg);\n\t\t}\n\t\treturn true;\n\t}\n}\n}\n\n#endregion\n\nThis code is for a WorldChat module that allows players to join and leave channels, kick and ban players, and send messages to a channel. The", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": " return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n}\n}\n}\n", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "   }\n    public void b() {\n        this.m();\n    }\n    public void c() {\n        this.m();\n    }\n}\n\\end{code}\n\nI am trying to understand how the `NetworkManager` class works and how it handles packets. Specifically", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "           z_arr[p_index, :] = k\n            z_err_arr[p_index, :] = k\n            t_arr[p_index] = t_dict[p_key][0]\n            t_err_arr[p_index] = t", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne);\n    }\n    return context.getResources().getQuantityString(resourceTwo, recipients.size(), context.getString(resourceMany, name);\n  }\n}\n}\n\nThe code above defines an IdentityUtil class that provides various methods for", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env.update(extra_path)\n        env.update(extra_lib)\n        return env\ndef build(self, release=False, dev=False, android=False):\n    env = self.build_env(release=release, hosts_file_path=None)\n", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in iteritems(type_paths):\n                for test in test_cls.from_json(path):\n                    source_file = test.to_json()\n                    source_files[path] = source_file\n            self.manifest_items.append(", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compiledScript != null) {\n            compiledScript.release(compiledScript);\n        }\n    }\n}\n    public void close() {\n        if (compiledScript != null) {\n            compiledScript.release(compiledScript);\n        }\n    }", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "   }\n}\n}\n\n\nThe code above defines a base class WrappedNetworkLayer<T, R> that provides an abstract class for a network layer that can be wrapped by a client or server adapter. The class provides methods for reading, writing, closing, and setting timeouts, but the", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     for i in range(energy.size):\n        Etf = energy[i]\n        grad_Etf = grad[i].flatten()\n        grad_E = Etf*grad_var+energy_var*grad_Etf+grad_means\n        grad_E", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\treturn super.compareTo(obj, caseInsensitive);\n}\n}\n}\n\nNote: This is a generated class and is not intended for direct use. \n\nThe generated code is based on the IMS MAXIMS OCR OrderingResults.OrderInvestigation business", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.size(), 3);\n    }\n    @Test\n    public void shouldFindAllStacks() throws Exception {\n        for (StackImpl stack : stacks) {\n            stackDao.create(stack);\n        }\n        final List<StackImpl>", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       pf.setParameter(new Parameter(depth, depth);\n        //EXCLUSION_REGEXP\n        pf.setParameter(new Parameter(exclusionRegexp, exclusionRegexp);\n        //INCLUSION_REGEXP\n        pf.", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// Matching a $ or $(..) placeholder\n\t\tif (kind == LNodeKind.Ident) {\n\t\t\tLNode ident = (LNode)candidate;\n\t\t\tLNode param = GetCaptureIdentifier(pattern);\n\t\t\tif (", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   extendedWillHit += colisionList.Any(colision => colision.Distance(shadow.Position.To2D()) < 100F);\n                }\n                int shortenWillHit = MinionManager.GetMinions(q.Range).Count;\n               ", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\tsetContextMenus(form.getContextMenus());\n}\npublic void clearContext()\n{\n\tif(form != null)\n\t\tform.clearContext();\n}\npublic void setFormReferences(ims.framework.ReferencesFlyweightFactory factory)\n{\n", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   for line in frozen_output.splitlines():\n        match = re.match(pattern)\n        if match:\n            return match.group(1) == package_name\n    return False\n\ndef sh(command):\n    \"\"\"\n    Run a shell command with the given arguments", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'm2m': [(6, 0, False)],\n        })\n        f = Form(r)\n        with self.assertRaises(AssertionError):\n            f.m2m.add(Sub.create({'name': \"a\"}))\n        with", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, 1, 2, 3).doit() == Sum(x, (x, 1, 2, 3))\n    assert Sum(x, (x, 1, 2).doit() == Sum(x, (x", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\tUnityEngine.WWW self=(UnityEngine.WWW)checkSelf(l);\n\t\tSystem.String a1;\n\t\tcheckType(l,1,out a1);\n\t\tvar ret=self.UnEscapeURL(a1);\n", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this._newItemList = changedItems;\n            }\n            else if (action == NotifyCollectionChangedAction.Remove)\n            {\n                this._newItemList = new ArrayList();\n            }\n            else\n            {\n                this._newItemList = null;\n            }", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            XMLStreamReader inputSource = new XMLStreamReader();\n            inputSource.setContentHandler(new XMLStreamHandler());\n            inputSource.setErrorHandler(new XMLStreamErrorHandler", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n            }\n        }\n        private string Token2Csv(string s)\n        {\n            return UtilityExtensions.Csv(s);\n        }\n        private string Token2Csv(Token", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "\t\t\tide.width = width;\n\t\tide.height = height;\n\t\tif (ide.width == width && ide.height == height) {\n\t\t\tsizeObtained = true;\n\t}\n#endif\n\t\tif (sizeObtained) {", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               // ...\n            }\n    }\n    }\n}\n\\end{code}\n\nThe code above defines a Label class that represents a position in the bytecode of a method. Labels are used for jump, goto, and switch instructions, and for try catch blocks.\n\nThe", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           var __str = instance_of_this_method.ToString();\n            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            WriteBackInstance(__domain, ptr_of_this_method, __mStack, ref instance_of_", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tlblPosition.setText(\"Label Position: \" + position.toString());\n\t\t\tcomboLabelPosition.select(position);\n\t}\n}\nEnd of code\n\n\nThis is a class for a pie chart settings page in an eclipse plugin. It has various fields for setting pie", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImage=\", lastImage, \"newImage=\", currImage\n        self.assertEqual( int(currImage), int(lastImage)-1, \"Failed", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "           K = pow(self.f, self.x, self.p)\n            self.transport.gss_kex_used = True\n            self.transport._activate_outbound()\n        raise SSHException('GSS-API Error:\\nMajor Status: 0", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           // Create the node\n            DatabaseNode node = new DatabaseNode(this.handler, overallNodeName, connectionData);\n            // Add the node\n            treeModel.insertNodeInto(node, 0);\n            // Notify listeners\n            treeModel.nodeChanged();\n           ", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                          (self.employee_id, from_date, code))\n                res = self.cr.fetchone()\n                return res or (0, 0)\n\n    def simulate_payslip(self, uid, salary, values):\n        # ...\n        #", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "   cl1h, cl2h, cl = integrate_halo(ell, lnzarr, dVdzdOm, marr, mf, BDarr, rhobarr, rho_crit_arr, bias, Darr, pk, zsarr, chis", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.setWidth(getPreferredSize().width);\n        d.setHeight(getPreferredSize().height);\n        return d;\n    }\n\n    @Override\n    public void update(PropertyChangeEvent evt) {\n        // This method is called when any property changes", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       self.cal_p2(ref_p=p0,phi=phi,flag=flag)\n        self.share_edge_init(self.flag)\n        self.all_in_all(phi=phi,ref_p=p0,flag=flag)\n       ", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\twindow.Show();\n\t}\n}\n}\n}\n\nThe code above is a sample window application that connects to a Rithmic server using the Rithmic library and displays various windows to display information about securities, orders, trades, stop orders, and portfolios", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "                   for i in range(params[0]['nbins']):\n                    self.SetBinContent(i + 1, self.GetBinContent(i + 1) + step)\n            elif params[1]['bins'] is None:\n                step = (params", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           //TODO: update the last message transmitted time\n            // update the last message transmitted time for the contact\n            contact.setLastMessageTransmitted(query.getEnd());\n        }\n    }\n}\n}\n\\end{code}\n\nI need help with the", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "           im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n            im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n            im1L = im1.convert(\"L\",", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\twhile (rsp.isOkey()) {\n\t\t\taddLog24(rsp, ret);\n\t\t}\n\treturn ret;\n\t}\n}\n}\n}\n\nThe code is a POC (Proof of Concept) implementation of an NFC Re", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   if self.body_size > 0:\n        yield self.createDescription()\n    yield self.createFields()\n    yield self.createDescription()\n\nclass ACE(FieldSet):\n    def __init__(self, parent, name=None):\n        FieldSet.__init", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t}\n}\nThe code is for a TL1 language engine that is used to communicate with the NE. It has several interfaces, including TL1LanguageEngine, DropListener, and CommAdapterByteListener. It provides methods to connect and disconnect to the NE, as well as listen for property changes", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       if path in self.apps:\n            app = self.apps[path]\n            if app:\n                # Call the WSGI app with the environ and start_response.\n                return app(environ, start_response)\n        else:\n            # No match. Raise a", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\nimport os\n\nThis code seems to be a Python implementation of a Bayesian network modeling tool, specifically the Bayesian Inference and Learning for Causal Models (BIC) algorithm. It defines a class called Model which has methods for loading a model from a file, calculating scores, calculating prob", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           res = EnhanceResult.Failure;\n        }\n    }\n}\n\\end{code}\n\nI've added comments to explain what each section of the code does. Let me know if you have any questions.\n\nThe code defines an `Enhance` class with a", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           entries[entry_name] = rdltypes.UserEnum(entry_value, displayname, desc)\n        return entries\n    #-----------------------------------------------------------\n    def iterelements(self, element: minidom.Element) -> List[minidom.Element]:\n", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"No services found in the directory.\");\n                    this.Close();\n                }\n            }\n        }\n        private void button1_Click(object sender, EventArgs e)\n        {\n            if (isQuiet())\n            writeQuiet();", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "           return (bool)this.ViewState[\"SubmitText\"];\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        }\n    }\n}\n}\n\nI am unable to understand how to implement the SubmitText property.", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "           if(this.trianglesUsed[textureHash] == 0)\n                continue;\n            beginTriangle(this.textureArray[textureHash]);\n            if(this.trianglePoint == 3)\n                insideEnd = true;\n            if(this.current", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   response['Access-Control-Expose-Headers'] = Header\n    return response\ndef serve_404(request, *args, **kwargs):\n    return HttpResponse(status=404)\ndef serve_500(request, *args, **kwargs):\n   ", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "               Driver d = idlePool.Dequeue();\n                oldDrivers.Add(d);\n                if (d.ConnectionLifetimeExpired())\n                    break;\n            }\n            }\n            return oldDrivers;\n        }\n        #endregion\n        internal", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   var = [float(v) for v in var]\n    return var\ndef _get_parameter(name, parameter):\n    \"\"\"Get a parameter from a configuration file.\n    Parameters\n    ----------\n    name : str\n        Name of the parameter\n    parameter : Any", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "   quest = Quest(qn)\n    # Set up NPCs\n    for n in MOB :\n        n.setNpcId(n)\n        n.setQuest(qn)\n        n.setState(CREATED)\n        n.setQuest", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\tempty = string.Concat(string.Format(\"{0:D2}:{1:D2}\", num.ToString(\"D2\"), num1.ToString(\"D2\"), \" \", this.TimeTag);\n\t\t\t}\n\t\t\telse\n\t\t\t{", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           VertexDataSize = GetAttributeSize(PrimitiveType);\n            _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            _sCurProgram = null;\n       ", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "   def __getattr__(self, name):\n        \"\"\"Provide a fast getter for attributes\"\"\"\n        return getattr(self, name)\n    def __setattr__(self, name, value):\n        \"\"\"Provide a fast setter for attributes\"\"\"\n        set", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(TumourGroupListVoBean bean : beans)\n\t{\n\t\tTumourGroupListVo vo = (TumourGroupListVo)bean;\n\t\tcoll.add(vo);\n\t}\n\treturn coll;\n}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tselectedLine = selected;\n\t\t\t}\n\t\t}\n\t\treturn current;\n\t}\n\t\n\t\n\tpublic void highlight(int x, int y, int width, int height) {\n\t\t//This is the area to highlight\n\t\tRect", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       set.start();\n    }\n    \n\t\n\tprivate void doSync() {\n\t\tmSyncThread.set(new SyncTask(new SyncTask(WeaveBookmarksActivity.this));\n\tmSyncButton.setEnabled(false);\n\tmNavigationView.", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.FieldKey = HighestNumber + 1;\n        }\n        #endregion", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\tfor (int i = 0; i < length; ++i)\n\t{\n\t\tscoresSol[i] = classifier.distribution(this.dataset.getInstance(i));\n\t}\n\t\n\tprotein.setTm(scoresSol[0];\n", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
